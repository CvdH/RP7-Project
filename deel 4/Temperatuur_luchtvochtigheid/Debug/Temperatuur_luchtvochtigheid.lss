
Temperatuur_luchtvochtigheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800200  00002c6c  00002d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000265  0080029c  0080029c  00002d9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e8  00000000  00000000  00002e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000080cd  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ec2  00000000  00000000  0000b4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004db0  00000000  00000000  0000d383  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001584  00000000  00000000  00012134  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020d2  00000000  00000000  000136b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000778d  00000000  00000000  0001578a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c0  00000000  00000000  0001cf17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bb c1       	rjmp	.+886    	; 0x378 <__ctors_end>
       2:	00 00       	nop
       4:	d9 c1       	rjmp	.+946    	; 0x3b8 <__bad_interrupt>
       6:	00 00       	nop
       8:	d7 c1       	rjmp	.+942    	; 0x3b8 <__bad_interrupt>
       a:	00 00       	nop
       c:	d5 c1       	rjmp	.+938    	; 0x3b8 <__bad_interrupt>
       e:	00 00       	nop
      10:	d3 c1       	rjmp	.+934    	; 0x3b8 <__bad_interrupt>
      12:	00 00       	nop
      14:	d1 c1       	rjmp	.+930    	; 0x3b8 <__bad_interrupt>
      16:	00 00       	nop
      18:	cf c1       	rjmp	.+926    	; 0x3b8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cd c1       	rjmp	.+922    	; 0x3b8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	cb c1       	rjmp	.+918    	; 0x3b8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e8 c4       	rjmp	.+2512   	; 0x9f6 <__vector_9>
      26:	00 00       	nop
      28:	c7 c1       	rjmp	.+910    	; 0x3b8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c5 c1       	rjmp	.+906    	; 0x3b8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c3 c1       	rjmp	.+902    	; 0x3b8 <__bad_interrupt>
      32:	00 00       	nop
      34:	c1 c1       	rjmp	.+898    	; 0x3b8 <__bad_interrupt>
      36:	00 00       	nop
      38:	bf c1       	rjmp	.+894    	; 0x3b8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bd c1       	rjmp	.+890    	; 0x3b8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bb c1       	rjmp	.+886    	; 0x3b8 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c7       	rjmp	.+3922   	; 0xf98 <__vector_17>
      46:	00 00       	nop
      48:	b7 c1       	rjmp	.+878    	; 0x3b8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b5 c1       	rjmp	.+874    	; 0x3b8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b3 c1       	rjmp	.+870    	; 0x3b8 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__vector_21>
      58:	af c1       	rjmp	.+862    	; 0x3b8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ad c1       	rjmp	.+858    	; 0x3b8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ab c1       	rjmp	.+854    	; 0x3b8 <__bad_interrupt>
      62:	00 00       	nop
      64:	a9 c1       	rjmp	.+850    	; 0x3b8 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__vector_26>
      6c:	a5 c1       	rjmp	.+842    	; 0x3b8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a3 c1       	rjmp	.+838    	; 0x3b8 <__bad_interrupt>
      72:	00 00       	nop
      74:	a1 c1       	rjmp	.+834    	; 0x3b8 <__bad_interrupt>
      76:	00 00       	nop
      78:	9f c1       	rjmp	.+830    	; 0x3b8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9d c1       	rjmp	.+826    	; 0x3b8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	9b c1       	rjmp	.+822    	; 0x3b8 <__bad_interrupt>
      82:	00 00       	nop
      84:	99 c1       	rjmp	.+818    	; 0x3b8 <__bad_interrupt>
      86:	00 00       	nop
      88:	97 c1       	rjmp	.+814    	; 0x3b8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	57 c5       	rjmp	.+2734   	; 0xb3c <__vector_35>
      8e:	00 00       	nop
      90:	c1 c3       	rjmp	.+1922   	; 0x814 <__vector_36>
      92:	00 00       	nop
      94:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_37>
      98:	8f c1       	rjmp	.+798    	; 0x3b8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fb c1       	rjmp	.+1014   	; 0x494 <__vector_39>
      9e:	00 00       	nop
      a0:	8b c1       	rjmp	.+790    	; 0x3b8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	89 c1       	rjmp	.+786    	; 0x3b8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	87 c1       	rjmp	.+782    	; 0x3b8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	85 c1       	rjmp	.+778    	; 0x3b8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	83 c1       	rjmp	.+774    	; 0x3b8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	81 c1       	rjmp	.+770    	; 0x3b8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	7f c1       	rjmp	.+766    	; 0x3b8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	7d c1       	rjmp	.+762    	; 0x3b8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	7b c1       	rjmp	.+758    	; 0x3b8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	79 c1       	rjmp	.+754    	; 0x3b8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	77 c1       	rjmp	.+750    	; 0x3b8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__vector_51>
      d0:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__vector_52>
      d4:	71 c1       	rjmp	.+738    	; 0x3b8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__vector_54>
      dc:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__vector_55>
      e0:	6b c1       	rjmp	.+726    	; 0x3b8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	69 02       	muls	r22, r25
      e6:	24 03       	mulsu	r18, r20
      e8:	24 03       	mulsu	r18, r20
      ea:	24 03       	mulsu	r18, r20
      ec:	24 03       	mulsu	r18, r20
      ee:	24 03       	mulsu	r18, r20
      f0:	24 03       	mulsu	r18, r20
      f2:	24 03       	mulsu	r18, r20
      f4:	69 02       	muls	r22, r25
      f6:	24 03       	mulsu	r18, r20
      f8:	24 03       	mulsu	r18, r20
      fa:	24 03       	mulsu	r18, r20
      fc:	24 03       	mulsu	r18, r20
      fe:	24 03       	mulsu	r18, r20
     100:	24 03       	mulsu	r18, r20
     102:	24 03       	mulsu	r18, r20
     104:	6b 02       	muls	r22, r27
     106:	24 03       	mulsu	r18, r20
     108:	24 03       	mulsu	r18, r20
     10a:	24 03       	mulsu	r18, r20
     10c:	24 03       	mulsu	r18, r20
     10e:	24 03       	mulsu	r18, r20
     110:	24 03       	mulsu	r18, r20
     112:	24 03       	mulsu	r18, r20
     114:	88 02       	muls	r24, r24
     116:	24 03       	mulsu	r18, r20
     118:	24 03       	mulsu	r18, r20
     11a:	24 03       	mulsu	r18, r20
     11c:	24 03       	mulsu	r18, r20
     11e:	24 03       	mulsu	r18, r20
     120:	24 03       	mulsu	r18, r20
     122:	24 03       	mulsu	r18, r20
     124:	6b 02       	muls	r22, r27
     126:	24 03       	mulsu	r18, r20
     128:	24 03       	mulsu	r18, r20
     12a:	24 03       	mulsu	r18, r20
     12c:	24 03       	mulsu	r18, r20
     12e:	24 03       	mulsu	r18, r20
     130:	24 03       	mulsu	r18, r20
     132:	24 03       	mulsu	r18, r20
     134:	88 02       	muls	r24, r24
     136:	24 03       	mulsu	r18, r20
     138:	24 03       	mulsu	r18, r20
     13a:	24 03       	mulsu	r18, r20
     13c:	24 03       	mulsu	r18, r20
     13e:	24 03       	mulsu	r18, r20
     140:	24 03       	mulsu	r18, r20
     142:	24 03       	mulsu	r18, r20
     144:	20 03       	mulsu	r18, r16
     146:	24 03       	mulsu	r18, r20
     148:	24 03       	mulsu	r18, r20
     14a:	24 03       	mulsu	r18, r20
     14c:	24 03       	mulsu	r18, r20
     14e:	24 03       	mulsu	r18, r20
     150:	24 03       	mulsu	r18, r20
     152:	24 03       	mulsu	r18, r20
     154:	9c 02       	muls	r25, r28
     156:	24 03       	mulsu	r18, r20
     158:	24 03       	mulsu	r18, r20
     15a:	24 03       	mulsu	r18, r20
     15c:	24 03       	mulsu	r18, r20
     15e:	24 03       	mulsu	r18, r20
     160:	24 03       	mulsu	r18, r20
     162:	24 03       	mulsu	r18, r20
     164:	bf 02       	muls	r27, r31
     166:	24 03       	mulsu	r18, r20
     168:	24 03       	mulsu	r18, r20
     16a:	24 03       	mulsu	r18, r20
     16c:	24 03       	mulsu	r18, r20
     16e:	24 03       	mulsu	r18, r20
     170:	24 03       	mulsu	r18, r20
     172:	24 03       	mulsu	r18, r20
     174:	90 02       	muls	r25, r16
     176:	24 03       	mulsu	r18, r20
     178:	24 03       	mulsu	r18, r20
     17a:	24 03       	mulsu	r18, r20
     17c:	24 03       	mulsu	r18, r20
     17e:	24 03       	mulsu	r18, r20
     180:	24 03       	mulsu	r18, r20
     182:	24 03       	mulsu	r18, r20
     184:	ae 02       	muls	r26, r30
     186:	24 03       	mulsu	r18, r20
     188:	24 03       	mulsu	r18, r20
     18a:	24 03       	mulsu	r18, r20
     18c:	24 03       	mulsu	r18, r20
     18e:	24 03       	mulsu	r18, r20
     190:	24 03       	mulsu	r18, r20
     192:	24 03       	mulsu	r18, r20
     194:	f6 02       	muls	r31, r22
     196:	24 03       	mulsu	r18, r20
     198:	24 03       	mulsu	r18, r20
     19a:	24 03       	mulsu	r18, r20
     19c:	24 03       	mulsu	r18, r20
     19e:	24 03       	mulsu	r18, r20
     1a0:	24 03       	mulsu	r18, r20
     1a2:	24 03       	mulsu	r18, r20
     1a4:	f6 02       	muls	r31, r22
     1a6:	24 03       	mulsu	r18, r20
     1a8:	24 03       	mulsu	r18, r20
     1aa:	24 03       	mulsu	r18, r20
     1ac:	24 03       	mulsu	r18, r20
     1ae:	24 03       	mulsu	r18, r20
     1b0:	24 03       	mulsu	r18, r20
     1b2:	24 03       	mulsu	r18, r20
     1b4:	f1 02       	muls	r31, r17
     1b6:	24 03       	mulsu	r18, r20
     1b8:	24 03       	mulsu	r18, r20
     1ba:	24 03       	mulsu	r18, r20
     1bc:	24 03       	mulsu	r18, r20
     1be:	24 03       	mulsu	r18, r20
     1c0:	24 03       	mulsu	r18, r20
     1c2:	24 03       	mulsu	r18, r20
     1c4:	f1 02       	muls	r31, r17
     1c6:	24 03       	mulsu	r18, r20
     1c8:	24 03       	mulsu	r18, r20
     1ca:	24 03       	mulsu	r18, r20
     1cc:	24 03       	mulsu	r18, r20
     1ce:	24 03       	mulsu	r18, r20
     1d0:	24 03       	mulsu	r18, r20
     1d2:	24 03       	mulsu	r18, r20
     1d4:	01 03       	mulsu	r16, r17
     1d6:	24 03       	mulsu	r18, r20
     1d8:	24 03       	mulsu	r18, r20
     1da:	24 03       	mulsu	r18, r20
     1dc:	24 03       	mulsu	r18, r20
     1de:	24 03       	mulsu	r18, r20
     1e0:	24 03       	mulsu	r18, r20
     1e2:	24 03       	mulsu	r18, r20
     1e4:	16 03       	mulsu	r17, r22
     1e6:	24 03       	mulsu	r18, r20
     1e8:	24 03       	mulsu	r18, r20
     1ea:	24 03       	mulsu	r18, r20
     1ec:	24 03       	mulsu	r18, r20
     1ee:	24 03       	mulsu	r18, r20
     1f0:	24 03       	mulsu	r18, r20
     1f2:	24 03       	mulsu	r18, r20
     1f4:	01 03       	mulsu	r16, r17
     1f6:	24 03       	mulsu	r18, r20
     1f8:	24 03       	mulsu	r18, r20
     1fa:	24 03       	mulsu	r18, r20
     1fc:	24 03       	mulsu	r18, r20
     1fe:	24 03       	mulsu	r18, r20
     200:	24 03       	mulsu	r18, r20
     202:	24 03       	mulsu	r18, r20
     204:	16 03       	mulsu	r17, r22
     206:	24 03       	mulsu	r18, r20
     208:	24 03       	mulsu	r18, r20
     20a:	24 03       	mulsu	r18, r20
     20c:	24 03       	mulsu	r18, r20
     20e:	24 03       	mulsu	r18, r20
     210:	24 03       	mulsu	r18, r20
     212:	24 03       	mulsu	r18, r20
     214:	1a 03       	fmul	r17, r18
     216:	24 03       	mulsu	r18, r20
     218:	24 03       	mulsu	r18, r20
     21a:	24 03       	mulsu	r18, r20
     21c:	24 03       	mulsu	r18, r20
     21e:	24 03       	mulsu	r18, r20
     220:	24 03       	mulsu	r18, r20
     222:	24 03       	mulsu	r18, r20
     224:	c7 02       	muls	r28, r23
     226:	24 03       	mulsu	r18, r20
     228:	24 03       	mulsu	r18, r20
     22a:	24 03       	mulsu	r18, r20
     22c:	24 03       	mulsu	r18, r20
     22e:	24 03       	mulsu	r18, r20
     230:	24 03       	mulsu	r18, r20
     232:	24 03       	mulsu	r18, r20
     234:	c7 02       	muls	r28, r23
     236:	24 03       	mulsu	r18, r20
     238:	24 03       	mulsu	r18, r20
     23a:	24 03       	mulsu	r18, r20
     23c:	24 03       	mulsu	r18, r20
     23e:	24 03       	mulsu	r18, r20
     240:	24 03       	mulsu	r18, r20
     242:	24 03       	mulsu	r18, r20
     244:	c9 02       	muls	r28, r25
     246:	24 03       	mulsu	r18, r20
     248:	24 03       	mulsu	r18, r20
     24a:	24 03       	mulsu	r18, r20
     24c:	24 03       	mulsu	r18, r20
     24e:	24 03       	mulsu	r18, r20
     250:	24 03       	mulsu	r18, r20
     252:	24 03       	mulsu	r18, r20
     254:	d9 02       	muls	r29, r25
     256:	24 03       	mulsu	r18, r20
     258:	24 03       	mulsu	r18, r20
     25a:	24 03       	mulsu	r18, r20
     25c:	24 03       	mulsu	r18, r20
     25e:	24 03       	mulsu	r18, r20
     260:	24 03       	mulsu	r18, r20
     262:	24 03       	mulsu	r18, r20
     264:	ed 02       	muls	r30, r29
     266:	5b 09       	sbc	r21, r11
     268:	68 09       	sbc	r22, r8
     26a:	63 09       	sbc	r22, r3
     26c:	68 09       	sbc	r22, r8
     26e:	68 09       	sbc	r22, r8
     270:	68 09       	sbc	r22, r8
     272:	68 09       	sbc	r22, r8
     274:	68 09       	sbc	r22, r8
     276:	68 09       	sbc	r22, r8
     278:	68 09       	sbc	r22, r8
     27a:	68 09       	sbc	r22, r8
     27c:	68 09       	sbc	r22, r8
     27e:	68 09       	sbc	r22, r8
     280:	68 09       	sbc	r22, r8
     282:	68 09       	sbc	r22, r8
     284:	68 09       	sbc	r22, r8
     286:	68 09       	sbc	r22, r8
     288:	68 09       	sbc	r22, r8
     28a:	68 09       	sbc	r22, r8
     28c:	68 09       	sbc	r22, r8
     28e:	68 09       	sbc	r22, r8
     290:	68 09       	sbc	r22, r8
     292:	4d 09       	sbc	r20, r13
     294:	68 09       	sbc	r22, r8
     296:	68 09       	sbc	r22, r8
     298:	54 09       	sbc	r21, r4
     29a:	68 09       	sbc	r22, r8
     29c:	68 09       	sbc	r22, r8
     29e:	68 09       	sbc	r22, r8
     2a0:	68 09       	sbc	r22, r8
     2a2:	68 09       	sbc	r22, r8
     2a4:	68 09       	sbc	r22, r8
     2a6:	68 09       	sbc	r22, r8
     2a8:	68 09       	sbc	r22, r8
     2aa:	68 09       	sbc	r22, r8
     2ac:	68 09       	sbc	r22, r8
     2ae:	68 09       	sbc	r22, r8
     2b0:	68 09       	sbc	r22, r8
     2b2:	68 09       	sbc	r22, r8
     2b4:	68 09       	sbc	r22, r8
     2b6:	68 09       	sbc	r22, r8
     2b8:	68 09       	sbc	r22, r8
     2ba:	68 09       	sbc	r22, r8
     2bc:	68 09       	sbc	r22, r8
     2be:	68 09       	sbc	r22, r8
     2c0:	68 09       	sbc	r22, r8
     2c2:	68 09       	sbc	r22, r8
     2c4:	68 09       	sbc	r22, r8
     2c6:	68 09       	sbc	r22, r8
     2c8:	68 09       	sbc	r22, r8
     2ca:	68 09       	sbc	r22, r8
     2cc:	68 09       	sbc	r22, r8
     2ce:	68 09       	sbc	r22, r8
     2d0:	68 09       	sbc	r22, r8
     2d2:	3b 09       	sbc	r19, r11
     2d4:	68 09       	sbc	r22, r8
     2d6:	68 09       	sbc	r22, r8
     2d8:	45 09       	sbc	r20, r5
     2da:	68 09       	sbc	r22, r8
     2dc:	68 09       	sbc	r22, r8
     2de:	68 09       	sbc	r22, r8
     2e0:	68 09       	sbc	r22, r8
     2e2:	68 09       	sbc	r22, r8
     2e4:	68 09       	sbc	r22, r8
     2e6:	68 09       	sbc	r22, r8
     2e8:	68 09       	sbc	r22, r8
     2ea:	68 09       	sbc	r22, r8
     2ec:	68 09       	sbc	r22, r8
     2ee:	68 09       	sbc	r22, r8
     2f0:	68 09       	sbc	r22, r8
     2f2:	68 09       	sbc	r22, r8
     2f4:	68 09       	sbc	r22, r8
     2f6:	3e 09       	sbc	r19, r14
     2f8:	68 09       	sbc	r22, r8
     2fa:	68 09       	sbc	r22, r8
     2fc:	68 09       	sbc	r22, r8
     2fe:	34 09       	sbc	r19, r4
     300:	48 09       	sbc	r20, r8

00000302 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     302:	0a ed       	ldi	r16, 0xDA	; 218
     304:	12 e0       	ldi	r17, 0x02	; 2
     306:	0f 2e       	mov	r0, r31
     308:	f2 e0       	ldi	r31, 0x02	; 2
     30a:	ef 2e       	mov	r14, r31
     30c:	f3 e0       	ldi	r31, 0x03	; 3
     30e:	ff 2e       	mov	r15, r31
     310:	f0 2d       	mov	r31, r0
     312:	26 c0       	rjmp	.+76     	; 0x360 <prvIdleTask+0x5e>
     314:	0e 94 59 10 	call	0x20b2	; 0x20b2 <vTaskSuspendAll>
     318:	d8 01       	movw	r26, r16
     31a:	cc 91       	ld	r28, X
     31c:	0e 94 19 11 	call	0x2232	; 0x2232 <xTaskResumeAll>
     320:	cc 23       	and	r28, r28
     322:	f1 f0       	breq	.+60     	; 0x360 <prvIdleTask+0x5e>
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	0f 92       	push	r0
     32a:	d8 01       	movw	r26, r16
     32c:	15 96       	adiw	r26, 0x05	; 5
     32e:	ed 91       	ld	r30, X+
     330:	fc 91       	ld	r31, X
     332:	16 97       	sbiw	r26, 0x06	; 6
     334:	c6 81       	ldd	r28, Z+6	; 0x06
     336:	d7 81       	ldd	r29, Z+7	; 0x07
     338:	ce 01       	movw	r24, r28
     33a:	02 96       	adiw	r24, 0x02	; 2
     33c:	ff d1       	rcall	.+1022   	; 0x73c <uxListRemove>
     33e:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <uxCurrentNumberOfTasks>
     342:	81 50       	subi	r24, 0x01	; 1
     344:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <uxCurrentNumberOfTasks>
     348:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <uxDeletedTasksWaitingCleanUp>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <uxDeletedTasksWaitingCleanUp>
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	8f 89       	ldd	r24, Y+23	; 0x17
     358:	98 8d       	ldd	r25, Y+24	; 0x18
     35a:	5d d0       	rcall	.+186    	; 0x416 <vPortFree>
     35c:	ce 01       	movw	r24, r28
     35e:	5b d0       	rcall	.+182    	; 0x416 <vPortFree>
     360:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <uxDeletedTasksWaitingCleanUp>
     364:	81 11       	cpse	r24, r1
     366:	d6 cf       	rjmp	.-84     	; 0x314 <prvIdleTask+0x12>
     368:	f7 01       	movw	r30, r14
     36a:	80 81       	ld	r24, Z
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	10 f0       	brcs	.+4      	; 0x374 <prvIdleTask+0x72>
     370:	0e 94 4a 0a 	call	0x1494	; 0x1494 <vPortYield>
     374:	5f d0       	rcall	.+190    	; 0x434 <vApplicationIdleHook>
     376:	f4 cf       	rjmp	.-24     	; 0x360 <prvIdleTask+0x5e>

00000378 <__ctors_end>:
     378:	11 24       	eor	r1, r1
     37a:	1f be       	out	0x3f, r1	; 63
     37c:	cf ef       	ldi	r28, 0xFF	; 255
     37e:	d1 e2       	ldi	r29, 0x21	; 33
     380:	de bf       	out	0x3e, r29	; 62
     382:	cd bf       	out	0x3d, r28	; 61
     384:	00 e0       	ldi	r16, 0x00	; 0
     386:	0c bf       	out	0x3c, r16	; 60

00000388 <__do_copy_data>:
     388:	12 e0       	ldi	r17, 0x02	; 2
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b2 e0       	ldi	r27, 0x02	; 2
     38e:	ec e6       	ldi	r30, 0x6C	; 108
     390:	fc e2       	ldi	r31, 0x2C	; 44
     392:	00 e0       	ldi	r16, 0x00	; 0
     394:	0b bf       	out	0x3b, r16	; 59
     396:	02 c0       	rjmp	.+4      	; 0x39c <__do_copy_data+0x14>
     398:	07 90       	elpm	r0, Z+
     39a:	0d 92       	st	X+, r0
     39c:	ac 39       	cpi	r26, 0x9C	; 156
     39e:	b1 07       	cpc	r27, r17
     3a0:	d9 f7       	brne	.-10     	; 0x398 <__do_copy_data+0x10>

000003a2 <__do_clear_bss>:
     3a2:	25 e0       	ldi	r18, 0x05	; 5
     3a4:	ac e9       	ldi	r26, 0x9C	; 156
     3a6:	b2 e0       	ldi	r27, 0x02	; 2
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <.do_clear_bss_start>

000003aa <.do_clear_bss_loop>:
     3aa:	1d 92       	st	X+, r1

000003ac <.do_clear_bss_start>:
     3ac:	a1 30       	cpi	r26, 0x01	; 1
     3ae:	b2 07       	cpc	r27, r18
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <.do_clear_bss_loop>
     3b2:	73 d6       	rcall	.+3302   	; 0x109a <main>
     3b4:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <_exit>

000003b8 <__bad_interrupt>:
     3b8:	23 ce       	rjmp	.-954    	; 0x0 <__vectors>

000003ba <system_tick>:
     3ba:	8f 93       	push	r24
     3bc:	8f b7       	in	r24, 0x3f	; 63
     3be:	8f 93       	push	r24
     3c0:	f8 94       	cli
     3c2:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <__system_time>
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <__system_time>
     3cc:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <__system_time+0x1>
     3d0:	8f 4f       	sbci	r24, 0xFF	; 255
     3d2:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <__system_time+0x1>
     3d6:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <__system_time+0x2>
     3da:	8f 4f       	sbci	r24, 0xFF	; 255
     3dc:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <__system_time+0x2>
     3e0:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <__system_time+0x3>
     3e4:	8f 4f       	sbci	r24, 0xFF	; 255
     3e6:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <__system_time+0x3>
     3ea:	8f 91       	pop	r24
     3ec:	8f bf       	out	0x3f, r24	; 63
     3ee:	8f 91       	pop	r24
     3f0:	08 95       	ret

000003f2 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     3f8:	0e 94 59 10 	call	0x20b2	; 0x20b2 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     3fc:	ce 01       	movw	r24, r28
     3fe:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <malloc>
     402:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     404:	0e 94 19 11 	call	0x2232	; 0x2232 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     408:	20 97       	sbiw	r28, 0x00	; 0
     40a:	09 f4       	brne	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     40c:	2c d0       	rcall	.+88     	; 0x466 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     40e:	ce 01       	movw	r24, r28
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
	if( pv )
     41a:	00 97       	sbiw	r24, 0x00	; 0
     41c:	41 f0       	breq	.+16     	; 0x42e <vPortFree+0x18>
     41e:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     420:	0e 94 59 10 	call	0x20b2	; 0x20b2 <vTaskSuspendAll>
		{
			free( pv );
     424:	ce 01       	movw	r24, r28
     426:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     42a:	0e 94 19 11 	call	0x2232	; 0x2232 <xTaskResumeAll>
	}
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Mega with 2560
	DIDR0 = 0xFF;
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     43a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     43e:	80 b7       	in	r24, 0x30	; 48
     440:	87 7f       	andi	r24, 0xF7	; 247
     442:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     444:	80 b7       	in	r24, 0x30	; 48
     446:	80 68       	ori	r24, 0x80	; 128
     448:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     44a:	83 b7       	in	r24, 0x33	; 51
     44c:	81 7f       	andi	r24, 0xF1	; 241
     44e:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	0f 92       	push	r0

	sleep_enable();
     456:	83 b7       	in	r24, 0x33	; 51
     458:	81 60       	ori	r24, 0x01	; 1
     45a:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63

	sleep_cpu();		// good night.
     460:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     462:	13 be       	out	0x33, r1	; 51
     464:	08 95       	ret

00000466 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Mega with 2560
	DDRB  |= _BV(DDB7);
     466:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     468:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46a:	83 ed       	ldi	r24, 0xD3	; 211
     46c:	90 e3       	ldi	r25, 0x30	; 48
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	f1 f7       	brne	.-4      	; 0x46e <vApplicationMallocFailedHook+0x8>
     472:	00 c0       	rjmp	.+0      	; 0x474 <vApplicationMallocFailedHook+0xe>
     474:	00 00       	nop

	for(;;)
	{
		_delay_ms(50);
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     476:	1f 9a       	sbi	0x03, 7	; 3
     478:	f8 cf       	rjmp	.-16     	; 0x46a <vApplicationMallocFailedHook+0x4>

0000047a <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
	DDRB  |= _BV(DDB7);
     47a:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     47c:	2f 9a       	sbi	0x05, 7	; 5
     47e:	2f e7       	ldi	r18, 0x7F	; 127
     480:	8a e1       	ldi	r24, 0x1A	; 26
     482:	96 e0       	ldi	r25, 0x06	; 6
     484:	21 50       	subi	r18, 0x01	; 1
     486:	80 40       	sbci	r24, 0x00	; 0
     488:	90 40       	sbci	r25, 0x00	; 0
     48a:	e1 f7       	brne	.-8      	; 0x484 <vApplicationStackOverflowHook+0xa>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <vApplicationStackOverflowHook+0x14>
     48e:	00 00       	nop

	for(;;)
	{
		_delay_ms(2000);
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
     490:	1f 9a       	sbi	0x03, 7	; 3
     492:	f5 cf       	rjmp	.-22     	; 0x47e <vApplicationStackOverflowHook+0x4>

00000494 <__vector_39>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect) __attribute__((hot, flatten));
ISR(TWI_vect)
{
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	0b b6       	in	r0, 0x3b	; 59
     4a0:	0f 92       	push	r0
     4a2:	2f 93       	push	r18
     4a4:	3f 93       	push	r19
     4a6:	8f 93       	push	r24
     4a8:	9f 93       	push	r25
     4aa:	af 93       	push	r26
     4ac:	bf 93       	push	r27
     4ae:	ef 93       	push	r30
     4b0:	ff 93       	push	r31
  static uint8_t I2C_bufPtr;

  switch (TWSR)
     4b2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     4b6:	8e 2f       	mov	r24, r30
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	fc 01       	movw	r30, r24
     4bc:	38 97       	sbiw	r30, 0x08	; 8
     4be:	e1 3c       	cpi	r30, 0xC1	; 193
     4c0:	f1 05       	cpc	r31, r1
     4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__vector_39+0x32>
     4c4:	c1 c0       	rjmp	.+386    	; 0x648 <__vector_39+0x1b4>
     4c6:	88 27       	eor	r24, r24
     4c8:	ee 58       	subi	r30, 0x8E	; 142
     4ca:	ff 4f       	sbci	r31, 0xFF	; 255
     4cc:	8f 4f       	sbci	r24, 0xFF	; 255
     4ce:	0c 94 af 14 	jmp	0x295e	; 0x295e <__tablejump2__>
  {

    case I2C_START:             // START has been transmitted
    case I2C_REP_START:         // Repeated START has been transmitted
		I2C_bufPtr = 0;         // Set buffer pointer to the TWI Address location
     4d2:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <__data_end>

// Master Transmitter

    case I2C_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case I2C_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
		if (I2C_bufPtr < I2C_msgSize)
     4d6:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end>
     4da:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <I2C_msgSize>
     4de:	e8 17       	cp	r30, r24
     4e0:	70 f4       	brcc	.+28     	; 0x4fe <__vector_39+0x6a>
		{
			TWDR = I2C_buf[I2C_bufPtr++];
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	8e 0f       	add	r24, r30
     4e6:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	e0 56       	subi	r30, 0x60	; 96
     4ee:	fd 4f       	sbci	r31, 0xFD	; 253
     4f0:	80 81       	ld	r24, Z
     4f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     4f6:	85 e8       	ldi	r24, 0x85	; 133
     4f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     4fc:	ac c0       	rjmp	.+344    	; 0x656 <__vector_39+0x1c2>
				   (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
				   (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
				   (0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
		I2C_statusReg.lastTransOK = true;                 // Set status bits to completed successfully.
     4fe:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <I2C_statusReg>
     502:	81 60       	ori	r24, 0x01	; 1
     504:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <I2C_statusReg>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     508:	84 e9       	ldi	r24, 0x94	; 148
     50a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     50e:	a3 c0       	rjmp	.+326    	; 0x656 <__vector_39+0x1c2>
		}
		break;

    case I2C_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case I2C_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
	    I2C_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     510:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     514:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
	    // Reset TWI Interface and send START.
		TWCR = 	(1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     518:	85 ee       	ldi	r24, 0xE5	; 229
     51a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				(1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
				(1<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|    		// Send Start.
				(0<<TWWC);
		break;
     51e:	9b c0       	rjmp	.+310    	; 0x656 <__vector_39+0x1c2>


// Master Receiver

    case I2C_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
		I2C_buf[I2C_bufPtr++] = TWDR;
     520:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end>
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	8e 0f       	add	r24, r30
     528:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     52c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	e0 56       	subi	r30, 0x60	; 96
     534:	fd 4f       	sbci	r31, 0xFD	; 253
     536:	80 83       	st	Z, r24

    case I2C_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
		if (I2C_bufPtr < (I2C_msgSize-1) )                  // Detect the last byte to NACK it.
     538:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <__data_end>
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <I2C_msgSize>
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	28 17       	cp	r18, r24
     548:	39 07       	cpc	r19, r25
     54a:	24 f4       	brge	.+8      	; 0x554 <__vector_39+0xc0>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     54c:	85 ec       	ldi	r24, 0xC5	; 197
     54e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     552:	81 c0       	rjmp	.+258    	; 0x656 <__vector_39+0x1c2>
				   (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
				   (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
				   (0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     554:	85 e8       	ldi	r24, 0x85	; 133
     556:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     55a:	7d c0       	rjmp	.+250    	; 0x656 <__vector_39+0x1c2>
				   (0<<TWWC);                                 //
		}
		break;

    case I2C_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
		I2C_buf[I2C_bufPtr] = TWDR;
     55c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     560:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end>
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	e0 56       	subi	r30, 0x60	; 96
     568:	fd 4f       	sbci	r31, 0xFD	; 253
     56a:	80 83       	st	Z, r24
		I2C_statusReg.lastTransOK = true;                 // Set status bits to completed successfully.
     56c:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <I2C_statusReg>
     570:	81 60       	ori	r24, 0x01	; 1
     572:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <I2C_statusReg>
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     576:	84 ed       	ldi	r24, 0xD4	; 212
     578:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			   (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
			   (1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			   (0<<TWWC);                                 //
		break;
     57c:	6c c0       	rjmp	.+216    	; 0x656 <__vector_39+0x1c2>



    case I2C_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received
 	    I2C_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     57e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     582:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
		// Reset TWI Interface and send STOP.
		TWCR = 	(1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     586:	85 ed       	ldi	r24, 0xD5	; 213
     588:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				(1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
				(1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|    		// Send stop.
				(0<<TWWC);
		break;
     58c:	64 c0       	rjmp	.+200    	; 0x656 <__vector_39+0x1c2>
// Slave Transmitter

	case I2C_STX_ADR_ACK:			// Own SLA+R has been received; ACK has been returned
	case I2C_STX_ADR_ACK_M_ARB_LOST:// Arbitration lost in SLA+R/W as Master; own SLA+R has
									// been received; ACK has been returned
	    I2C_bufPtr   = 0;	    	// Set buffer pointer to first data location
     58e:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <__data_end>


	case I2C_STX_DATA_ACK:		// Data byte in TWDR has been transmitted; ACK has been received
	    TWDR = I2C_buf[I2C_bufPtr++];
     592:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end>
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	8e 0f       	add	r24, r30
     59a:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	e0 56       	subi	r30, 0x60	; 96
     5a2:	fd 4f       	sbci	r31, 0xFD	; 253
     5a4:	80 81       	ld	r24, Z
     5a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	    						// Enable TWI Interrupt and clear the flag to send byte
	    TWCR = 	(1<<TWEN) |
     5aa:	85 ec       	ldi	r24, 0xC5	; 197
     5ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	    		(1<<TWIE)|(1<<TWINT)|
	    		(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|
	    		(0<<TWWC);
	    break;
     5b0:	52 c0       	rjmp	.+164    	; 0x656 <__vector_39+0x1c2>


	case I2C_STX_DATA_NACK:  	// Data byte in TWDR has been transmitted; NACK has been received.
	    						// I.e. this could be the end of the transmission.
	    if (I2C_bufPtr == I2C_msgSize) 	    // Have we transmitted all expected data?
     5b2:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <__data_end>
     5b6:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <I2C_msgSize>
     5ba:	98 13       	cpse	r25, r24
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <__vector_39+0x136>
	    {
	        I2C_statusReg.lastTransOK = true; // Set status bits to completed successfully.
     5be:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <I2C_statusReg>
     5c2:	81 60       	ori	r24, 0x01	; 1
     5c4:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <I2C_statusReg>
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <__vector_39+0x13e>
	    }
	    else
	    {
	        I2C_state = TWSR;     // Master has sent a NACK before all data where sent, Store I2C State as error message.
     5ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     5ce:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
	    }

	    // Put I2C Transceiver in passive mode.
	    // Enable I2C-interface and release I2C pins
	    TWCR = (1<<TWEN)|
     5d2:	84 e0       	ldi	r24, 0x04	; 4
     5d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	           (0<<TWIE)|(0<<TWINT)|                // Disable Interrupt
	           (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|     // Do not acknowledge on any new requests.
	           (0<<TWWC);
	   break;
     5d8:	3e c0       	rjmp	.+124    	; 0x656 <__vector_39+0x1c2>


    case I2C_STX_DATA_ACK_LAST_BYTE: // Last data byte in TWDR has been transmitted TWEA = ; ACK has been received

    	// Enable TWI Interrupt and clear the flag to send byte
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     5da:	85 ec       	ldi	r24, 0xC5	; 197
     5dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Acknowledge on any new requests.
               (0<<TWWC);

	    break;
     5e0:	3a c0       	rjmp	.+116    	; 0x656 <__vector_39+0x1c2>
// Slave Receiver

	case I2C_SRX_GEN_ACK:				// General call address has been received; ACK has been returned
	case I2C_SRX_GEN_ACK_M_ARB_LOST:	// Arbitration lost in SLA+R/W as Master; General call
										// address has been received; ACK has been returned
	    I2C_statusReg.genAddressCall = true;
     5e2:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <I2C_statusReg>
     5e6:	84 60       	ori	r24, 0x04	; 4
     5e8:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <I2C_statusReg>

	case I2C_SRX_ADR_ACK:		// Own SLA+W has been received ACK has been returned
	case I2C_SRX_ADR_ACK_M_ARB_LOST:	// Arbitration lost in SLA+R/W as Master; own SLA+W
										// has been received; ACK has been returned

	    I2C_statusReg.RxDataInBuf = true; // Don't need to clear I2C_statusRegister.generalAddressCall due to that it is the default state.
     5ec:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <I2C_statusReg>
     5f0:	82 60       	ori	r24, 0x02	; 2
     5f2:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <I2C_statusReg>

	    I2C_bufPtr   = 0;	    // Set buffer pointer to first data location
     5f6:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <__data_end>
	    // Reset the TWI Interrupt to wait for a new event.

	    // TWI Interface enabled
	    // Enable TWI Interrupt and clear the flag to send byte
	    // Expect ACK on this transmission
	    TWCR =  (1<<TWEN)|
     5fa:	85 ec       	ldi	r24, 0xC5	; 197
     5fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	    		(1<<TWIE)|(1<<TWINT)|
	    		(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|
	    		(0<<TWWC);
		break;
     600:	2a c0       	rjmp	.+84     	; 0x656 <__vector_39+0x1c2>

	case I2C_SRX_ADR_DATA_ACK:	// Previously addressed with own SLA+W; data has been received; ACK has been returned
	case I2C_SRX_GEN_DATA_ACK:	// Previously addressed with general call; data has been received; ACK has been returned

		I2C_buf[I2C_bufPtr++] = TWDR;
     602:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	8e 0f       	add	r24, r30
     60a:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     60e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	e0 56       	subi	r30, 0x60	; 96
     616:	fd 4f       	sbci	r31, 0xFD	; 253
     618:	80 83       	st	Z, r24

		I2C_statusReg.lastTransOK = true;		// Set flag transmission successful.
     61a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <I2C_statusReg>
     61e:	81 60       	ori	r24, 0x01	; 1
     620:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <I2C_statusReg>

		// Reset the TWI Interrupt to wait for a new event.
		TWCR = (1<<TWEN)|                          // TWI Interface enabled
     624:	85 ec       	ldi	r24, 0xC5	; 197
     626:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
		       (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
		       (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Send ACK after next reception
		       (0<<TWWC);
		break;
     62a:	15 c0       	rjmp	.+42     	; 0x656 <__vector_39+0x1c2>

    case I2C_SRX_ADR_DATA_NACK: // Previously addressed with own SLA+W; data has been received; NOT ACK has been returned
    case I2C_SRX_GEN_DATA_NACK: // Previously addressed with general call; data has been received; NOT ACK has been returned

    	// NOT ACK back at the Master
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     62c:	85 e8       	ldi	r24, 0x85	; 133
     62e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Do not acknowledge on any new requests.
               (0<<TWWC);
		break;
     632:	11 c0       	rjmp	.+34     	; 0x656 <__vector_39+0x1c2>

    case I2C_SRX_STOP_RESTART:  // A STOP condition or repeated START condition has been received while still addressed as Slave

    	I2C_checkBusyAfterStop = I2C_HOW_MANY_BUSY_CHECKS_AFTER_STOP; // do some busy checks before hitting the bus again.
     634:	84 e0       	ldi	r24, 0x04	; 4
     636:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <I2C_checkBusyAfterStop>

        // Put TWI Transceiver in passive mode.
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     63a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (0<<TWIE)|(0<<TWINT)|               // Disable Interrupt
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Do not acknowledge on any new requests.
               (0<<TWWC);
        break;
     63e:	0b c0       	rjmp	.+22     	; 0x656 <__vector_39+0x1c2>


// ERRORS AND FAULT CONDITIONS

    case I2C_ARB_LOST:          						// Arbitration lost
		TWCR = (1<<TWEN)|                               // TWI Interface enabled
     640:	85 ee       	ldi	r24, 0xE5	; 229
     642:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			   (1<<TWIE)|(1<<TWINT)|                    // Enable TWI Interrupt and clear the flag
			   (1<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|         // Initiate a (RE)START condition.
			   (0<<TWWC);                               //
		break;
     646:	07 c0       	rjmp	.+14     	; 0x656 <__vector_39+0x1c2>

    case I2C_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    case I2C_NO_STATE:          // No relevant state information available TWINT = 0

    default:
		I2C_state = TWSR;                               // Store TWSR and automatically sets clears noErrors bit.
     648:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     64c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>

														// Reset TWI Interface
		TWCR = (1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     650:	85 ed       	ldi	r24, 0xD5	; 213
     652:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			 (1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
			 (1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|    		// Acknowledge on any new requests. Send stop.
			 (0<<TWWC);                               	//
      	break;
  }
}
     656:	ff 91       	pop	r31
     658:	ef 91       	pop	r30
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	3f 91       	pop	r19
     664:	2f 91       	pop	r18
     666:	0f 90       	pop	r0
     668:	0b be       	out	0x3b, r0	; 59
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     674:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     676:	03 96       	adiw	r24, 0x03	; 3
     678:	92 83       	std	Z+2, r25	; 0x02
     67a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     67c:	2f ef       	ldi	r18, 0xFF	; 255
     67e:	3f ef       	ldi	r19, 0xFF	; 255
     680:	34 83       	std	Z+4, r19	; 0x04
     682:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     684:	96 83       	std	Z+6, r25	; 0x06
     686:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     688:	90 87       	std	Z+8, r25	; 0x08
     68a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     68c:	10 82       	st	Z, r1
     68e:	08 95       	ret

00000690 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     690:	fc 01       	movw	r30, r24
     692:	11 86       	std	Z+9, r1	; 0x09
     694:	10 86       	std	Z+8, r1	; 0x08
     696:	08 95       	ret

00000698 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	9c 01       	movw	r18, r24
     69e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     6a0:	dc 01       	movw	r26, r24
     6a2:	11 96       	adiw	r26, 0x01	; 1
     6a4:	cd 91       	ld	r28, X+
     6a6:	dc 91       	ld	r29, X
     6a8:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     6aa:	d3 83       	std	Z+3, r29	; 0x03
     6ac:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     6ae:	8c 81       	ldd	r24, Y+4	; 0x04
     6b0:	9d 81       	ldd	r25, Y+5	; 0x05
     6b2:	95 83       	std	Z+5, r25	; 0x05
     6b4:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     6b6:	8c 81       	ldd	r24, Y+4	; 0x04
     6b8:	9d 81       	ldd	r25, Y+5	; 0x05
     6ba:	dc 01       	movw	r26, r24
     6bc:	13 96       	adiw	r26, 0x03	; 3
     6be:	7c 93       	st	X, r23
     6c0:	6e 93       	st	-X, r22
     6c2:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     6c4:	7d 83       	std	Y+5, r23	; 0x05
     6c6:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     6c8:	31 87       	std	Z+9, r19	; 0x09
     6ca:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     6cc:	f9 01       	movw	r30, r18
     6ce:	80 81       	ld	r24, Z
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
     6d2:	80 83       	st	Z, r24
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6e0:	48 81       	ld	r20, Y
     6e2:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     6e4:	4f 3f       	cpi	r20, 0xFF	; 255
     6e6:	2f ef       	ldi	r18, 0xFF	; 255
     6e8:	52 07       	cpc	r21, r18
     6ea:	21 f4       	brne	.+8      	; 0x6f4 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     6ec:	fc 01       	movw	r30, r24
     6ee:	a7 81       	ldd	r26, Z+7	; 0x07
     6f0:	b0 85       	ldd	r27, Z+8	; 0x08
     6f2:	0d c0       	rjmp	.+26     	; 0x70e <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6f4:	dc 01       	movw	r26, r24
     6f6:	13 96       	adiw	r26, 0x03	; 3
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <vListInsert+0x22>
     6fa:	df 01       	movw	r26, r30
     6fc:	12 96       	adiw	r26, 0x02	; 2
     6fe:	ed 91       	ld	r30, X+
     700:	fc 91       	ld	r31, X
     702:	13 97       	sbiw	r26, 0x03	; 3
     704:	20 81       	ld	r18, Z
     706:	31 81       	ldd	r19, Z+1	; 0x01
     708:	42 17       	cp	r20, r18
     70a:	53 07       	cpc	r21, r19
     70c:	b0 f7       	brcc	.-20     	; 0x6fa <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     70e:	12 96       	adiw	r26, 0x02	; 2
     710:	ed 91       	ld	r30, X+
     712:	fc 91       	ld	r31, X
     714:	13 97       	sbiw	r26, 0x03	; 3
     716:	fb 83       	std	Y+3, r31	; 0x03
     718:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     71a:	d5 83       	std	Z+5, r29	; 0x05
     71c:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     71e:	bd 83       	std	Y+5, r27	; 0x05
     720:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     722:	13 96       	adiw	r26, 0x03	; 3
     724:	dc 93       	st	X, r29
     726:	ce 93       	st	-X, r28
     728:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     72a:	99 87       	std	Y+9, r25	; 0x09
     72c:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     72e:	fc 01       	movw	r30, r24
     730:	20 81       	ld	r18, Z
     732:	2f 5f       	subi	r18, 0xFF	; 255
     734:	20 83       	st	Z, r18
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     742:	a0 85       	ldd	r26, Z+8	; 0x08
     744:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     746:	c2 81       	ldd	r28, Z+2	; 0x02
     748:	d3 81       	ldd	r29, Z+3	; 0x03
     74a:	84 81       	ldd	r24, Z+4	; 0x04
     74c:	95 81       	ldd	r25, Z+5	; 0x05
     74e:	9d 83       	std	Y+5, r25	; 0x05
     750:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     752:	c4 81       	ldd	r28, Z+4	; 0x04
     754:	d5 81       	ldd	r29, Z+5	; 0x05
     756:	82 81       	ldd	r24, Z+2	; 0x02
     758:	93 81       	ldd	r25, Z+3	; 0x03
     75a:	9b 83       	std	Y+3, r25	; 0x03
     75c:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     75e:	11 96       	adiw	r26, 0x01	; 1
     760:	8d 91       	ld	r24, X+
     762:	9c 91       	ld	r25, X
     764:	12 97       	sbiw	r26, 0x02	; 2
     766:	e8 17       	cp	r30, r24
     768:	f9 07       	cpc	r31, r25
     76a:	31 f4       	brne	.+12     	; 0x778 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     76c:	84 81       	ldd	r24, Z+4	; 0x04
     76e:	95 81       	ldd	r25, Z+5	; 0x05
     770:	12 96       	adiw	r26, 0x02	; 2
     772:	9c 93       	st	X, r25
     774:	8e 93       	st	-X, r24
     776:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     778:	11 86       	std	Z+9, r1	; 0x09
     77a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     77c:	8c 91       	ld	r24, X
     77e:	81 50       	subi	r24, 0x01	; 1
     780:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <watchdogTaak>:
		setSpeed(100);
		motorLinks();
		vTaskDelay(xDelay);
		motorRechts();
		vTaskDelay(xDelay);
		watchdogMotor = 1;
     788:	8f e9       	ldi	r24, 0x9F	; 159
     78a:	9f e0       	ldi	r25, 0x0F	; 15
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <watchdogTaak+0x4>
     790:	00 c0       	rjmp	.+0      	; 0x792 <watchdogTaak+0xa>
     792:	00 00       	nop
     794:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <watchdogSonar>
     798:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <watchdogSonar+0x1>
     79c:	89 2b       	or	r24, r25
     79e:	a1 f3       	breq	.-24     	; 0x788 <watchdogTaak>
     7a0:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <watchdogServo>
     7a4:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <watchdogServo+0x1>
     7a8:	89 2b       	or	r24, r25
     7aa:	71 f3       	breq	.-36     	; 0x788 <watchdogTaak>
     7ac:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <watchdogGyro>
     7b0:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <watchdogGyro+0x1>
     7b4:	89 2b       	or	r24, r25
     7b6:	41 f3       	breq	.-48     	; 0x788 <watchdogTaak>
     7b8:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <watchdogMotor>
     7bc:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <watchdogMotor+0x1>
     7c0:	89 2b       	or	r24, r25
     7c2:	11 f3       	breq	.-60     	; 0x788 <watchdogTaak>
     7c4:	a8 95       	wdr
     7c6:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <watchdogSonar+0x1>
     7ca:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <watchdogSonar>
     7ce:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <watchdogServo+0x1>
     7d2:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <watchdogServo>
     7d6:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <watchdogGyro+0x1>
     7da:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <watchdogGyro>
     7de:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <watchdogMotor+0x1>
     7e2:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <watchdogMotor>
     7e6:	d0 cf       	rjmp	.-96     	; 0x788 <watchdogTaak>

000007e8 <UART_Init>:
     7e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     7ec:	87 e6       	ldi	r24, 0x67	; 103
     7ee:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     7f2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     7f6:	86 e0       	ldi	r24, 0x06	; 6
     7f8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     7fc:	88 eb       	ldi	r24, 0xB8	; 184
     7fe:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     802:	08 95       	ret

00000804 <UART_Transmit>:
     804:	e8 ec       	ldi	r30, 0xC8	; 200
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	90 81       	ld	r25, Z
     80a:	95 ff       	sbrs	r25, 5
     80c:	fd cf       	rjmp	.-6      	; 0x808 <UART_Transmit+0x4>
     80e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     812:	08 95       	ret

00000814 <__vector_36>:
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	0b b6       	in	r0, 0x3b	; 59
     820:	0f 92       	push	r0
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	4f 93       	push	r20
     828:	5f 93       	push	r21
     82a:	6f 93       	push	r22
     82c:	7f 93       	push	r23
     82e:	8f 93       	push	r24
     830:	9f 93       	push	r25
     832:	af 93       	push	r26
     834:	bf 93       	push	r27
     836:	ef 93       	push	r30
     838:	ff 93       	push	r31
     83a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     83e:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <ontvang>
     842:	e0 df       	rcall	.-64     	; 0x804 <UART_Transmit>
     844:	ff 91       	pop	r31
     846:	ef 91       	pop	r30
     848:	bf 91       	pop	r27
     84a:	af 91       	pop	r26
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	7f 91       	pop	r23
     852:	6f 91       	pop	r22
     854:	5f 91       	pop	r21
     856:	4f 91       	pop	r20
     858:	3f 91       	pop	r19
     85a:	2f 91       	pop	r18
     85c:	0f 90       	pop	r0
     85e:	0b be       	out	0x3b, r0	; 59
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti

0000086a <UART_Transmit_String>:
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
     870:	88 81       	ld	r24, Y
     872:	88 23       	and	r24, r24
     874:	29 f0       	breq	.+10     	; 0x880 <UART_Transmit_String+0x16>
     876:	21 96       	adiw	r28, 0x01	; 1
     878:	c5 df       	rcall	.-118    	; 0x804 <UART_Transmit>
     87a:	89 91       	ld	r24, Y+
     87c:	81 11       	cpse	r24, r1
     87e:	fc cf       	rjmp	.-8      	; 0x878 <UART_Transmit_String+0xe>
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <UART_Transmit_Integer>:
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	61 97       	sbiw	r28, 0x11	; 17
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	4a e0       	ldi	r20, 0x0A	; 10
     8a0:	be 01       	movw	r22, r28
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__itoa_ncheck>
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	dd df       	rcall	.-70     	; 0x86a <UART_Transmit_String>
     8b0:	61 96       	adiw	r28, 0x11	; 17
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <servoTaak>:
     8c2:	0a e8       	ldi	r16, 0x8A	; 138
     8c4:	10 e0       	ldi	r17, 0x00	; 0
     8c6:	c1 e0       	ldi	r28, 0x01	; 1
     8c8:	d0 e0       	ldi	r29, 0x00	; 0
     8ca:	e1 2c       	mov	r14, r1
     8cc:	f1 2c       	mov	r15, r1
     8ce:	f0 92 57 04 	sts	0x0457, r15	; 0x800457 <hoek+0x1>
     8d2:	e0 92 56 04 	sts	0x0456, r14	; 0x800456 <hoek>
     8d6:	c7 01       	movw	r24, r14
     8d8:	99 27       	eor	r25, r25
     8da:	9c 01       	movw	r18, r24
     8dc:	22 0f       	add	r18, r18
     8de:	33 1f       	adc	r19, r19
     8e0:	22 0f       	add	r18, r18
     8e2:	33 1f       	adc	r19, r19
     8e4:	22 0f       	add	r18, r18
     8e6:	33 1f       	adc	r19, r19
     8e8:	82 1b       	sub	r24, r18
     8ea:	93 0b       	sbc	r25, r19
     8ec:	95 5b       	subi	r25, 0xB5	; 181
     8ee:	f8 01       	movw	r30, r16
     8f0:	91 83       	std	Z+1, r25	; 0x01
     8f2:	80 83       	st	Z, r24
     8f4:	ff ef       	ldi	r31, 0xFF	; 255
     8f6:	24 e3       	ldi	r18, 0x34	; 52
     8f8:	8c e0       	ldi	r24, 0x0C	; 12
     8fa:	f1 50       	subi	r31, 0x01	; 1
     8fc:	20 40       	sbci	r18, 0x00	; 0
     8fe:	80 40       	sbci	r24, 0x00	; 0
     900:	e1 f7       	brne	.-8      	; 0x8fa <servoTaak+0x38>
     902:	00 c0       	rjmp	.+0      	; 0x904 <servoTaak+0x42>
     904:	00 00       	nop
     906:	87 e0       	ldi	r24, 0x07	; 7
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	af df       	rcall	.-162    	; 0x86a <UART_Transmit_String>
     90c:	60 91 56 04 	lds	r22, 0x0456	; 0x800456 <hoek>
     910:	70 91 57 04 	lds	r23, 0x0457	; 0x800457 <hoek+0x1>
     914:	07 2e       	mov	r0, r23
     916:	00 0c       	add	r0, r0
     918:	88 0b       	sbc	r24, r24
     91a:	99 0b       	sbc	r25, r25
     91c:	b4 df       	rcall	.-152    	; 0x886 <UART_Transmit_Integer>
     91e:	80 e1       	ldi	r24, 0x10	; 16
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	a3 df       	rcall	.-186    	; 0x86a <UART_Transmit_String>
     924:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <afstand>
     928:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <afstand+0x1>
     92c:	07 2e       	mov	r0, r23
     92e:	00 0c       	add	r0, r0
     930:	88 0b       	sbc	r24, r24
     932:	99 0b       	sbc	r25, r25
     934:	a8 df       	rcall	.-176    	; 0x886 <UART_Transmit_Integer>
     936:	8b e1       	ldi	r24, 0x1B	; 27
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	97 df       	rcall	.-210    	; 0x86a <UART_Transmit_String>
     93c:	60 91 32 03 	lds	r22, 0x0332	; 0x800332 <gyroX>
     940:	70 91 33 03 	lds	r23, 0x0333	; 0x800333 <gyroX+0x1>
     944:	07 2e       	mov	r0, r23
     946:	00 0c       	add	r0, r0
     948:	88 0b       	sbc	r24, r24
     94a:	99 0b       	sbc	r25, r25
     94c:	9c df       	rcall	.-200    	; 0x886 <UART_Transmit_Integer>
     94e:	85 e2       	ldi	r24, 0x25	; 37
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	8b df       	rcall	.-234    	; 0x86a <UART_Transmit_String>
     954:	60 91 67 04 	lds	r22, 0x0467	; 0x800467 <gyroY>
     958:	70 91 68 04 	lds	r23, 0x0468	; 0x800468 <gyroY+0x1>
     95c:	07 2e       	mov	r0, r23
     95e:	00 0c       	add	r0, r0
     960:	88 0b       	sbc	r24, r24
     962:	99 0b       	sbc	r25, r25
     964:	90 df       	rcall	.-224    	; 0x886 <UART_Transmit_Integer>
     966:	8a e2       	ldi	r24, 0x2A	; 42
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	7f df       	rcall	.-258    	; 0x86a <UART_Transmit_String>
     96c:	60 91 4e 04 	lds	r22, 0x044E	; 0x80044e <gyroZ>
     970:	70 91 4f 04 	lds	r23, 0x044F	; 0x80044f <gyroZ+0x1>
     974:	07 2e       	mov	r0, r23
     976:	00 0c       	add	r0, r0
     978:	88 0b       	sbc	r24, r24
     97a:	99 0b       	sbc	r25, r25
     97c:	84 df       	rcall	.-248    	; 0x886 <UART_Transmit_Integer>
     97e:	8f e2       	ldi	r24, 0x2F	; 47
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	73 df       	rcall	.-282    	; 0x86a <UART_Transmit_String>
     984:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <accelX>
     988:	70 91 2d 03 	lds	r23, 0x032D	; 0x80032d <accelX+0x1>
     98c:	07 2e       	mov	r0, r23
     98e:	00 0c       	add	r0, r0
     990:	88 0b       	sbc	r24, r24
     992:	99 0b       	sbc	r25, r25
     994:	78 df       	rcall	.-272    	; 0x886 <UART_Transmit_Integer>
     996:	85 e2       	ldi	r24, 0x25	; 37
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	67 df       	rcall	.-306    	; 0x86a <UART_Transmit_String>
     99c:	60 91 28 03 	lds	r22, 0x0328	; 0x800328 <accelY>
     9a0:	70 91 29 03 	lds	r23, 0x0329	; 0x800329 <accelY+0x1>
     9a4:	07 2e       	mov	r0, r23
     9a6:	00 0c       	add	r0, r0
     9a8:	88 0b       	sbc	r24, r24
     9aa:	99 0b       	sbc	r25, r25
     9ac:	6c df       	rcall	.-296    	; 0x886 <UART_Transmit_Integer>
     9ae:	8a e2       	ldi	r24, 0x2A	; 42
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	5b df       	rcall	.-330    	; 0x86a <UART_Transmit_String>
     9b4:	60 91 5f 04 	lds	r22, 0x045F	; 0x80045f <accelZ>
     9b8:	70 91 60 04 	lds	r23, 0x0460	; 0x800460 <accelZ+0x1>
     9bc:	07 2e       	mov	r0, r23
     9be:	00 0c       	add	r0, r0
     9c0:	88 0b       	sbc	r24, r24
     9c2:	99 0b       	sbc	r25, r25
     9c4:	60 df       	rcall	.-320    	; 0x886 <UART_Transmit_Integer>
     9c6:	d0 93 5d 04 	sts	0x045D, r29	; 0x80045d <watchdogServo+0x1>
     9ca:	c0 93 5c 04 	sts	0x045C, r28	; 0x80045c <watchdogServo>
     9ce:	9b e1       	ldi	r25, 0x1B	; 27
     9d0:	e9 0e       	add	r14, r25
     9d2:	f1 1c       	adc	r15, r1
     9d4:	e8 ed       	ldi	r30, 0xD8	; 216
     9d6:	ee 16       	cp	r14, r30
     9d8:	f1 04       	cpc	r15, r1
     9da:	09 f0       	breq	.+2      	; 0x9de <servoTaak+0x11c>
     9dc:	78 cf       	rjmp	.-272    	; 0x8ce <servoTaak+0xc>
     9de:	75 cf       	rjmp	.-278    	; 0x8ca <servoTaak+0x8>

000009e0 <INT1_init>:
     9e0:	e8 e6       	ldi	r30, 0x68	; 104
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	81 60       	ori	r24, 0x01	; 1
     9e8:	80 83       	st	Z, r24
     9ea:	eb e6       	ldi	r30, 0x6B	; 107
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	82 60       	ori	r24, 0x02	; 2
     9f2:	80 83       	st	Z, r24
     9f4:	08 95       	ret

000009f6 <__vector_9>:
     9f6:	1f 92       	push	r1
     9f8:	0f 92       	push	r0
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	0f 92       	push	r0
     9fe:	11 24       	eor	r1, r1
     a00:	0b b6       	in	r0, 0x3b	; 59
     a02:	0f 92       	push	r0
     a04:	2f 93       	push	r18
     a06:	3f 93       	push	r19
     a08:	4f 93       	push	r20
     a0a:	5f 93       	push	r21
     a0c:	6f 93       	push	r22
     a0e:	7f 93       	push	r23
     a10:	8f 93       	push	r24
     a12:	9f 93       	push	r25
     a14:	af 93       	push	r26
     a16:	bf 93       	push	r27
     a18:	ef 93       	push	r30
     a1a:	ff 93       	push	r31
     a1c:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <running>
     a20:	88 23       	and	r24, r24
     a22:	d1 f1       	breq	.+116    	; 0xa98 <__vector_9+0xa2>
     a24:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <up>
     a28:	81 11       	cpse	r24, r1
     a2a:	10 c0       	rjmp	.+32     	; 0xa4c <__vector_9+0x56>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <up>
     a32:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <timerCounter>
     a36:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <timerCounter+0x1>
     a3a:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <timerCounter+0x2>
     a3e:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <timerCounter+0x3>
     a42:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a46:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a4a:	26 c0       	rjmp	.+76     	; 0xa98 <__vector_9+0xa2>
     a4c:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <up>
     a50:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <timerCounter>
     a54:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <timerCounter+0x1>
     a58:	40 91 be 02 	lds	r20, 0x02BE	; 0x8002be <timerCounter+0x2>
     a5c:	50 91 bf 02 	lds	r21, 0x02BF	; 0x8002bf <timerCounter+0x3>
     a60:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a64:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a68:	af ef       	ldi	r26, 0xFF	; 255
     a6a:	bf ef       	ldi	r27, 0xFF	; 255
     a6c:	0e 94 c6 14 	call	0x298c	; 0x298c <__muluhisi3>
     a70:	6e 0f       	add	r22, r30
     a72:	7f 1f       	adc	r23, r31
     a74:	81 1d       	adc	r24, r1
     a76:	91 1d       	adc	r25, r1
     a78:	24 e7       	ldi	r18, 0x74	; 116
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	0e 94 8d 14 	call	0x291a	; 0x291a <__udivmodsi4>
     a84:	20 93 b8 02 	sts	0x02B8, r18	; 0x8002b8 <result>
     a88:	30 93 b9 02 	sts	0x02B9, r19	; 0x8002b9 <result+0x1>
     a8c:	40 93 ba 02 	sts	0x02BA, r20	; 0x8002ba <result+0x2>
     a90:	50 93 bb 02 	sts	0x02BB, r21	; 0x8002bb <result+0x3>
     a94:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <running>
     a98:	ff 91       	pop	r31
     a9a:	ef 91       	pop	r30
     a9c:	bf 91       	pop	r27
     a9e:	af 91       	pop	r26
     aa0:	9f 91       	pop	r25
     aa2:	8f 91       	pop	r24
     aa4:	7f 91       	pop	r23
     aa6:	6f 91       	pop	r22
     aa8:	5f 91       	pop	r21
     aaa:	4f 91       	pop	r20
     aac:	3f 91       	pop	r19
     aae:	2f 91       	pop	r18
     ab0:	0f 90       	pop	r0
     ab2:	0b be       	out	0x3b, r0	; 59
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <pulse>:
     abe:	28 98       	cbi	0x05, 0	; 5
     ac0:	85 e0       	ldi	r24, 0x05	; 5
     ac2:	8a 95       	dec	r24
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <pulse+0x4>
     ac6:	00 00       	nop
     ac8:	28 9a       	sbi	0x05, 0	; 5
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <running>
     ad0:	85 e3       	ldi	r24, 0x35	; 53
     ad2:	8a 95       	dec	r24
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <pulse+0x14>
     ad6:	00 00       	nop
     ad8:	28 98       	cbi	0x05, 0	; 5
     ada:	08 95       	ret

00000adc <sonarTaak>:
     adc:	c1 e0       	ldi	r28, 0x01	; 1
     ade:	d0 e0       	ldi	r29, 0x00	; 0
     ae0:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <running>
     ae4:	81 11       	cpse	r24, r1
     ae6:	16 c0       	rjmp	.+44     	; 0xb14 <sonarTaak+0x38>
     ae8:	2f ef       	ldi	r18, 0xFF	; 255
     aea:	80 e7       	ldi	r24, 0x70	; 112
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	21 50       	subi	r18, 0x01	; 1
     af0:	80 40       	sbci	r24, 0x00	; 0
     af2:	90 40       	sbci	r25, 0x00	; 0
     af4:	e1 f7       	brne	.-8      	; 0xaee <sonarTaak+0x12>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <sonarTaak+0x1c>
     af8:	00 00       	nop
     afa:	e1 df       	rcall	.-62     	; 0xabe <pulse>
     afc:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <result>
     b00:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <result+0x1>
     b04:	a0 91 ba 02 	lds	r26, 0x02BA	; 0x8002ba <result+0x2>
     b08:	b0 91 bb 02 	lds	r27, 0x02BB	; 0x8002bb <result+0x3>
     b0c:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <afstand+0x1>
     b10:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <afstand>
     b14:	d0 93 31 03 	sts	0x0331, r29	; 0x800331 <watchdogSonar+0x1>
     b18:	c0 93 30 03 	sts	0x0330, r28	; 0x800330 <watchdogSonar>
     b1c:	e1 cf       	rjmp	.-62     	; 0xae0 <sonarTaak+0x4>

00000b1e <timer3_init>:
     b1e:	e1 e9       	ldi	r30, 0x91	; 145
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	82 60       	ori	r24, 0x02	; 2
     b26:	80 83       	st	Z, r24
     b28:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     b2c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     b30:	e1 e7       	ldi	r30, 0x71	; 113
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	80 83       	st	Z, r24
     b3a:	08 95       	ret

00000b3c <__vector_35>:
     b3c:	1f 92       	push	r1
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	0f 92       	push	r0
     b44:	11 24       	eor	r1, r1
     b46:	0b b6       	in	r0, 0x3b	; 59
     b48:	0f 92       	push	r0
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
     b62:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <up>
     b66:	88 23       	and	r24, r24
     b68:	e9 f1       	breq	.+122    	; 0xbe4 <__vector_35+0xa8>
     b6a:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <timerCounter>
     b6e:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <timerCounter+0x1>
     b72:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <timerCounter+0x2>
     b76:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <timerCounter+0x3>
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	a1 1d       	adc	r26, r1
     b7e:	b1 1d       	adc	r27, r1
     b80:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <timerCounter>
     b84:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <timerCounter+0x1>
     b88:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <timerCounter+0x2>
     b8c:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <timerCounter+0x3>
     b90:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <timerCounter>
     b94:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <timerCounter+0x1>
     b98:	40 91 be 02 	lds	r20, 0x02BE	; 0x8002be <timerCounter+0x2>
     b9c:	50 91 bf 02 	lds	r21, 0x02BF	; 0x8002bf <timerCounter+0x3>
     ba0:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     ba4:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     ba8:	af ef       	ldi	r26, 0xFF	; 255
     baa:	bf ef       	ldi	r27, 0xFF	; 255
     bac:	0e 94 c6 14 	call	0x298c	; 0x298c <__muluhisi3>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	8e 0f       	add	r24, r30
     bb6:	9f 1f       	adc	r25, r31
     bb8:	a1 1d       	adc	r26, r1
     bba:	b1 1d       	adc	r27, r1
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	94 4d       	sbci	r25, 0xD4	; 212
     bc0:	a0 43       	sbci	r26, 0x30	; 48
     bc2:	b1 05       	cpc	r27, r1
     bc4:	78 f0       	brcs	.+30     	; 0xbe4 <__vector_35+0xa8>
     bc6:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <up>
     bca:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <running>
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	9f ef       	ldi	r25, 0xFF	; 255
     bd2:	dc 01       	movw	r26, r24
     bd4:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <result>
     bd8:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <result+0x1>
     bdc:	a0 93 ba 02 	sts	0x02BA, r26	; 0x8002ba <result+0x2>
     be0:	b0 93 bb 02 	sts	0x02BB, r27	; 0x8002bb <result+0x3>
     be4:	ff 91       	pop	r31
     be6:	ef 91       	pop	r30
     be8:	bf 91       	pop	r27
     bea:	af 91       	pop	r26
     bec:	9f 91       	pop	r25
     bee:	8f 91       	pop	r24
     bf0:	7f 91       	pop	r23
     bf2:	6f 91       	pop	r22
     bf4:	5f 91       	pop	r21
     bf6:	4f 91       	pop	r20
     bf8:	3f 91       	pop	r19
     bfa:	2f 91       	pop	r18
     bfc:	0f 90       	pop	r0
     bfe:	0b be       	out	0x3b, r0	; 59
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	0f 90       	pop	r0
     c06:	1f 90       	pop	r1
     c08:	18 95       	reti

00000c0a <initServo>:
     c0a:	26 9a       	sbi	0x04, 6	; 4
     c0c:	82 e3       	ldi	r24, 0x32	; 50
     c0e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     c12:	82 e1       	ldi	r24, 0x12	; 18
     c14:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     c18:	80 e2       	ldi	r24, 0x20	; 32
     c1a:	9e e4       	ldi	r25, 0x4E	; 78
     c1c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     c20:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     c24:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     c28:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	9b e4       	ldi	r25, 0x4B	; 75
     c30:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     c34:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     c38:	ef e6       	ldi	r30, 0x6F	; 111
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	80 83       	st	Z, r24
     c42:	08 95       	ret

00000c44 <init_master>:
     c44:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     c48:	88 e4       	ldi	r24, 0x48	; 72
     c4a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     c4e:	84 e0       	ldi	r24, 0x04	; 4
     c50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c54:	08 95       	ret

00000c56 <ontvangen>:
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	ec eb       	ldi	r30, 0xBC	; 188
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	90 81       	ld	r25, Z
     c68:	90 62       	ori	r25, 0x20	; 32
     c6a:	90 83       	st	Z, r25
     c6c:	90 81       	ld	r25, Z
     c6e:	99 23       	and	r25, r25
     c70:	ec f7       	brge	.-6      	; 0xc6c <ontvangen+0x16>
     c72:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     c76:	88 0f       	add	r24, r24
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c7e:	84 e8       	ldi	r24, 0x84	; 132
     c80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c84:	ec eb       	ldi	r30, 0xBC	; 188
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	88 23       	and	r24, r24
     c8c:	ec f7       	brge	.-6      	; 0xc88 <ontvangen+0x32>
     c8e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     c92:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c96:	db 01       	movw	r26, r22
     c98:	8c 93       	st	X, r24
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	41 50       	subi	r20, 0x01	; 1
     ca0:	51 09       	sbc	r21, r1
     ca2:	ec eb       	ldi	r30, 0xBC	; 188
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	0f 2e       	mov	r0, r31
     ca8:	f4 ec       	ldi	r31, 0xC4	; 196
     caa:	ff 2e       	mov	r15, r31
     cac:	f0 2d       	mov	r31, r0
     cae:	0f 2e       	mov	r0, r31
     cb0:	f4 e8       	ldi	r31, 0x84	; 132
     cb2:	ef 2e       	mov	r14, r31
     cb4:	f0 2d       	mov	r31, r0
     cb6:	09 eb       	ldi	r16, 0xB9	; 185
     cb8:	10 e0       	ldi	r17, 0x00	; 0
     cba:	cb eb       	ldi	r28, 0xBB	; 187
     cbc:	d0 e0       	ldi	r29, 0x00	; 0
     cbe:	29 2f       	mov	r18, r25
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	24 17       	cp	r18, r20
     cc4:	35 07       	cpc	r19, r21
     cc6:	11 f4       	brne	.+4      	; 0xccc <ontvangen+0x76>
     cc8:	e0 82       	st	Z, r14
     cca:	01 c0       	rjmp	.+2      	; 0xcce <ontvangen+0x78>
     ccc:	f0 82       	st	Z, r15
     cce:	80 81       	ld	r24, Z
     cd0:	88 23       	and	r24, r24
     cd2:	ec f7       	brge	.-6      	; 0xcce <ontvangen+0x78>
     cd4:	d8 01       	movw	r26, r16
     cd6:	8c 91       	ld	r24, X
     cd8:	28 81       	ld	r18, Y
     cda:	db 01       	movw	r26, r22
     cdc:	a9 0f       	add	r26, r25
     cde:	b1 1d       	adc	r27, r1
     ce0:	2c 93       	st	X, r18
     ce2:	9f 5f       	subi	r25, 0xFF	; 255
     ce4:	80 35       	cpi	r24, 0x50	; 80
     ce6:	59 f3       	breq	.-42     	; 0xcbe <ontvangen+0x68>
     ce8:	84 e9       	ldi	r24, 0x94	; 148
     cea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	08 95       	ret

00000cfc <verzenden>:
     cfc:	ec eb       	ldi	r30, 0xBC	; 188
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	90 81       	ld	r25, Z
     d02:	90 62       	ori	r25, 0x20	; 32
     d04:	90 83       	st	Z, r25
     d06:	90 81       	ld	r25, Z
     d08:	99 23       	and	r25, r25
     d0a:	ec f7       	brge	.-6      	; 0xd06 <verzenden+0xa>
     d0c:	88 0f       	add	r24, r24
     d0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     d12:	84 e8       	ldi	r24, 0x84	; 132
     d14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d18:	ec eb       	ldi	r30, 0xBC	; 188
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	88 23       	and	r24, r24
     d20:	ec f7       	brge	.-6      	; 0xd1c <verzenden+0x20>
     d22:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     d26:	84 e8       	ldi	r24, 0x84	; 132
     d28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d2c:	ec eb       	ldi	r30, 0xBC	; 188
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	ec f7       	brge	.-6      	; 0xd30 <verzenden+0x34>
     d36:	84 e9       	ldi	r24, 0x94	; 148
     d38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d3c:	08 95       	ret

00000d3e <gyroTaak>:
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	1f 92       	push	r1
     d44:	1f 92       	push	r1
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	01 e0       	ldi	r16, 0x01	; 1
     d4c:	10 e0       	ldi	r17, 0x00	; 0
     d4e:	6b e3       	ldi	r22, 0x3B	; 59
     d50:	88 e6       	ldi	r24, 0x68	; 104
     d52:	d4 df       	rcall	.-88     	; 0xcfc <verzenden>
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	be 01       	movw	r22, r28
     d58:	6f 5f       	subi	r22, 0xFF	; 255
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	88 e6       	ldi	r24, 0x68	; 104
     d5e:	7b df       	rcall	.-266    	; 0xc56 <ontvangen>
     d60:	f9 80       	ldd	r15, Y+1	; 0x01
     d62:	6c e3       	ldi	r22, 0x3C	; 60
     d64:	88 e6       	ldi	r24, 0x68	; 104
     d66:	ca df       	rcall	.-108    	; 0xcfc <verzenden>
     d68:	41 e0       	ldi	r20, 0x01	; 1
     d6a:	be 01       	movw	r22, r28
     d6c:	6f 5f       	subi	r22, 0xFF	; 255
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	88 e6       	ldi	r24, 0x68	; 104
     d72:	71 df       	rcall	.-286    	; 0xc56 <ontvangen>
     d74:	6f 2d       	mov	r22, r15
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	76 2f       	mov	r23, r22
     d7a:	66 27       	eor	r22, r22
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	68 2b       	or	r22, r24
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatunsisf>
     d88:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <_gyroScale>
     d8c:	30 91 6a 04 	lds	r19, 0x046A	; 0x80046a <_gyroScale+0x1>
     d90:	40 91 6b 04 	lds	r20, 0x046B	; 0x80046b <_gyroScale+0x2>
     d94:	50 91 6c 04 	lds	r21, 0x046C	; 0x80046c <_gyroScale+0x3>
     d98:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	4a e8       	ldi	r20, 0x8A	; 138
     da2:	52 e4       	ldi	r21, 0x42	; 66
     da4:	0e 94 06 13 	call	0x260c	; 0x260c <__subsf3>
     da8:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fixsfsi>
     dac:	70 93 33 03 	sts	0x0333, r23	; 0x800333 <gyroX+0x1>
     db0:	60 93 32 03 	sts	0x0332, r22	; 0x800332 <gyroX>
     db4:	6d e3       	ldi	r22, 0x3D	; 61
     db6:	88 e6       	ldi	r24, 0x68	; 104
     db8:	a1 df       	rcall	.-190    	; 0xcfc <verzenden>
     dba:	41 e0       	ldi	r20, 0x01	; 1
     dbc:	be 01       	movw	r22, r28
     dbe:	6f 5f       	subi	r22, 0xFF	; 255
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	88 e6       	ldi	r24, 0x68	; 104
     dc4:	48 df       	rcall	.-368    	; 0xc56 <ontvangen>
     dc6:	f9 80       	ldd	r15, Y+1	; 0x01
     dc8:	6e e3       	ldi	r22, 0x3E	; 62
     dca:	88 e6       	ldi	r24, 0x68	; 104
     dcc:	97 df       	rcall	.-210    	; 0xcfc <verzenden>
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	be 01       	movw	r22, r28
     dd2:	6f 5f       	subi	r22, 0xFF	; 255
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	88 e6       	ldi	r24, 0x68	; 104
     dd8:	3e df       	rcall	.-388    	; 0xc56 <ontvangen>
     dda:	6f 2d       	mov	r22, r15
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	76 2f       	mov	r23, r22
     de0:	66 27       	eor	r22, r22
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	68 2b       	or	r22, r24
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatunsisf>
     dee:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <_gyroScale>
     df2:	30 91 6a 04 	lds	r19, 0x046A	; 0x80046a <_gyroScale+0x1>
     df6:	40 91 6b 04 	lds	r20, 0x046B	; 0x80046b <_gyroScale+0x2>
     dfa:	50 91 6c 04 	lds	r21, 0x046C	; 0x80046c <_gyroScale+0x3>
     dfe:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     e02:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fixsfsi>
     e06:	70 93 68 04 	sts	0x0468, r23	; 0x800468 <gyroY+0x1>
     e0a:	60 93 67 04 	sts	0x0467, r22	; 0x800467 <gyroY>
     e0e:	6f e3       	ldi	r22, 0x3F	; 63
     e10:	88 e6       	ldi	r24, 0x68	; 104
     e12:	74 df       	rcall	.-280    	; 0xcfc <verzenden>
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	be 01       	movw	r22, r28
     e18:	6f 5f       	subi	r22, 0xFF	; 255
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	88 e6       	ldi	r24, 0x68	; 104
     e1e:	1b df       	rcall	.-458    	; 0xc56 <ontvangen>
     e20:	f9 80       	ldd	r15, Y+1	; 0x01
     e22:	60 e4       	ldi	r22, 0x40	; 64
     e24:	88 e6       	ldi	r24, 0x68	; 104
     e26:	6a df       	rcall	.-300    	; 0xcfc <verzenden>
     e28:	41 e0       	ldi	r20, 0x01	; 1
     e2a:	be 01       	movw	r22, r28
     e2c:	6f 5f       	subi	r22, 0xFF	; 255
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	88 e6       	ldi	r24, 0x68	; 104
     e32:	11 df       	rcall	.-478    	; 0xc56 <ontvangen>
     e34:	6f 2d       	mov	r22, r15
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	76 2f       	mov	r23, r22
     e3a:	66 27       	eor	r22, r22
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	68 2b       	or	r22, r24
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatunsisf>
     e48:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <_gyroScale>
     e4c:	30 91 6a 04 	lds	r19, 0x046A	; 0x80046a <_gyroScale+0x1>
     e50:	40 91 6b 04 	lds	r20, 0x046B	; 0x80046b <_gyroScale+0x2>
     e54:	50 91 6c 04 	lds	r21, 0x046C	; 0x80046c <_gyroScale+0x3>
     e58:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e8       	ldi	r20, 0x80	; 128
     e62:	51 e4       	ldi	r21, 0x41	; 65
     e64:	0e 94 06 13 	call	0x260c	; 0x260c <__subsf3>
     e68:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fixsfsi>
     e6c:	70 93 4f 04 	sts	0x044F, r23	; 0x80044f <gyroZ+0x1>
     e70:	60 93 4e 04 	sts	0x044E, r22	; 0x80044e <gyroZ>
     e74:	63 e4       	ldi	r22, 0x43	; 67
     e76:	88 e6       	ldi	r24, 0x68	; 104
     e78:	41 df       	rcall	.-382    	; 0xcfc <verzenden>
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	be 01       	movw	r22, r28
     e7e:	6f 5f       	subi	r22, 0xFF	; 255
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	88 e6       	ldi	r24, 0x68	; 104
     e84:	e8 de       	rcall	.-560    	; 0xc56 <ontvangen>
     e86:	f9 80       	ldd	r15, Y+1	; 0x01
     e88:	64 e4       	ldi	r22, 0x44	; 68
     e8a:	88 e6       	ldi	r24, 0x68	; 104
     e8c:	37 df       	rcall	.-402    	; 0xcfc <verzenden>
     e8e:	41 e0       	ldi	r20, 0x01	; 1
     e90:	be 01       	movw	r22, r28
     e92:	6f 5f       	subi	r22, 0xFF	; 255
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	88 e6       	ldi	r24, 0x68	; 104
     e98:	de de       	rcall	.-580    	; 0xc56 <ontvangen>
     e9a:	6f 2d       	mov	r22, r15
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	76 2f       	mov	r23, r22
     ea0:	66 27       	eor	r22, r22
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	68 2b       	or	r22, r24
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatunsisf>
     eae:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <_accelScale>
     eb2:	30 91 64 04 	lds	r19, 0x0464	; 0x800464 <_accelScale+0x1>
     eb6:	40 91 65 04 	lds	r20, 0x0465	; 0x800465 <_accelScale+0x2>
     eba:	50 91 66 04 	lds	r21, 0x0466	; 0x800466 <_accelScale+0x3>
     ebe:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     ec2:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fixsfsi>
     ec6:	70 93 2d 03 	sts	0x032D, r23	; 0x80032d <accelX+0x1>
     eca:	60 93 2c 03 	sts	0x032C, r22	; 0x80032c <accelX>
     ece:	65 e4       	ldi	r22, 0x45	; 69
     ed0:	88 e6       	ldi	r24, 0x68	; 104
     ed2:	14 df       	rcall	.-472    	; 0xcfc <verzenden>
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	be 01       	movw	r22, r28
     ed8:	6f 5f       	subi	r22, 0xFF	; 255
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	88 e6       	ldi	r24, 0x68	; 104
     ede:	bb de       	rcall	.-650    	; 0xc56 <ontvangen>
     ee0:	f9 80       	ldd	r15, Y+1	; 0x01
     ee2:	66 e4       	ldi	r22, 0x46	; 70
     ee4:	88 e6       	ldi	r24, 0x68	; 104
     ee6:	0a df       	rcall	.-492    	; 0xcfc <verzenden>
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	be 01       	movw	r22, r28
     eec:	6f 5f       	subi	r22, 0xFF	; 255
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	88 e6       	ldi	r24, 0x68	; 104
     ef2:	b1 de       	rcall	.-670    	; 0xc56 <ontvangen>
     ef4:	6f 2d       	mov	r22, r15
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	76 2f       	mov	r23, r22
     efa:	66 27       	eor	r22, r22
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	68 2b       	or	r22, r24
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatunsisf>
     f08:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <_accelScale>
     f0c:	30 91 64 04 	lds	r19, 0x0464	; 0x800464 <_accelScale+0x1>
     f10:	40 91 65 04 	lds	r20, 0x0465	; 0x800465 <_accelScale+0x2>
     f14:	50 91 66 04 	lds	r21, 0x0466	; 0x800466 <_accelScale+0x3>
     f18:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     f1c:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fixsfsi>
     f20:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <accelY+0x1>
     f24:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <accelY>
     f28:	67 e4       	ldi	r22, 0x47	; 71
     f2a:	88 e6       	ldi	r24, 0x68	; 104
     f2c:	e7 de       	rcall	.-562    	; 0xcfc <verzenden>
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	be 01       	movw	r22, r28
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	88 e6       	ldi	r24, 0x68	; 104
     f38:	8e de       	rcall	.-740    	; 0xc56 <ontvangen>
     f3a:	f9 80       	ldd	r15, Y+1	; 0x01
     f3c:	68 e4       	ldi	r22, 0x48	; 72
     f3e:	88 e6       	ldi	r24, 0x68	; 104
     f40:	dd de       	rcall	.-582    	; 0xcfc <verzenden>
     f42:	41 e0       	ldi	r20, 0x01	; 1
     f44:	be 01       	movw	r22, r28
     f46:	6f 5f       	subi	r22, 0xFF	; 255
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	88 e6       	ldi	r24, 0x68	; 104
     f4c:	84 de       	rcall	.-760    	; 0xc56 <ontvangen>
     f4e:	6f 2d       	mov	r22, r15
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	76 2f       	mov	r23, r22
     f54:	66 27       	eor	r22, r22
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	68 2b       	or	r22, r24
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 9c 13 	call	0x2738	; 0x2738 <__floatunsisf>
     f62:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <_accelScale>
     f66:	30 91 64 04 	lds	r19, 0x0464	; 0x800464 <_accelScale+0x1>
     f6a:	40 91 65 04 	lds	r20, 0x0465	; 0x800465 <_accelScale+0x2>
     f6e:	50 91 66 04 	lds	r21, 0x0466	; 0x800466 <_accelScale+0x3>
     f72:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e8       	ldi	r19, 0x80	; 128
     f7a:	4c e9       	ldi	r20, 0x9C	; 156
     f7c:	53 e4       	ldi	r21, 0x43	; 67
     f7e:	0e 94 06 13 	call	0x260c	; 0x260c <__subsf3>
     f82:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fixsfsi>
     f86:	70 93 60 04 	sts	0x0460, r23	; 0x800460 <accelZ+0x1>
     f8a:	60 93 5f 04 	sts	0x045F, r22	; 0x80045f <accelZ>
     f8e:	10 93 2f 03 	sts	0x032F, r17	; 0x80032f <watchdogGyro+0x1>
     f92:	00 93 2e 03 	sts	0x032E, r16	; 0x80032e <watchdogGyro>
     f96:	db ce       	rjmp	.-586    	; 0xd4e <gyroTaak+0x10>

00000f98 <__vector_17>:
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	8f 93       	push	r24
     fa4:	9f 93       	push	r25
     fa6:	95 b1       	in	r25, 0x05	; 5
     fa8:	80 e4       	ldi	r24, 0x40	; 64
     faa:	89 27       	eor	r24, r25
     fac:	85 b9       	out	0x05, r24	; 5
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti

00000fbc <motorAchteruit>:
     fbc:	eb e0       	ldi	r30, 0x0B	; 11
     fbe:	f1 e0       	ldi	r31, 0x01	; 1
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 77       	andi	r24, 0x7F	; 127
     fc4:	80 83       	st	Z, r24
     fc6:	5f 98       	cbi	0x0b, 7	; 11
     fc8:	a1 9a       	sbi	0x14, 1	; 20
     fca:	41 9a       	sbi	0x08, 1	; 8
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <watchdogMotor+0x1>
     fd4:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <watchdogMotor>
     fd8:	08 95       	ret

00000fda <motorVooruit>:
     fda:	a1 98       	cbi	0x14, 1	; 20
     fdc:	41 98       	cbi	0x08, 1	; 8
     fde:	eb e0       	ldi	r30, 0x0B	; 11
     fe0:	f1 e0       	ldi	r31, 0x01	; 1
     fe2:	80 81       	ld	r24, Z
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	80 83       	st	Z, r24
     fe8:	5f 9a       	sbi	0x0b, 7	; 11
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <watchdogMotor+0x1>
     ff2:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <watchdogMotor>
     ff6:	08 95       	ret

00000ff8 <motorRechts>:
     ff8:	5f 98       	cbi	0x0b, 7	; 11
     ffa:	a1 98       	cbi	0x14, 1	; 20
     ffc:	eb e0       	ldi	r30, 0x0B	; 11
     ffe:	f1 e0       	ldi	r31, 0x01	; 1
    1000:	80 81       	ld	r24, Z
    1002:	80 68       	ori	r24, 0x80	; 128
    1004:	80 83       	st	Z, r24
    1006:	41 9a       	sbi	0x08, 1	; 8
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <watchdogMotor+0x1>
    1010:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <watchdogMotor>
    1014:	08 95       	ret

00001016 <motorLinks>:
    1016:	41 98       	cbi	0x08, 1	; 8
    1018:	eb e0       	ldi	r30, 0x0B	; 11
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	80 81       	ld	r24, Z
    101e:	8f 77       	andi	r24, 0x7F	; 127
    1020:	80 83       	st	Z, r24
    1022:	a1 9a       	sbi	0x14, 1	; 20
    1024:	5f 9a       	sbi	0x0b, 7	; 11
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <watchdogMotor+0x1>
    102e:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <watchdogMotor>
    1032:	08 95       	ret

00001034 <motorStop>:
    1034:	a1 98       	cbi	0x14, 1	; 20
    1036:	eb e0       	ldi	r30, 0x0B	; 11
    1038:	f1 e0       	ldi	r31, 0x01	; 1
    103a:	80 81       	ld	r24, Z
    103c:	8f 77       	andi	r24, 0x7F	; 127
    103e:	80 83       	st	Z, r24
    1040:	41 98       	cbi	0x08, 1	; 8
    1042:	5f 98       	cbi	0x0b, 7	; 11
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <watchdogMotor+0x1>
    104c:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <watchdogMotor>
    1050:	08 95       	ret

00001052 <motorEnable>:
    1052:	f0 df       	rcall	.-32     	; 0x1034 <motorStop>
    1054:	eb e0       	ldi	r30, 0x0B	; 11
    1056:	f1 e0       	ldi	r31, 0x01	; 1
    1058:	80 81       	ld	r24, Z
    105a:	88 60       	ori	r24, 0x08	; 8
    105c:	80 83       	st	Z, r24
    105e:	80 81       	ld	r24, Z
    1060:	80 62       	ori	r24, 0x20	; 32
    1062:	80 83       	st	Z, r24
    1064:	08 95       	ret

00001066 <initMotor>:
    1066:	39 9a       	sbi	0x07, 1	; 7
    1068:	57 9a       	sbi	0x0a, 7	; 10
    106a:	ea e0       	ldi	r30, 0x0A	; 10
    106c:	f1 e0       	ldi	r31, 0x01	; 1
    106e:	80 81       	ld	r24, Z
    1070:	88 6a       	ori	r24, 0xA8	; 168
    1072:	80 83       	st	Z, r24
    1074:	99 9a       	sbi	0x13, 1	; 19
    1076:	8e ec       	ldi	r24, 0xCE	; 206
    1078:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    107c:	82 e1       	ldi	r24, 0x12	; 18
    107e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	9e e4       	ldi	r25, 0x4E	; 78
    1086:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    108a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    108e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    1092:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    1096:	dd cf       	rjmp	.-70     	; 0x1052 <motorEnable>
    1098:	08 95       	ret

0000109a <main>:
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	43 e0       	ldi	r20, 0x03	; 3
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	b2 d3       	rcall	.+1892   	; 0x180c <xQueueGenericCreate>
    10a8:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <sem+0x1>
    10ac:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <sem>
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	d4 d3       	rcall	.+1960   	; 0x1864 <xQueueGenericSend>
    10bc:	8a b1       	in	r24, 0x0a	; 10
    10be:	83 60       	ori	r24, 0x03	; 3
    10c0:	8a b9       	out	0x0a, r24	; 10
    10c2:	20 9a       	sbi	0x04, 0	; 4
    10c4:	d0 df       	rcall	.-96     	; 0x1066 <initMotor>
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	8a e0       	ldi	r24, 0x0A	; 10
    10cc:	9f d3       	rcall	.+1854   	; 0x180c <xQueueGenericCreate>
    10ce:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <motorCommand+0x1>
    10d2:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <motorCommand>
    10d6:	88 db       	rcall	.-2288   	; 0x7e8 <UART_Init>
    10d8:	83 dc       	rcall	.-1786   	; 0x9e0 <INT1_init>
    10da:	21 dd       	rcall	.-1470   	; 0xb1e <timer3_init>
    10dc:	96 dd       	rcall	.-1236   	; 0xc0a <initServo>
    10de:	78 94       	sei
    10e0:	b1 dd       	rcall	.-1182   	; 0xc44 <init_master>
    10e2:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <watchdogSonar+0x1>
    10e6:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <watchdogSonar>
    10ea:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <watchdogServo+0x1>
    10ee:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <watchdogServo>
    10f2:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <watchdogTemp+0x1>
    10f6:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <watchdogTemp>
    10fa:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <watchdogMotor+0x1>
    10fe:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <watchdogMotor>
    1102:	98 e2       	ldi	r25, 0x28	; 40
    1104:	88 e1       	ldi	r24, 0x18	; 24
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	a8 95       	wdr
    110c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1116:	86 e1       	ldi	r24, 0x16	; 22
    1118:	9a ee       	ldi	r25, 0xEA	; 234
    111a:	ac e9       	ldi	r26, 0x9C	; 156
    111c:	bb e3       	ldi	r27, 0x3B	; 59
    111e:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <_accelScale>
    1122:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <_accelScale+0x1>
    1126:	a0 93 65 04 	sts	0x0465, r26	; 0x800465 <_accelScale+0x2>
    112a:	b0 93 66 04 	sts	0x0466, r27	; 0x800466 <_accelScale+0x3>
    112e:	83 ee       	ldi	r24, 0xE3	; 227
    1130:	90 ea       	ldi	r25, 0xA0	; 160
    1132:	ab e8       	ldi	r26, 0x8B	; 139
    1134:	ba e3       	ldi	r27, 0x3A	; 58
    1136:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <_gyroScale>
    113a:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <_gyroScale+0x1>
    113e:	a0 93 6b 04 	sts	0x046B, r26	; 0x80046b <_gyroScale+0x2>
    1142:	b0 93 6c 04 	sts	0x046C, r27	; 0x80046c <_gyroScale+0x3>
    1146:	8a e3       	ldi	r24, 0x3A	; 58
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	8f db       	rcall	.-2274   	; 0x86a <UART_Transmit_String>
    114c:	e1 2c       	mov	r14, r1
    114e:	f1 2c       	mov	r15, r1
    1150:	03 e0       	ldi	r16, 0x03	; 3
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	51 e0       	ldi	r21, 0x01	; 1
    115a:	69 e4       	ldi	r22, 0x49	; 73
    115c:	72 e0       	ldi	r23, 0x02	; 2
    115e:	8e e6       	ldi	r24, 0x6E	; 110
    1160:	95 e0       	ldi	r25, 0x05	; 5
    1162:	6b d6       	rcall	.+3286   	; 0x1e3a <xTaskCreate>
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	51 e0       	ldi	r21, 0x01	; 1
    116c:	66 e5       	ldi	r22, 0x56	; 86
    116e:	72 e0       	ldi	r23, 0x02	; 2
    1170:	81 e6       	ldi	r24, 0x61	; 97
    1172:	94 e0       	ldi	r25, 0x04	; 4
    1174:	62 d6       	rcall	.+3268   	; 0x1e3a <xTaskCreate>
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	51 e0       	ldi	r21, 0x01	; 1
    117e:	62 e6       	ldi	r22, 0x62	; 98
    1180:	72 e0       	ldi	r23, 0x02	; 2
    1182:	8f e9       	ldi	r24, 0x9F	; 159
    1184:	96 e0       	ldi	r25, 0x06	; 6
    1186:	59 d6       	rcall	.+3250   	; 0x1e3a <xTaskCreate>
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	51 e0       	ldi	r21, 0x01	; 1
    1190:	63 e7       	ldi	r22, 0x73	; 115
    1192:	72 e0       	ldi	r23, 0x02	; 2
    1194:	8c e0       	ldi	r24, 0x0C	; 12
    1196:	99 e0       	ldi	r25, 0x09	; 9
    1198:	50 d6       	rcall	.+3232   	; 0x1e3a <xTaskCreate>
    119a:	04 e0       	ldi	r16, 0x04	; 4
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	51 e0       	ldi	r21, 0x01	; 1
    11a4:	68 e8       	ldi	r22, 0x88	; 136
    11a6:	72 e0       	ldi	r23, 0x02	; 2
    11a8:	84 ec       	ldi	r24, 0xC4	; 196
    11aa:	93 e0       	ldi	r25, 0x03	; 3
    11ac:	46 d6       	rcall	.+3212   	; 0x1e3a <xTaskCreate>
    11ae:	59 d7       	rcall	.+3762   	; 0x2062 <vTaskStartScheduler>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	08 95       	ret

000011bc <setSpeed>:
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	08 2f       	mov	r16, r24
    11c6:	10 e0       	ldi	r17, 0x00	; 0
    11c8:	4a e0       	ldi	r20, 0x0A	; 10
    11ca:	68 e3       	ldi	r22, 0x38	; 56
    11cc:	74 e0       	ldi	r23, 0x04	; 4
    11ce:	c8 01       	movw	r24, r16
    11d0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__itoa_ncheck>
    11d4:	88 e3       	ldi	r24, 0x38	; 56
    11d6:	94 e0       	ldi	r25, 0x04	; 4
    11d8:	48 db       	rcall	.-2416   	; 0x86a <UART_Transmit_String>
    11da:	88 e3       	ldi	r24, 0x38	; 56
    11dc:	80 9f       	mul	r24, r16
    11de:	e0 01       	movw	r28, r0
    11e0:	81 9f       	mul	r24, r17
    11e2:	d0 0d       	add	r29, r0
    11e4:	d0 1b       	sub	r29, r16
    11e6:	11 24       	eor	r1, r1
    11e8:	c0 5e       	subi	r28, 0xE0	; 224
    11ea:	d1 4b       	sbci	r29, 0xB1	; 177
    11ec:	4a e0       	ldi	r20, 0x0A	; 10
    11ee:	68 e3       	ldi	r22, 0x38	; 56
    11f0:	74 e0       	ldi	r23, 0x04	; 4
    11f2:	ce 01       	movw	r24, r28
    11f4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__itoa_ncheck>
    11f8:	88 e3       	ldi	r24, 0x38	; 56
    11fa:	94 e0       	ldi	r25, 0x04	; 4
    11fc:	36 db       	rcall	.-2452   	; 0x86a <UART_Transmit_String>
    11fe:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1202:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    1206:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    120a:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <motorTaak>:
void motorTaak(){
	uint8_t temp;
	int16_t speed = 0;
	int16_t currentSpeed = 0;
	bool riding = false;
	setSpeed(speed);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	d0 df       	rcall	.-96     	; 0x11bc <setSpeed>

void motorTaak(){
	uint8_t temp;
	int16_t speed = 0;
	int16_t currentSpeed = 0;
	bool riding = false;
    121c:	c1 2c       	mov	r12, r1
}

void motorTaak(){
	uint8_t temp;
	int16_t speed = 0;
	int16_t currentSpeed = 0;
    121e:	c0 e0       	ldi	r28, 0x00	; 0
    1220:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

void motorTaak(){
	uint8_t temp;
	int16_t speed = 0;
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	10 e0       	ldi	r17, 0x00	; 0
			}
			else if(currentSpeed >= speed){
				currentSpeed -= 10;
				if (currentSpeed < 20) currentSpeed = 20;
				setSpeed(currentSpeed);
				vTaskDelay(25);
    1226:	bb 24       	eor	r11, r11
    1228:	b3 94       	inc	r11
				default:
					//nothing
					break;	
				
			}
			ontvang = '0';
    122a:	0f 2e       	mov	r0, r31
    122c:	f0 e3       	ldi	r31, 0x30	; 48
    122e:	df 2e       	mov	r13, r31
    1230:	f0 2d       	mov	r31, r0
    1232:	61 2c       	mov	r6, r1
    1234:	71 2c       	mov	r7, r1
    1236:	0f 2e       	mov	r0, r31
    1238:	f4 e6       	ldi	r31, 0x64	; 100
    123a:	8f 2e       	mov	r8, r31
    123c:	f0 2d       	mov	r31, r0
    123e:	91 2c       	mov	r9, r1
					riding = true;
					motorStop();
					motorRechts();
					break;
				case 'x':
					riding = false;
    1240:	a1 2c       	mov	r10, r1
				if (currentSpeed < 20) currentSpeed = 20;
				setSpeed(currentSpeed);
				vTaskDelay(25);
			}
		}
		watchdogMotor = 1;
    1242:	ee 24       	eor	r14, r14
    1244:	e3 94       	inc	r14
    1246:	f1 2c       	mov	r15, r1
	setSpeed(speed);

	while (1){
		/*if (xQueueReceive(motorCommand, &temp, 0)){
			UART_Transmit(temp);*/
			switch(ontvang){
    1248:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <ontvang>
    124c:	8e 2f       	mov	r24, r30
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	fc 01       	movw	r30, r24
    1252:	bb 97       	sbiw	r30, 0x2b	; 43
    1254:	ee 34       	cpi	r30, 0x4E	; 78
    1256:	f1 05       	cpc	r31, r1
    1258:	08 f0       	brcs	.+2      	; 0x125c <motorTaak+0x44>
    125a:	3a c0       	rjmp	.+116    	; 0x12d0 <motorTaak+0xb8>
    125c:	88 27       	eor	r24, r24
    125e:	ed 5c       	subi	r30, 0xCD	; 205
    1260:	fe 4f       	sbci	r31, 0xFE	; 254
    1262:	8f 4f       	sbci	r24, 0xFF	; 255
    1264:	0c 94 af 14 	jmp	0x295e	; 0x295e <__tablejump2__>
				case 'w':
					currentSpeed = 0;
					setSpeed(currentSpeed);
    1268:	8a 2d       	mov	r24, r10
					riding = true;
					motorStop();
    126a:	a8 df       	rcall	.-176    	; 0x11bc <setSpeed>
    126c:	e3 de       	rcall	.-570    	; 0x1034 <motorStop>
					motorVooruit();
    126e:	b5 de       	rcall	.-662    	; 0xfda <motorVooruit>
	while (1){
		/*if (xQueueReceive(motorCommand, &temp, 0)){
			UART_Transmit(temp);*/
			switch(ontvang){
				case 'w':
					currentSpeed = 0;
    1270:	c0 e0       	ldi	r28, 0x00	; 0
					setSpeed(currentSpeed);
					riding = true;
					motorStop();
					motorVooruit();
					break;
    1272:	d0 e0       	ldi	r29, 0x00	; 0
				case 'a':
					riding = true;
					motorStop();
    1274:	54 c0       	rjmp	.+168    	; 0x131e <motorTaak+0x106>
					motorLinks();
    1276:	de de       	rcall	.-580    	; 0x1034 <motorStop>
					break;
    1278:	ce de       	rcall	.-612    	; 0x1016 <motorLinks>
				case 's':
					currentSpeed = 0;
					setSpeed(currentSpeed);
    127a:	51 c0       	rjmp	.+162    	; 0x131e <motorTaak+0x106>
    127c:	8a 2d       	mov	r24, r10
					riding = true;
					motorStop();
    127e:	9e df       	rcall	.-196    	; 0x11bc <setSpeed>
					motorAchteruit();
    1280:	d9 de       	rcall	.-590    	; 0x1034 <motorStop>
    1282:	9c de       	rcall	.-712    	; 0xfbc <motorAchteruit>
					riding = true;
					motorStop();
					motorLinks();
					break;
				case 's':
					currentSpeed = 0;
    1284:	c0 e0       	ldi	r28, 0x00	; 0
    1286:	d0 e0       	ldi	r29, 0x00	; 0
					motorStop();
					motorAchteruit();
					break;
				case 'd':
					riding = true;
					motorStop();
    1288:	4a c0       	rjmp	.+148    	; 0x131e <motorTaak+0x106>
    128a:	d4 de       	rcall	.-600    	; 0x1034 <motorStop>
					motorRechts();
    128c:	b5 de       	rcall	.-662    	; 0xff8 <motorRechts>
    128e:	47 c0       	rjmp	.+142    	; 0x131e <motorTaak+0x106>
					break;
				case 'x':
					riding = false;
					motorStop();
    1290:	d1 de       	rcall	.-606    	; 0x1034 <motorStop>
				default:
					//nothing
					break;	
				
			}
			ontvang = '0';
    1292:	d0 92 5e 04 	sts	0x045E, r13	; 0x80045e <ontvang>
					riding = true;
					motorStop();
					motorRechts();
					break;
				case 'x':
					riding = false;
    1296:	ca 2c       	mov	r12, r10
    1298:	3d c0       	rjmp	.+122    	; 0x1314 <motorTaak+0xfc>
					motorStop();
					break;
				case 'A':
					motorLinks();
    129a:	bd de       	rcall	.-646    	; 0x1016 <motorLinks>
					vTaskDelay(100);
    129c:	88 2d       	mov	r24, r8
    129e:	99 2d       	mov	r25, r9
    12a0:	0e 94 95 11 	call	0x232a	; 0x232a <vTaskDelay>
					motorStop();
    12a4:	c7 de       	rcall	.-626    	; 0x1034 <motorStop>
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <motorTaak+0xb8>
					break;
    12a8:	a7 de       	rcall	.-690    	; 0xff8 <motorRechts>
				case 'D':
					motorRechts();
    12aa:	88 2d       	mov	r24, r8
    12ac:	99 2d       	mov	r25, r9
					vTaskDelay(100);
    12ae:	0e 94 95 11 	call	0x232a	; 0x232a <vTaskDelay>
    12b2:	c0 de       	rcall	.-640    	; 0x1034 <motorStop>
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <motorTaak+0xb8>
					motorStop();
    12b6:	06 5f       	subi	r16, 0xF6	; 246
    12b8:	1f 4f       	sbci	r17, 0xFF	; 255
					break;
    12ba:	05 36       	cpi	r16, 0x65	; 101
    12bc:	11 05       	cpc	r17, r1
    12be:	44 f0       	brlt	.+16     	; 0x12d0 <motorTaak+0xb8>
    12c0:	08 2d       	mov	r16, r8
    12c2:	19 2d       	mov	r17, r9
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <motorTaak+0xb8>
    12c6:	0a 50       	subi	r16, 0x0A	; 10
    12c8:	11 09       	sbc	r17, r1
    12ca:	12 f4       	brpl	.+4      	; 0x12d0 <motorTaak+0xb8>
    12cc:	06 2d       	mov	r16, r6
    12ce:	17 2d       	mov	r17, r7
    12d0:	d0 92 5e 04 	sts	0x045E, r13	; 0x80045e <ontvang>
				default:
					//nothing
					break;	
				
			}
			ontvang = '0';
    12d4:	cc 20       	and	r12, r12
    12d6:	f1 f0       	breq	.+60     	; 0x1314 <motorTaak+0xfc>

		if (riding){
    12d8:	0c 17       	cp	r16, r28
    12da:	1d 07       	cpc	r17, r29
			if (currentSpeed <= speed){
    12dc:	74 f0       	brlt	.+28     	; 0x12fa <motorTaak+0xe2>
    12de:	2a 96       	adiw	r28, 0x0a	; 10
    12e0:	c5 36       	cpi	r28, 0x65	; 101
    12e2:	d1 05       	cpc	r29, r1
    12e4:	14 f0       	brlt	.+4      	; 0x12ea <motorTaak+0xd2>
    12e6:	c4 e6       	ldi	r28, 0x64	; 100
    12e8:	d0 e0       	ldi	r29, 0x00	; 0
    12ea:	8c 2f       	mov	r24, r28
				currentSpeed += 10;
				if (currentSpeed > 100) currentSpeed = 100;
				setSpeed(currentSpeed);
    12ec:	67 df       	rcall	.-306    	; 0x11bc <setSpeed>
    12ee:	89 e1       	ldi	r24, 0x19	; 25
    12f0:	90 e0       	ldi	r25, 0x00	; 0
				vTaskDelay(25);
    12f2:	0e 94 95 11 	call	0x232a	; 0x232a <vTaskDelay>
    12f6:	cb 2c       	mov	r12, r11
    12f8:	0d c0       	rjmp	.+26     	; 0x1314 <motorTaak+0xfc>
    12fa:	2a 97       	sbiw	r28, 0x0a	; 10
    12fc:	c4 31       	cpi	r28, 0x14	; 20
			}
			else if(currentSpeed >= speed){
				currentSpeed -= 10;
    12fe:	d1 05       	cpc	r29, r1
				if (currentSpeed < 20) currentSpeed = 20;
    1300:	14 f4       	brge	.+4      	; 0x1306 <motorTaak+0xee>
    1302:	c4 e1       	ldi	r28, 0x14	; 20
    1304:	d0 e0       	ldi	r29, 0x00	; 0
    1306:	8c 2f       	mov	r24, r28
    1308:	59 df       	rcall	.-334    	; 0x11bc <setSpeed>
				setSpeed(currentSpeed);
    130a:	89 e1       	ldi	r24, 0x19	; 25
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 95 11 	call	0x232a	; 0x232a <vTaskDelay>
				vTaskDelay(25);
    1312:	cb 2c       	mov	r12, r11
    1314:	f0 92 4d 04 	sts	0x044D, r15	; 0x80044d <watchdogMotor+0x1>
    1318:	e0 92 4c 04 	sts	0x044C, r14	; 0x80044c <watchdogMotor>
			}
		}
		watchdogMotor = 1;
    131c:	95 cf       	rjmp	.-214    	; 0x1248 <motorTaak+0x30>
    131e:	d0 92 5e 04 	sts	0x045E, r13	; 0x80045e <ontvang>
	}
    1322:	da cf       	rjmp	.-76     	; 0x12d8 <motorTaak+0xc0>

00001324 <pxPortInitialiseStack>:
				default:
					//nothing
					break;	
				
			}
			ontvang = '0';
    1324:	31 e1       	ldi	r19, 0x11	; 17
    1326:	fc 01       	movw	r30, r24
    1328:	30 83       	st	Z, r19

#if defined (portUSE_WDTO)
        wdt_disable();											// disable Watchdog Timer

#elif defined( portUSE_TIMER0 )
        portTIMSK &= ~( _BV(OCIE0B)|_BV(OCIE0A)|_BV(TOIE0) );	// disable all Timer0 interrupts
    132a:	31 97       	sbiw	r30, 0x01	; 1
    132c:	22 e2       	ldi	r18, 0x22	; 34
    132e:	20 83       	st	Z, r18
    1330:	31 97       	sbiw	r30, 0x01	; 1
    1332:	a3 e3       	ldi	r26, 0x33	; 51
    1334:	a0 83       	st	Z, r26
    1336:	31 97       	sbiw	r30, 0x01	; 1
    1338:	60 83       	st	Z, r22
    133a:	31 97       	sbiw	r30, 0x01	; 1
    133c:	70 83       	st	Z, r23
    133e:	31 97       	sbiw	r30, 0x01	; 1
    1340:	10 82       	st	Z, r1
    1342:	31 97       	sbiw	r30, 0x01	; 1
    1344:	10 82       	st	Z, r1
    1346:	31 97       	sbiw	r30, 0x01	; 1
    1348:	60 e8       	ldi	r22, 0x80	; 128
    134a:	60 83       	st	Z, r22
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	10 82       	st	Z, r1
    1350:	31 97       	sbiw	r30, 0x01	; 1
    1352:	10 82       	st	Z, r1
    1354:	31 97       	sbiw	r30, 0x01	; 1
    1356:	10 82       	st	Z, r1
    1358:	31 97       	sbiw	r30, 0x01	; 1
    135a:	62 e0       	ldi	r22, 0x02	; 2
    135c:	60 83       	st	Z, r22
    135e:	31 97       	sbiw	r30, 0x01	; 1
    1360:	63 e0       	ldi	r22, 0x03	; 3
    1362:	60 83       	st	Z, r22
    1364:	31 97       	sbiw	r30, 0x01	; 1
    1366:	64 e0       	ldi	r22, 0x04	; 4
    1368:	60 83       	st	Z, r22
    136a:	31 97       	sbiw	r30, 0x01	; 1
    136c:	65 e0       	ldi	r22, 0x05	; 5
    136e:	60 83       	st	Z, r22
    1370:	31 97       	sbiw	r30, 0x01	; 1
    1372:	66 e0       	ldi	r22, 0x06	; 6
    1374:	60 83       	st	Z, r22
    1376:	31 97       	sbiw	r30, 0x01	; 1
    1378:	67 e0       	ldi	r22, 0x07	; 7
    137a:	60 83       	st	Z, r22
    137c:	31 97       	sbiw	r30, 0x01	; 1
    137e:	68 e0       	ldi	r22, 0x08	; 8
    1380:	60 83       	st	Z, r22
    1382:	31 97       	sbiw	r30, 0x01	; 1
    1384:	69 e0       	ldi	r22, 0x09	; 9
    1386:	60 83       	st	Z, r22
    1388:	31 97       	sbiw	r30, 0x01	; 1
    138a:	60 e1       	ldi	r22, 0x10	; 16
    138c:	60 83       	st	Z, r22
    138e:	31 97       	sbiw	r30, 0x01	; 1
    1390:	30 83       	st	Z, r19
    1392:	31 97       	sbiw	r30, 0x01	; 1
    1394:	32 e1       	ldi	r19, 0x12	; 18
    1396:	30 83       	st	Z, r19
    1398:	31 97       	sbiw	r30, 0x01	; 1
    139a:	33 e1       	ldi	r19, 0x13	; 19
    139c:	30 83       	st	Z, r19
    139e:	31 97       	sbiw	r30, 0x01	; 1
    13a0:	34 e1       	ldi	r19, 0x14	; 20
    13a2:	30 83       	st	Z, r19
    13a4:	31 97       	sbiw	r30, 0x01	; 1
    13a6:	35 e1       	ldi	r19, 0x15	; 21
    13a8:	30 83       	st	Z, r19
    13aa:	31 97       	sbiw	r30, 0x01	; 1
    13ac:	36 e1       	ldi	r19, 0x16	; 22
    13ae:	30 83       	st	Z, r19
    13b0:	31 97       	sbiw	r30, 0x01	; 1
    13b2:	37 e1       	ldi	r19, 0x17	; 23
    13b4:	30 83       	st	Z, r19
    13b6:	31 97       	sbiw	r30, 0x01	; 1
    13b8:	38 e1       	ldi	r19, 0x18	; 24
    13ba:	30 83       	st	Z, r19
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	39 e1       	ldi	r19, 0x19	; 25
    13c0:	30 83       	st	Z, r19
    13c2:	31 97       	sbiw	r30, 0x01	; 1
    13c4:	30 e2       	ldi	r19, 0x20	; 32
    13c6:	30 83       	st	Z, r19
    13c8:	31 97       	sbiw	r30, 0x01	; 1
    13ca:	31 e2       	ldi	r19, 0x21	; 33
    13cc:	30 83       	st	Z, r19
    13ce:	31 97       	sbiw	r30, 0x01	; 1
    13d0:	20 83       	st	Z, r18
    13d2:	31 97       	sbiw	r30, 0x01	; 1
    13d4:	23 e2       	ldi	r18, 0x23	; 35
    13d6:	20 83       	st	Z, r18
    13d8:	31 97       	sbiw	r30, 0x01	; 1
    13da:	40 83       	st	Z, r20
    13dc:	31 97       	sbiw	r30, 0x01	; 1
    13de:	50 83       	st	Z, r21
    13e0:	31 97       	sbiw	r30, 0x01	; 1
    13e2:	26 e2       	ldi	r18, 0x26	; 38
    13e4:	20 83       	st	Z, r18
    13e6:	31 97       	sbiw	r30, 0x01	; 1
    13e8:	27 e2       	ldi	r18, 0x27	; 39
    13ea:	20 83       	st	Z, r18
    13ec:	31 97       	sbiw	r30, 0x01	; 1
    13ee:	28 e2       	ldi	r18, 0x28	; 40
    13f0:	20 83       	st	Z, r18
    13f2:	31 97       	sbiw	r30, 0x01	; 1
    13f4:	29 e2       	ldi	r18, 0x29	; 41
    13f6:	20 83       	st	Z, r18
    13f8:	31 97       	sbiw	r30, 0x01	; 1
    13fa:	20 e3       	ldi	r18, 0x30	; 48
    13fc:	20 83       	st	Z, r18
    13fe:	31 97       	sbiw	r30, 0x01	; 1
    1400:	21 e3       	ldi	r18, 0x31	; 49
    1402:	20 83       	st	Z, r18
    1404:	89 97       	sbiw	r24, 0x29	; 41
    1406:	08 95       	ret

00001408 <xPortStartScheduler>:
    1408:	88 ec       	ldi	r24, 0xC8	; 200
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <portTickRateHz+0x1>
    1410:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <portTickRateHz>
    1414:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <ticksRemainingInSec+0x1>
    1418:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <ticksRemainingInSec>
    141c:	8d e4       	ldi	r24, 0x4D	; 77
    141e:	87 bd       	out	0x27, r24	; 39
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	84 bd       	out	0x24, r24	; 36
    1424:	85 e0       	ldi	r24, 0x05	; 5
    1426:	85 bd       	out	0x25, r24	; 37
    1428:	ee e6       	ldi	r30, 0x6E	; 110
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	82 60       	ori	r24, 0x02	; 2
    1430:	80 83       	st	Z, r24
    1432:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <pxCurrentTCB>
    1436:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    143a:	cd 91       	ld	r28, X+
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	dd 91       	ld	r29, X+
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	ff 91       	pop	r31
    1444:	ef 91       	pop	r30
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	bf 91       	pop	r27
    144c:	af 91       	pop	r26
    144e:	9f 91       	pop	r25
    1450:	8f 91       	pop	r24
    1452:	7f 91       	pop	r23
    1454:	6f 91       	pop	r22
    1456:	5f 91       	pop	r21
    1458:	4f 91       	pop	r20
    145a:	3f 91       	pop	r19
    145c:	2f 91       	pop	r18
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	bf 90       	pop	r11
    146c:	af 90       	pop	r10
    146e:	9f 90       	pop	r9
    1470:	8f 90       	pop	r8
    1472:	7f 90       	pop	r7
    1474:	6f 90       	pop	r6
    1476:	5f 90       	pop	r5
    1478:	4f 90       	pop	r4
    147a:	3f 90       	pop	r3
    147c:	2f 90       	pop	r2
    147e:	1f 90       	pop	r1
    1480:	0f 90       	pop	r0
    1482:	0c be       	out	0x3c, r0	; 60
    1484:	0f 90       	pop	r0
    1486:	0b be       	out	0x3b, r0	; 59
    1488:	0f 90       	pop	r0
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	0f 90       	pop	r0
    148e:	08 95       	ret
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	08 95       	ret

00001494 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1494:	0f 92       	push	r0
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	0f 92       	push	r0
    149c:	0b b6       	in	r0, 0x3b	; 59
    149e:	0f 92       	push	r0
    14a0:	0c b6       	in	r0, 0x3c	; 60
    14a2:	0f 92       	push	r0
    14a4:	1f 92       	push	r1
    14a6:	11 24       	eor	r1, r1
    14a8:	2f 92       	push	r2
    14aa:	3f 92       	push	r3
    14ac:	4f 92       	push	r4
    14ae:	5f 92       	push	r5
    14b0:	6f 92       	push	r6
    14b2:	7f 92       	push	r7
    14b4:	8f 92       	push	r8
    14b6:	9f 92       	push	r9
    14b8:	af 92       	push	r10
    14ba:	bf 92       	push	r11
    14bc:	cf 92       	push	r12
    14be:	df 92       	push	r13
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
    14e4:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <pxCurrentTCB>
    14e8:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    14ec:	0d b6       	in	r0, 0x3d	; 61
    14ee:	0d 92       	st	X+, r0
    14f0:	0e b6       	in	r0, 0x3e	; 62
    14f2:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    14f4:	2a d7       	rcall	.+3668   	; 0x234a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    14f6:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <pxCurrentTCB>
    14fa:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    14fe:	cd 91       	ld	r28, X+
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	dd 91       	ld	r29, X+
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	ff 91       	pop	r31
    1508:	ef 91       	pop	r30
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	bf 91       	pop	r27
    1510:	af 91       	pop	r26
    1512:	9f 91       	pop	r25
    1514:	8f 91       	pop	r24
    1516:	7f 91       	pop	r23
    1518:	6f 91       	pop	r22
    151a:	5f 91       	pop	r21
    151c:	4f 91       	pop	r20
    151e:	3f 91       	pop	r19
    1520:	2f 91       	pop	r18
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	ff 90       	pop	r15
    1528:	ef 90       	pop	r14
    152a:	df 90       	pop	r13
    152c:	cf 90       	pop	r12
    152e:	bf 90       	pop	r11
    1530:	af 90       	pop	r10
    1532:	9f 90       	pop	r9
    1534:	8f 90       	pop	r8
    1536:	7f 90       	pop	r7
    1538:	6f 90       	pop	r6
    153a:	5f 90       	pop	r5
    153c:	4f 90       	pop	r4
    153e:	3f 90       	pop	r3
    1540:	2f 90       	pop	r2
    1542:	1f 90       	pop	r1
    1544:	0f 90       	pop	r0
    1546:	0c be       	out	0x3c, r0	; 60
    1548:	0f 90       	pop	r0
    154a:	0b be       	out	0x3b, r0	; 59
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1552:	08 95       	ret

00001554 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1554:	0f 92       	push	r0
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	0f 92       	push	r0
    155c:	0b b6       	in	r0, 0x3b	; 59
    155e:	0f 92       	push	r0
    1560:	0c b6       	in	r0, 0x3c	; 60
    1562:	0f 92       	push	r0
    1564:	1f 92       	push	r1
    1566:	11 24       	eor	r1, r1
    1568:	2f 92       	push	r2
    156a:	3f 92       	push	r3
    156c:	4f 92       	push	r4
    156e:	5f 92       	push	r5
    1570:	6f 92       	push	r6
    1572:	7f 92       	push	r7
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
    15a4:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <pxCurrentTCB>
    15a8:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    15ac:	0d b6       	in	r0, 0x3d	; 61
    15ae:	0d 92       	st	X+, r0
    15b0:	0e b6       	in	r0, 0x3e	; 62
    15b2:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    15b4:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
    15b6:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <ticksRemainingInSec>
    15ba:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <ticksRemainingInSec+0x1>
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <ticksRemainingInSec+0x1>
    15c4:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <ticksRemainingInSec>
    15c8:	89 2b       	or	r24, r25
    15ca:	51 f4       	brne	.+20     	; 0x15e0 <vPortYieldFromTick+0x8c>
	{
		system_tick();
    15cc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <system_tick>
		ticksRemainingInSec = portTickRateHz;
    15d0:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <portTickRateHz>
    15d4:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <portTickRateHz+0x1>
    15d8:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <ticksRemainingInSec+0x1>
    15dc:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <ticksRemainingInSec>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
    15e0:	6e d5       	rcall	.+2780   	; 0x20be <xTaskIncrementTick>
    15e2:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    15e4:	b2 d6       	rcall	.+3428   	; 0x234a <vTaskSwitchContext>
    15e6:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <pxCurrentTCB>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
    15ea:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    15ee:	cd 91       	ld	r28, X+
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	dd 91       	ld	r29, X+
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	ff 91       	pop	r31
    15f8:	ef 91       	pop	r30
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	bf 91       	pop	r27
    1600:	af 91       	pop	r26
    1602:	9f 91       	pop	r25
    1604:	8f 91       	pop	r24
    1606:	7f 91       	pop	r23
    1608:	6f 91       	pop	r22
    160a:	5f 91       	pop	r21
    160c:	4f 91       	pop	r20
    160e:	3f 91       	pop	r19
    1610:	2f 91       	pop	r18
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
    161e:	bf 90       	pop	r11
    1620:	af 90       	pop	r10
    1622:	9f 90       	pop	r9
    1624:	8f 90       	pop	r8
    1626:	7f 90       	pop	r7
    1628:	6f 90       	pop	r6
    162a:	5f 90       	pop	r5
    162c:	4f 90       	pop	r4
    162e:	3f 90       	pop	r3
    1630:	2f 90       	pop	r2
    1632:	1f 90       	pop	r1
    1634:	0f 90       	pop	r0
    1636:	0c be       	out	0x3c, r0	; 60
    1638:	0f 90       	pop	r0
    163a:	0b be       	out	0x3b, r0	; 59
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	08 95       	ret

00001644 <__vector_21>:

	__asm__ __volatile__ ( "ret" );
    1644:	87 df       	rcall	.-242    	; 0x1554 <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    1646:	18 95       	reti

00001648 <prvCopyDataToQueue>:
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
	}
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	ec 01       	movw	r28, r24
    1652:	04 2f       	mov	r16, r20
    1654:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1656:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1658:	41 11       	cpse	r20, r1
    165a:	0b c0       	rjmp	.+22     	; 0x1672 <prvCopyDataToQueue+0x2a>
    165c:	88 81       	ld	r24, Y
    165e:	99 81       	ldd	r25, Y+1	; 0x01
    1660:	89 2b       	or	r24, r25
    1662:	09 f0       	breq	.+2      	; 0x1666 <prvCopyDataToQueue+0x1e>
    1664:	41 c0       	rjmp	.+130    	; 0x16e8 <prvCopyDataToQueue+0xa0>
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	9b 81       	ldd	r25, Y+3	; 0x03
    166a:	90 d7       	rcall	.+3872   	; 0x258c <xTaskPriorityDisinherit>
    166c:	1b 82       	std	Y+3, r1	; 0x03
    166e:	1a 82       	std	Y+2, r1	; 0x02
    1670:	42 c0       	rjmp	.+132    	; 0x16f6 <prvCopyDataToQueue+0xae>
    1672:	01 11       	cpse	r16, r1
    1674:	17 c0       	rjmp	.+46     	; 0x16a4 <prvCopyDataToQueue+0x5c>
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <memcpy>
    1680:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	82 0f       	add	r24, r18
    1688:	91 1d       	adc	r25, r1
    168a:	9d 83       	std	Y+5, r25	; 0x05
    168c:	8c 83       	std	Y+4, r24	; 0x04
    168e:	2a 81       	ldd	r18, Y+2	; 0x02
    1690:	3b 81       	ldd	r19, Y+3	; 0x03
    1692:	82 17       	cp	r24, r18
    1694:	93 07       	cpc	r25, r19
    1696:	50 f1       	brcs	.+84     	; 0x16ec <prvCopyDataToQueue+0xa4>
    1698:	88 81       	ld	r24, Y
    169a:	99 81       	ldd	r25, Y+1	; 0x01
    169c:	9d 83       	std	Y+5, r25	; 0x05
    169e:	8c 83       	std	Y+4, r24	; 0x04
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	29 c0       	rjmp	.+82     	; 0x16f6 <prvCopyDataToQueue+0xae>
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	8e 81       	ldd	r24, Y+6	; 0x06
    16a8:	9f 81       	ldd	r25, Y+7	; 0x07
    16aa:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <memcpy>
    16ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	91 95       	neg	r25
    16b4:	81 95       	neg	r24
    16b6:	91 09       	sbc	r25, r1
    16b8:	2e 81       	ldd	r18, Y+6	; 0x06
    16ba:	3f 81       	ldd	r19, Y+7	; 0x07
    16bc:	28 0f       	add	r18, r24
    16be:	39 1f       	adc	r19, r25
    16c0:	3f 83       	std	Y+7, r19	; 0x07
    16c2:	2e 83       	std	Y+6, r18	; 0x06
    16c4:	48 81       	ld	r20, Y
    16c6:	59 81       	ldd	r21, Y+1	; 0x01
    16c8:	24 17       	cp	r18, r20
    16ca:	35 07       	cpc	r19, r21
    16cc:	30 f4       	brcc	.+12     	; 0x16da <prvCopyDataToQueue+0x92>
    16ce:	2a 81       	ldd	r18, Y+2	; 0x02
    16d0:	3b 81       	ldd	r19, Y+3	; 0x03
    16d2:	82 0f       	add	r24, r18
    16d4:	93 1f       	adc	r25, r19
    16d6:	9f 83       	std	Y+7, r25	; 0x07
    16d8:	8e 83       	std	Y+6, r24	; 0x06
    16da:	02 30       	cpi	r16, 0x02	; 2
    16dc:	49 f4       	brne	.+18     	; 0x16f0 <prvCopyDataToQueue+0xa8>
    16de:	11 23       	and	r17, r17
    16e0:	49 f0       	breq	.+18     	; 0x16f4 <prvCopyDataToQueue+0xac>
    16e2:	11 50       	subi	r17, 0x01	; 1
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	07 c0       	rjmp	.+14     	; 0x16f6 <prvCopyDataToQueue+0xae>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	05 c0       	rjmp	.+10     	; 0x16f6 <prvCopyDataToQueue+0xae>
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <prvCopyDataToQueue+0xae>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <prvCopyDataToQueue+0xae>
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	1f 5f       	subi	r17, 0xFF	; 255
    16f8:	1a 8f       	std	Y+26, r17	; 0x1a
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	08 95       	ret

00001704 <prvUnlockQueue>:
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	8c 01       	movw	r16, r24
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	0f 92       	push	r0
    1716:	fc 01       	movw	r30, r24
    1718:	c6 8d       	ldd	r28, Z+30	; 0x1e
    171a:	1c 16       	cp	r1, r28
    171c:	9c f4       	brge	.+38     	; 0x1744 <prvUnlockQueue+0x40>
    171e:	81 89       	ldd	r24, Z+17	; 0x11
    1720:	81 11       	cpse	r24, r1
    1722:	06 c0       	rjmp	.+12     	; 0x1730 <prvUnlockQueue+0x2c>
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <prvUnlockQueue+0x40>
    1726:	f8 01       	movw	r30, r16
    1728:	81 89       	ldd	r24, Z+17	; 0x11
    172a:	81 11       	cpse	r24, r1
    172c:	05 c0       	rjmp	.+10     	; 0x1738 <prvUnlockQueue+0x34>
    172e:	0a c0       	rjmp	.+20     	; 0x1744 <prvUnlockQueue+0x40>
    1730:	78 01       	movw	r14, r16
    1732:	f1 e1       	ldi	r31, 0x11	; 17
    1734:	ef 0e       	add	r14, r31
    1736:	f1 1c       	adc	r15, r1
    1738:	c7 01       	movw	r24, r14
    173a:	99 d6       	rcall	.+3378   	; 0x246e <xTaskRemoveFromEventList>
    173c:	81 11       	cpse	r24, r1
    173e:	22 d7       	rcall	.+3652   	; 0x2584 <vTaskMissedYield>
    1740:	c1 50       	subi	r28, 0x01	; 1
    1742:	89 f7       	brne	.-30     	; 0x1726 <prvUnlockQueue+0x22>
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	f8 01       	movw	r30, r16
    1748:	86 8f       	std	Z+30, r24	; 0x1e
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	0f 92       	push	r0
    1754:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1756:	1c 16       	cp	r1, r28
    1758:	9c f4       	brge	.+38     	; 0x1780 <prvUnlockQueue+0x7c>
    175a:	80 85       	ldd	r24, Z+8	; 0x08
    175c:	81 11       	cpse	r24, r1
    175e:	06 c0       	rjmp	.+12     	; 0x176c <prvUnlockQueue+0x68>
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <prvUnlockQueue+0x7c>
    1762:	f8 01       	movw	r30, r16
    1764:	80 85       	ldd	r24, Z+8	; 0x08
    1766:	81 11       	cpse	r24, r1
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <prvUnlockQueue+0x70>
    176a:	0a c0       	rjmp	.+20     	; 0x1780 <prvUnlockQueue+0x7c>
    176c:	78 01       	movw	r14, r16
    176e:	f8 e0       	ldi	r31, 0x08	; 8
    1770:	ef 0e       	add	r14, r31
    1772:	f1 1c       	adc	r15, r1
    1774:	c7 01       	movw	r24, r14
    1776:	7b d6       	rcall	.+3318   	; 0x246e <xTaskRemoveFromEventList>
    1778:	81 11       	cpse	r24, r1
    177a:	04 d7       	rcall	.+3592   	; 0x2584 <vTaskMissedYield>
    177c:	c1 50       	subi	r28, 0x01	; 1
    177e:	89 f7       	brne	.-30     	; 0x1762 <prvUnlockQueue+0x5e>
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	f8 01       	movw	r30, r16
    1784:	85 8f       	std	Z+29, r24	; 0x1d
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cf 91       	pop	r28
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	08 95       	ret

00001796 <xQueueGenericReset>:
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	ec 01       	movw	r28, r24
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	0f 92       	push	r0
    17a2:	48 81       	ld	r20, Y
    17a4:	59 81       	ldd	r21, Y+1	; 0x01
    17a6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    17ac:	72 9f       	mul	r23, r18
    17ae:	c0 01       	movw	r24, r0
    17b0:	73 9f       	mul	r23, r19
    17b2:	90 0d       	add	r25, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	fa 01       	movw	r30, r20
    17b8:	e8 0f       	add	r30, r24
    17ba:	f9 1f       	adc	r31, r25
    17bc:	fb 83       	std	Y+3, r31	; 0x03
    17be:	ea 83       	std	Y+2, r30	; 0x02
    17c0:	1a 8e       	std	Y+26, r1	; 0x1a
    17c2:	5d 83       	std	Y+5, r21	; 0x05
    17c4:	4c 83       	std	Y+4, r20	; 0x04
    17c6:	82 1b       	sub	r24, r18
    17c8:	93 0b       	sbc	r25, r19
    17ca:	84 0f       	add	r24, r20
    17cc:	95 1f       	adc	r25, r21
    17ce:	9f 83       	std	Y+7, r25	; 0x07
    17d0:	8e 83       	std	Y+6, r24	; 0x06
    17d2:	8f ef       	ldi	r24, 0xFF	; 255
    17d4:	8d 8f       	std	Y+29, r24	; 0x1d
    17d6:	8e 8f       	std	Y+30, r24	; 0x1e
    17d8:	61 11       	cpse	r22, r1
    17da:	0a c0       	rjmp	.+20     	; 0x17f0 <xQueueGenericReset+0x5a>
    17dc:	88 85       	ldd	r24, Y+8	; 0x08
    17de:	88 23       	and	r24, r24
    17e0:	79 f0       	breq	.+30     	; 0x1800 <xQueueGenericReset+0x6a>
    17e2:	ce 01       	movw	r24, r28
    17e4:	08 96       	adiw	r24, 0x08	; 8
    17e6:	43 d6       	rcall	.+3206   	; 0x246e <xTaskRemoveFromEventList>
    17e8:	88 23       	and	r24, r24
    17ea:	51 f0       	breq	.+20     	; 0x1800 <xQueueGenericReset+0x6a>
    17ec:	53 de       	rcall	.-858    	; 0x1494 <vPortYield>
    17ee:	08 c0       	rjmp	.+16     	; 0x1800 <xQueueGenericReset+0x6a>
    17f0:	ce 01       	movw	r24, r28
    17f2:	08 96       	adiw	r24, 0x08	; 8
    17f4:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    17f8:	ce 01       	movw	r24, r28
    17fa:	41 96       	adiw	r24, 0x11	; 17
    17fc:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <xQueueGenericCreate>:
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	08 2f       	mov	r16, r24
    1816:	16 2f       	mov	r17, r22
    1818:	66 23       	and	r22, r22
    181a:	b9 f0       	breq	.+46     	; 0x184a <xQueueGenericCreate+0x3e>
    181c:	86 9f       	mul	r24, r22
    181e:	c0 01       	movw	r24, r0
    1820:	11 24       	eor	r1, r1
    1822:	4f 96       	adiw	r24, 0x1f	; 31
    1824:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <pvPortMalloc>
    1828:	ec 01       	movw	r28, r24
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	39 f4       	brne	.+14     	; 0x183c <xQueueGenericCreate+0x30>
    182e:	14 c0       	rjmp	.+40     	; 0x1858 <xQueueGenericCreate+0x4c>
    1830:	0b 8f       	std	Y+27, r16	; 0x1b
    1832:	1c 8f       	std	Y+28, r17	; 0x1c
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	ce 01       	movw	r24, r28
    1838:	ae df       	rcall	.-164    	; 0x1796 <xQueueGenericReset>
    183a:	0e c0       	rjmp	.+28     	; 0x1858 <xQueueGenericCreate+0x4c>
    183c:	4f 96       	adiw	r24, 0x1f	; 31
    183e:	99 83       	std	Y+1, r25	; 0x01
    1840:	88 83       	st	Y, r24
    1842:	f6 cf       	rjmp	.-20     	; 0x1830 <xQueueGenericCreate+0x24>
    1844:	d9 83       	std	Y+1, r29	; 0x01
    1846:	c8 83       	st	Y, r28
    1848:	f3 cf       	rjmp	.-26     	; 0x1830 <xQueueGenericCreate+0x24>
    184a:	8f e1       	ldi	r24, 0x1F	; 31
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <pvPortMalloc>
    1852:	ec 01       	movw	r28, r24
    1854:	89 2b       	or	r24, r25
    1856:	b1 f7       	brne	.-20     	; 0x1844 <xQueueGenericCreate+0x38>
    1858:	ce 01       	movw	r24, r28
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	08 95       	ret

00001864 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1864:	9f 92       	push	r9
    1866:	af 92       	push	r10
    1868:	bf 92       	push	r11
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	00 d0       	rcall	.+0      	; 0x187c <xQueueGenericSend+0x18>
    187c:	1f 92       	push	r1
    187e:	1f 92       	push	r1
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	8c 01       	movw	r16, r24
    1886:	6b 01       	movw	r12, r22
    1888:	5d 83       	std	Y+5, r21	; 0x05
    188a:	4c 83       	std	Y+4, r20	; 0x04
    188c:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    188e:	b1 2c       	mov	r11, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1890:	99 24       	eor	r9, r9
    1892:	93 94       	inc	r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1894:	7c 01       	movw	r14, r24
    1896:	88 e0       	ldi	r24, 0x08	; 8
    1898:	e8 0e       	add	r14, r24
    189a:	f1 1c       	adc	r15, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    18a2:	f8 01       	movw	r30, r16
    18a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    18a6:	83 8d       	ldd	r24, Z+27	; 0x1b
    18a8:	98 17       	cp	r25, r24
    18aa:	18 f0       	brcs	.+6      	; 0x18b2 <xQueueGenericSend+0x4e>
    18ac:	f2 e0       	ldi	r31, 0x02	; 2
    18ae:	af 12       	cpse	r10, r31
    18b0:	15 c0       	rjmp	.+42     	; 0x18dc <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    18b2:	4a 2d       	mov	r20, r10
    18b4:	b6 01       	movw	r22, r12
    18b6:	c8 01       	movw	r24, r16
    18b8:	c7 de       	rcall	.-626    	; 0x1648 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    18ba:	f8 01       	movw	r30, r16
    18bc:	91 89       	ldd	r25, Z+17	; 0x11
    18be:	99 23       	and	r25, r25
    18c0:	39 f0       	breq	.+14     	; 0x18d0 <xQueueGenericSend+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    18c2:	c8 01       	movw	r24, r16
    18c4:	41 96       	adiw	r24, 0x11	; 17
    18c6:	d3 d5       	rcall	.+2982   	; 0x246e <xTaskRemoveFromEventList>
    18c8:	88 23       	and	r24, r24
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    18ca:	21 f0       	breq	.+8      	; 0x18d4 <xQueueGenericSend+0x70>
    18cc:	e3 dd       	rcall	.-1082   	; 0x1494 <vPortYield>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <xQueueGenericSend+0x70>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    18d0:	81 11       	cpse	r24, r1
    18d2:	e0 dd       	rcall	.-1088   	; 0x1494 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	45 c0       	rjmp	.+138    	; 0x1966 <xQueueGenericSend+0x102>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	9d 81       	ldd	r25, Y+5	; 0x05
    18e0:	89 2b       	or	r24, r25
    18e2:	21 f4       	brne	.+8      	; 0x18ec <xQueueGenericSend+0x88>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	3d c0       	rjmp	.+122    	; 0x1966 <xQueueGenericSend+0x102>
				}
				else if( xEntryTimeSet == pdFALSE )
    18ec:	b1 10       	cpse	r11, r1
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <xQueueGenericSend+0x94>
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
					xEntryTimeSet = pdTRUE;
    18f4:	04 d6       	rcall	.+3080   	; 0x24fe <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    18f6:	b9 2c       	mov	r11, r9
    18f8:	0f 90       	pop	r0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	da d3       	rcall	.+1972   	; 0x20b2 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	0f 92       	push	r0
    1904:	f8 01       	movw	r30, r16
    1906:	85 8d       	ldd	r24, Z+29	; 0x1d
    1908:	8f 3f       	cpi	r24, 0xFF	; 255
    190a:	09 f4       	brne	.+2      	; 0x190e <xQueueGenericSend+0xaa>
    190c:	15 8e       	std	Z+29, r1	; 0x1d
    190e:	f8 01       	movw	r30, r16
    1910:	86 8d       	ldd	r24, Z+30	; 0x1e
    1912:	8f 3f       	cpi	r24, 0xFF	; 255
    1914:	09 f4       	brne	.+2      	; 0x1918 <xQueueGenericSend+0xb4>
    1916:	16 8e       	std	Z+30, r1	; 0x1e
    1918:	0f 90       	pop	r0

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	be 01       	movw	r22, r28
    191e:	6c 5f       	subi	r22, 0xFC	; 252
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	ce 01       	movw	r24, r28
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	f6 d5       	rcall	.+3052   	; 0x2514 <xTaskCheckForTimeOut>
    1928:	81 11       	cpse	r24, r1
    192a:	19 c0       	rjmp	.+50     	; 0x195e <xQueueGenericSend+0xfa>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1932:	f8 01       	movw	r30, r16
    1934:	92 8d       	ldd	r25, Z+26	; 0x1a
    1936:	83 8d       	ldd	r24, Z+27	; 0x1b
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1938:	0f 90       	pop	r0
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    193a:	0f be       	out	0x3f, r0	; 63
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    193c:	98 13       	cpse	r25, r24
    193e:	0b c0       	rjmp	.+22     	; 0x1956 <xQueueGenericSend+0xf2>
    1940:	6c 81       	ldd	r22, Y+4	; 0x04
    1942:	7d 81       	ldd	r23, Y+5	; 0x05
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1944:	c7 01       	movw	r24, r14
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1946:	82 d5       	rcall	.+2820   	; 0x244c <vTaskPlaceOnEventList>
    1948:	c8 01       	movw	r24, r16
				{
					portYIELD_WITHIN_API();
    194a:	dc de       	rcall	.-584    	; 0x1704 <prvUnlockQueue>
    194c:	72 d4       	rcall	.+2276   	; 0x2232 <xTaskResumeAll>
    194e:	81 11       	cpse	r24, r1
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1950:	a5 cf       	rjmp	.-182    	; 0x189c <xQueueGenericSend+0x38>
    1952:	a0 dd       	rcall	.-1216   	; 0x1494 <vPortYield>
    1954:	a3 cf       	rjmp	.-186    	; 0x189c <xQueueGenericSend+0x38>
				( void ) xTaskResumeAll();
    1956:	c8 01       	movw	r24, r16
    1958:	d5 de       	rcall	.-598    	; 0x1704 <prvUnlockQueue>
    195a:	6b d4       	rcall	.+2262   	; 0x2232 <xTaskResumeAll>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    195c:	9f cf       	rjmp	.-194    	; 0x189c <xQueueGenericSend+0x38>
    195e:	c8 01       	movw	r24, r16
    1960:	d1 de       	rcall	.-606    	; 0x1704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1962:	67 d4       	rcall	.+2254   	; 0x2232 <xTaskResumeAll>
    1964:	80 e0       	ldi	r24, 0x00	; 0

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1966:	0f 90       	pop	r0
		}
	}
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	ff 90       	pop	r15
    197a:	ef 90       	pop	r14
    197c:	df 90       	pop	r13
    197e:	cf 90       	pop	r12
    1980:	bf 90       	pop	r11
    1982:	af 90       	pop	r10
    1984:	9f 90       	pop	r9
    1986:	08 95       	ret

00001988 <__vector_26>:
    1988:	1f 92       	push	r1
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    198a:	0f 92       	push	r0
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	0f 92       	push	r0
    1990:	11 24       	eor	r1, r1
    1992:	0b b6       	in	r0, 0x3b	; 59
    1994:	0f 92       	push	r0
    1996:	2f 93       	push	r18
    1998:	8f 93       	push	r24
    199a:	9f 93       	push	r25
    199c:	af 93       	push	r26
    199e:	bf 93       	push	r27
    19a0:	ef 93       	push	r30
    19a2:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	0f 92       	push	r0
	{
	    count = buffer->count;
    19aa:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <xSerialPort+0xd>
    19ae:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    19b6:	89 2b       	or	r24, r25
    19b8:	31 f4       	brne	.+12     	; 0x19c6 <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    19ba:	e1 ec       	ldi	r30, 0xC1	; 193
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8f 7d       	andi	r24, 0xDF	; 223
    19c2:	80 83       	st	Z, r24
    19c4:	1c c0       	rjmp	.+56     	; 0x19fe <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    19c6:	ee e7       	ldi	r30, 0x7E	; 126
    19c8:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    19ca:	a4 81       	ldd	r26, Z+4	; 0x04
    19cc:	b5 81       	ldd	r27, Z+5	; 0x05
    19ce:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    19d0:	b5 83       	std	Z+5, r27	; 0x05
    19d2:	a4 83       	std	Z+4, r26	; 0x04
    19d4:	80 85       	ldd	r24, Z+8	; 0x08
    19d6:	91 85       	ldd	r25, Z+9	; 0x09
    19d8:	a8 17       	cp	r26, r24
    19da:	b9 07       	cpc	r27, r25
    19dc:	21 f4       	brne	.+8      	; 0x19e6 <__vector_26+0x5e>
	  buffer->out = buffer->start;
    19de:	86 81       	ldd	r24, Z+6	; 0x06
    19e0:	97 81       	ldd	r25, Z+7	; 0x07
    19e2:	95 83       	std	Z+5, r25	; 0x05
    19e4:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	0f 92       	push	r0
	{
	    buffer->count--;
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	91 83       	std	Z+1, r25	; 0x01
    19f4:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    19f6:	0f 90       	pop	r0
    19f8:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    19fa:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    19fe:	ff 91       	pop	r31
    1a00:	ef 91       	pop	r30
    1a02:	bf 91       	pop	r27
    1a04:	af 91       	pop	r26
    1a06:	9f 91       	pop	r25
    1a08:	8f 91       	pop	r24
    1a0a:	2f 91       	pop	r18
    1a0c:	0f 90       	pop	r0
    1a0e:	0b be       	out	0x3b, r0	; 59
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <__vector_37>:
//}
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	0f 92       	push	r0
    1a22:	11 24       	eor	r1, r1
    1a24:	0b b6       	in	r0, 0x3b	; 59
    1a26:	0f 92       	push	r0
    1a28:	2f 93       	push	r18
    1a2a:	8f 93       	push	r24
    1a2c:	9f 93       	push	r25
    1a2e:	af 93       	push	r26
    1a30:	bf 93       	push	r27
    1a32:	ef 93       	push	r30
    1a34:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	0f 92       	push	r0
	{
	    count = buffer->count;
    1a3c:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <xSerial1Port+0xd>
    1a40:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    1a44:	0f 90       	pop	r0
    1a46:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    1a48:	89 2b       	or	r24, r25
    1a4a:	31 f4       	brne	.+12     	; 0x1a58 <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    1a4c:	e9 ec       	ldi	r30, 0xC9	; 201
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	8f 7d       	andi	r24, 0xDF	; 223
    1a54:	80 83       	st	Z, r24
    1a56:	1c c0       	rjmp	.+56     	; 0x1a90 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1a58:	e4 ee       	ldi	r30, 0xE4	; 228
    1a5a:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    1a5c:	a4 81       	ldd	r26, Z+4	; 0x04
    1a5e:	b5 81       	ldd	r27, Z+5	; 0x05
    1a60:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1a62:	b5 83       	std	Z+5, r27	; 0x05
    1a64:	a4 83       	std	Z+4, r26	; 0x04
    1a66:	80 85       	ldd	r24, Z+8	; 0x08
    1a68:	91 85       	ldd	r25, Z+9	; 0x09
    1a6a:	a8 17       	cp	r26, r24
    1a6c:	b9 07       	cpc	r27, r25
    1a6e:	21 f4       	brne	.+8      	; 0x1a78 <__vector_37+0x5e>
	  buffer->out = buffer->start;
    1a70:	86 81       	ldd	r24, Z+6	; 0x06
    1a72:	97 81       	ldd	r25, Z+7	; 0x07
    1a74:	95 83       	std	Z+5, r25	; 0x05
    1a76:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	0f 92       	push	r0
	{
	    buffer->count--;
    1a7e:	80 81       	ld	r24, Z
    1a80:	91 81       	ldd	r25, Z+1	; 0x01
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    1a8c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	2f 91       	pop	r18
    1a9e:	0f 90       	pop	r0
    1aa0:	0b be       	out	0x3b, r0	; 59
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	0f 90       	pop	r0
    1aa8:	1f 90       	pop	r1
    1aaa:	18 95       	reti

00001aac <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    1aac:	1f 92       	push	r1
    1aae:	0f 92       	push	r0
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	0f 92       	push	r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	0b b6       	in	r0, 0x3b	; 59
    1ab8:	0f 92       	push	r0
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	8f 93       	push	r24
    1ac2:	9f 93       	push	r25
    1ac4:	af 93       	push	r26
    1ac6:	bf 93       	push	r27
    1ac8:	ef 93       	push	r30
    1aca:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    1acc:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1ad0:	8c 71       	andi	r24, 0x1C	; 28
    1ad2:	71 f0       	breq	.+28     	; 0x1af0 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    1ad4:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1ad8:	88 23       	and	r24, r24
    1ada:	0c f0       	brlt	.+2      	; 0x1ade <__vector_51+0x32>
    1adc:	36 c0       	rjmp	.+108    	; 0x1b4a <__vector_51+0x9e>
    1ade:	a6 ed       	ldi	r26, 0xD6	; 214
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e0 ed       	ldi	r30, 0xD0	; 208
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	8c 91       	ld	r24, X
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	e4 f3       	brlt	.-8      	; 0x1ae6 <__vector_51+0x3a>
    1aee:	2d c0       	rjmp	.+90     	; 0x1b4a <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    1af0:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	0f 92       	push	r0
	{
	    count = buffer->count;
    1afa:	e3 e9       	ldi	r30, 0x93	; 147
    1afc:	f4 e0       	ldi	r31, 0x04	; 4
    1afe:	21 81       	ldd	r18, Z+1	; 0x01
    1b00:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    1b02:	0f 90       	pop	r0
    1b04:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    1b06:	83 85       	ldd	r24, Z+11	; 0x0b
    1b08:	94 85       	ldd	r25, Z+12	; 0x0c
    1b0a:	28 17       	cp	r18, r24
    1b0c:	39 07       	cpc	r19, r25
    1b0e:	e9 f0       	breq	.+58     	; 0x1b4a <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1b10:	e4 e9       	ldi	r30, 0x94	; 148
    1b12:	f4 e0       	ldi	r31, 0x04	; 4

	*buffer->in = data;
    1b14:	a2 81       	ldd	r26, Z+2	; 0x02
    1b16:	b3 81       	ldd	r27, Z+3	; 0x03
    1b18:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	93 83       	std	Z+3, r25	; 0x03
    1b22:	82 83       	std	Z+2, r24	; 0x02
    1b24:	20 85       	ldd	r18, Z+8	; 0x08
    1b26:	31 85       	ldd	r19, Z+9	; 0x09
    1b28:	82 17       	cp	r24, r18
    1b2a:	93 07       	cpc	r25, r19
    1b2c:	21 f4       	brne	.+8      	; 0x1b36 <__vector_51+0x8a>
	  buffer->in = buffer->start;
    1b2e:	86 81       	ldd	r24, Z+6	; 0x06
    1b30:	97 81       	ldd	r25, Z+7	; 0x07
    1b32:	93 83       	std	Z+3, r25	; 0x03
    1b34:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	0f 92       	push	r0
	{
	    buffer->count++;
    1b3c:	80 81       	ld	r24, Z
    1b3e:	91 81       	ldd	r25, Z+1	; 0x01
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    1b4a:	ff 91       	pop	r31
    1b4c:	ef 91       	pop	r30
    1b4e:	bf 91       	pop	r27
    1b50:	af 91       	pop	r26
    1b52:	9f 91       	pop	r25
    1b54:	8f 91       	pop	r24
    1b56:	4f 91       	pop	r20
    1b58:	3f 91       	pop	r19
    1b5a:	2f 91       	pop	r18
    1b5c:	0f 90       	pop	r0
    1b5e:	0b be       	out	0x3b, r0	; 59
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0
    1b66:	1f 90       	pop	r1
    1b68:	18 95       	reti

00001b6a <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    1b6a:	1f 92       	push	r1
    1b6c:	0f 92       	push	r0
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	0f 92       	push	r0
    1b72:	11 24       	eor	r1, r1
    1b74:	0b b6       	in	r0, 0x3b	; 59
    1b76:	0f 92       	push	r0
    1b78:	2f 93       	push	r18
    1b7a:	8f 93       	push	r24
    1b7c:	9f 93       	push	r25
    1b7e:	af 93       	push	r26
    1b80:	bf 93       	push	r27
    1b82:	ef 93       	push	r30
    1b84:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	0f 92       	push	r0
	{
	    count = buffer->count;
    1b8c:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <xSerial2Port+0xd>
    1b90:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    1b98:	89 2b       	or	r24, r25
    1b9a:	31 f4       	brne	.+12     	; 0x1ba8 <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    1b9c:	e1 ed       	ldi	r30, 0xD1	; 209
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8f 7d       	andi	r24, 0xDF	; 223
    1ba4:	80 83       	st	Z, r24
    1ba6:	1c c0       	rjmp	.+56     	; 0x1be0 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1ba8:	e0 ea       	ldi	r30, 0xA0	; 160
    1baa:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    1bac:	a4 81       	ldd	r26, Z+4	; 0x04
    1bae:	b5 81       	ldd	r27, Z+5	; 0x05
    1bb0:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1bb2:	b5 83       	std	Z+5, r27	; 0x05
    1bb4:	a4 83       	std	Z+4, r26	; 0x04
    1bb6:	80 85       	ldd	r24, Z+8	; 0x08
    1bb8:	91 85       	ldd	r25, Z+9	; 0x09
    1bba:	a8 17       	cp	r26, r24
    1bbc:	b9 07       	cpc	r27, r25
    1bbe:	21 f4       	brne	.+8      	; 0x1bc8 <__vector_52+0x5e>
	  buffer->out = buffer->start;
    1bc0:	86 81       	ldd	r24, Z+6	; 0x06
    1bc2:	97 81       	ldd	r25, Z+7	; 0x07
    1bc4:	95 83       	std	Z+5, r25	; 0x05
    1bc6:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	0f 92       	push	r0
	{
	    buffer->count--;
    1bce:	80 81       	ld	r24, Z
    1bd0:	91 81       	ldd	r25, Z+1	; 0x01
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1bd8:	0f 90       	pop	r0
    1bda:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    1bdc:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	2f 91       	pop	r18
    1bee:	0f 90       	pop	r0
    1bf0:	0b be       	out	0x3b, r0	; 59
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	0f 90       	pop	r0
    1bf8:	1f 90       	pop	r1
    1bfa:	18 95       	reti

00001bfc <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    1bfc:	1f 92       	push	r1
    1bfe:	0f 92       	push	r0
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	0f 92       	push	r0
    1c04:	11 24       	eor	r1, r1
    1c06:	0b b6       	in	r0, 0x3b	; 59
    1c08:	0f 92       	push	r0
    1c0a:	2f 93       	push	r18
    1c0c:	3f 93       	push	r19
    1c0e:	4f 93       	push	r20
    1c10:	8f 93       	push	r24
    1c12:	9f 93       	push	r25
    1c14:	af 93       	push	r26
    1c16:	bf 93       	push	r27
    1c18:	ef 93       	push	r30
    1c1a:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    1c1c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1c20:	8c 71       	andi	r24, 0x1C	; 28
    1c22:	71 f0       	breq	.+28     	; 0x1c40 <__vector_54+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    1c24:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1c28:	88 23       	and	r24, r24
    1c2a:	0c f0       	brlt	.+2      	; 0x1c2e <__vector_54+0x32>
    1c2c:	36 c0       	rjmp	.+108    	; 0x1c9a <__vector_54+0x9e>
    1c2e:	a6 e3       	ldi	r26, 0x36	; 54
    1c30:	b1 e0       	ldi	r27, 0x01	; 1
    1c32:	e0 e3       	ldi	r30, 0x30	; 48
    1c34:	f1 e0       	ldi	r31, 0x01	; 1
    1c36:	8c 91       	ld	r24, X
    1c38:	80 81       	ld	r24, Z
    1c3a:	88 23       	and	r24, r24
    1c3c:	e4 f3       	brlt	.-8      	; 0x1c36 <__vector_54+0x3a>
    1c3e:	2d c0       	rjmp	.+90     	; 0x1c9a <__vector_54+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    1c40:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	0f 92       	push	r0
	{
	    count = buffer->count;
    1c4a:	e5 eb       	ldi	r30, 0xB5	; 181
    1c4c:	f4 e0       	ldi	r31, 0x04	; 4
    1c4e:	21 81       	ldd	r18, Z+1	; 0x01
    1c50:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    1c52:	0f 90       	pop	r0
    1c54:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    1c56:	83 85       	ldd	r24, Z+11	; 0x0b
    1c58:	94 85       	ldd	r25, Z+12	; 0x0c
    1c5a:	28 17       	cp	r18, r24
    1c5c:	39 07       	cpc	r19, r25
    1c5e:	e9 f0       	breq	.+58     	; 0x1c9a <__vector_54+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1c60:	e6 eb       	ldi	r30, 0xB6	; 182
    1c62:	f4 e0       	ldi	r31, 0x04	; 4

	*buffer->in = data;
    1c64:	a2 81       	ldd	r26, Z+2	; 0x02
    1c66:	b3 81       	ldd	r27, Z+3	; 0x03
    1c68:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	93 83       	std	Z+3, r25	; 0x03
    1c72:	82 83       	std	Z+2, r24	; 0x02
    1c74:	20 85       	ldd	r18, Z+8	; 0x08
    1c76:	31 85       	ldd	r19, Z+9	; 0x09
    1c78:	82 17       	cp	r24, r18
    1c7a:	93 07       	cpc	r25, r19
    1c7c:	21 f4       	brne	.+8      	; 0x1c86 <__vector_54+0x8a>
	  buffer->in = buffer->start;
    1c7e:	86 81       	ldd	r24, Z+6	; 0x06
    1c80:	97 81       	ldd	r25, Z+7	; 0x07
    1c82:	93 83       	std	Z+3, r25	; 0x03
    1c84:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	0f 92       	push	r0
	{
	    buffer->count++;
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1c96:	0f 90       	pop	r0
    1c98:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    1c9a:	ff 91       	pop	r31
    1c9c:	ef 91       	pop	r30
    1c9e:	bf 91       	pop	r27
    1ca0:	af 91       	pop	r26
    1ca2:	9f 91       	pop	r25
    1ca4:	8f 91       	pop	r24
    1ca6:	4f 91       	pop	r20
    1ca8:	3f 91       	pop	r19
    1caa:	2f 91       	pop	r18
    1cac:	0f 90       	pop	r0
    1cae:	0b be       	out	0x3b, r0	; 59
    1cb0:	0f 90       	pop	r0
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	0f 90       	pop	r0
    1cb6:	1f 90       	pop	r1
    1cb8:	18 95       	reti

00001cba <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    1cba:	1f 92       	push	r1
    1cbc:	0f 92       	push	r0
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	0f 92       	push	r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	0b b6       	in	r0, 0x3b	; 59
    1cc6:	0f 92       	push	r0
    1cc8:	2f 93       	push	r18
    1cca:	8f 93       	push	r24
    1ccc:	9f 93       	push	r25
    1cce:	af 93       	push	r26
    1cd0:	bf 93       	push	r27
    1cd2:	ef 93       	push	r30
    1cd4:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	0f 92       	push	r0
	{
	    count = buffer->count;
    1cdc:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <xSerial3Port+0xd>
    1ce0:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    1ce4:	0f 90       	pop	r0
    1ce6:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    1ce8:	89 2b       	or	r24, r25
    1cea:	31 f4       	brne	.+12     	; 0x1cf8 <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    1cec:	e1 e3       	ldi	r30, 0x31	; 49
    1cee:	f1 e0       	ldi	r31, 0x01	; 1
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8f 7d       	andi	r24, 0xDF	; 223
    1cf4:	80 83       	st	Z, r24
    1cf6:	1c c0       	rjmp	.+56     	; 0x1d30 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1cf8:	e2 ec       	ldi	r30, 0xC2	; 194
    1cfa:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    1cfc:	a4 81       	ldd	r26, Z+4	; 0x04
    1cfe:	b5 81       	ldd	r27, Z+5	; 0x05
    1d00:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1d02:	b5 83       	std	Z+5, r27	; 0x05
    1d04:	a4 83       	std	Z+4, r26	; 0x04
    1d06:	80 85       	ldd	r24, Z+8	; 0x08
    1d08:	91 85       	ldd	r25, Z+9	; 0x09
    1d0a:	a8 17       	cp	r26, r24
    1d0c:	b9 07       	cpc	r27, r25
    1d0e:	21 f4       	brne	.+8      	; 0x1d18 <__vector_55+0x5e>
	  buffer->out = buffer->start;
    1d10:	86 81       	ldd	r24, Z+6	; 0x06
    1d12:	97 81       	ldd	r25, Z+7	; 0x07
    1d14:	95 83       	std	Z+5, r25	; 0x05
    1d16:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	0f 92       	push	r0
	{
	    buffer->count--;
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1d28:	0f 90       	pop	r0
    1d2a:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    1d2c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    1d30:	ff 91       	pop	r31
    1d32:	ef 91       	pop	r30
    1d34:	bf 91       	pop	r27
    1d36:	af 91       	pop	r26
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	2f 91       	pop	r18
    1d3e:	0f 90       	pop	r0
    1d40:	0b be       	out	0x3b, r0	; 59
    1d42:	0f 90       	pop	r0
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	0f 90       	pop	r0
    1d48:	1f 90       	pop	r1
    1d4a:	18 95       	reti

00001d4c <prvResetNextTaskUnblockTime>:
    1d4c:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxDelayedTaskList>
    1d50:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
    1d54:	80 81       	ld	r24, Z
    1d56:	81 11       	cpse	r24, r1
    1d58:	07 c0       	rjmp	.+14     	; 0x1d68 <prvResetNextTaskUnblockTime+0x1c>
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	9f ef       	ldi	r25, 0xFF	; 255
    1d5e:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <xNextTaskUnblockTime+0x1>
    1d62:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <xNextTaskUnblockTime>
    1d66:	08 95       	ret
    1d68:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxDelayedTaskList>
    1d6c:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
    1d70:	05 80       	ldd	r0, Z+5	; 0x05
    1d72:	f6 81       	ldd	r31, Z+6	; 0x06
    1d74:	e0 2d       	mov	r30, r0
    1d76:	06 80       	ldd	r0, Z+6	; 0x06
    1d78:	f7 81       	ldd	r31, Z+7	; 0x07
    1d7a:	e0 2d       	mov	r30, r0
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <xNextTaskUnblockTime+0x1>
    1d84:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <xNextTaskUnblockTime>
    1d88:	08 95       	ret

00001d8a <prvAddCurrentTaskToDelayedList>:
    1d8a:	ff 92       	push	r15
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	ec 01       	movw	r28, r24
    1d96:	f6 2e       	mov	r15, r22
    1d98:	00 91 cd 02 	lds	r16, 0x02CD	; 0x8002cd <xTickCount>
    1d9c:	10 91 ce 02 	lds	r17, 0x02CE	; 0x8002ce <xTickCount+0x1>
    1da0:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <pxCurrentTCB>
    1da4:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    1da8:	02 96       	adiw	r24, 0x02	; 2
    1daa:	0e 94 9e 03 	call	0x73c	; 0x73c <uxListRemove>
    1dae:	cf 3f       	cpi	r28, 0xFF	; 255
    1db0:	8f ef       	ldi	r24, 0xFF	; 255
    1db2:	d8 07       	cpc	r29, r24
    1db4:	69 f4       	brne	.+26     	; 0x1dd0 <prvAddCurrentTaskToDelayedList+0x46>
    1db6:	ff 20       	and	r15, r15
    1db8:	59 f0       	breq	.+22     	; 0x1dd0 <prvAddCurrentTaskToDelayedList+0x46>
    1dba:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <pxCurrentTCB>
    1dbe:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    1dc2:	6e 5f       	subi	r22, 0xFE	; 254
    1dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc6:	80 ed       	ldi	r24, 0xD0	; 208
    1dc8:	92 e0       	ldi	r25, 0x02	; 2
    1dca:	0e 94 4c 03 	call	0x698	; 0x698 <vListInsertEnd>
    1dce:	2f c0       	rjmp	.+94     	; 0x1e2e <prvAddCurrentTaskToDelayedList+0xa4>
    1dd0:	c0 0f       	add	r28, r16
    1dd2:	d1 1f       	adc	r29, r17
    1dd4:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <pxCurrentTCB>
    1dd8:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    1ddc:	d3 83       	std	Z+3, r29	; 0x03
    1dde:	c2 83       	std	Z+2, r28	; 0x02
    1de0:	c0 17       	cp	r28, r16
    1de2:	d1 07       	cpc	r29, r17
    1de4:	68 f4       	brcc	.+26     	; 0x1e00 <prvAddCurrentTaskToDelayedList+0x76>
    1de6:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <pxCurrentTCB>
    1dea:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    1dee:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <pxOverflowDelayedTaskList>
    1df2:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <pxOverflowDelayedTaskList+0x1>
    1df6:	6e 5f       	subi	r22, 0xFE	; 254
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInsert>
    1dfe:	17 c0       	rjmp	.+46     	; 0x1e2e <prvAddCurrentTaskToDelayedList+0xa4>
    1e00:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <pxCurrentTCB>
    1e04:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    1e08:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <pxDelayedTaskList>
    1e0c:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
    1e10:	6e 5f       	subi	r22, 0xFE	; 254
    1e12:	7f 4f       	sbci	r23, 0xFF	; 255
    1e14:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInsert>
    1e18:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <xNextTaskUnblockTime>
    1e1c:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <xNextTaskUnblockTime+0x1>
    1e20:	c8 17       	cp	r28, r24
    1e22:	d9 07       	cpc	r29, r25
    1e24:	20 f4       	brcc	.+8      	; 0x1e2e <prvAddCurrentTaskToDelayedList+0xa4>
    1e26:	d0 93 c6 02 	sts	0x02C6, r29	; 0x8002c6 <xNextTaskUnblockTime+0x1>
    1e2a:	c0 93 c5 02 	sts	0x02C5, r28	; 0x8002c5 <xNextTaskUnblockTime>
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	1f 91       	pop	r17
    1e34:	0f 91       	pop	r16
    1e36:	ff 90       	pop	r15
    1e38:	08 95       	ret

00001e3a <xTaskCreate>:
    1e3a:	4f 92       	push	r4
    1e3c:	5f 92       	push	r5
    1e3e:	6f 92       	push	r6
    1e40:	7f 92       	push	r7
    1e42:	8f 92       	push	r8
    1e44:	9f 92       	push	r9
    1e46:	af 92       	push	r10
    1e48:	bf 92       	push	r11
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	4c 01       	movw	r8, r24
    1e5a:	6b 01       	movw	r12, r22
    1e5c:	5a 01       	movw	r10, r20
    1e5e:	29 01       	movw	r4, r18
    1e60:	ca 01       	movw	r24, r20
    1e62:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <pvPortMalloc>
    1e66:	3c 01       	movw	r6, r24
    1e68:	89 2b       	or	r24, r25
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <xTaskCreate+0x34>
    1e6c:	e9 c0       	rjmp	.+466    	; 0x2040 <xTaskCreate+0x206>
    1e6e:	88 e2       	ldi	r24, 0x28	; 40
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <pvPortMalloc>
    1e76:	ec 01       	movw	r28, r24
    1e78:	89 2b       	or	r24, r25
    1e7a:	a9 f0       	breq	.+42     	; 0x1ea6 <xTaskCreate+0x6c>
    1e7c:	78 8e       	std	Y+24, r7	; 0x18
    1e7e:	6f 8a       	std	Y+23, r6	; 0x17
    1e80:	a5 01       	movw	r20, r10
    1e82:	65 ea       	ldi	r22, 0xA5	; 165
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	c3 01       	movw	r24, r6
    1e88:	b5 d6       	rcall	.+3434   	; 0x2bf4 <memset>
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	a8 1a       	sub	r10, r24
    1e8e:	b1 08       	sbc	r11, r1
    1e90:	8f 89       	ldd	r24, Y+23	; 0x17
    1e92:	98 8d       	ldd	r25, Y+24	; 0x18
    1e94:	a8 0e       	add	r10, r24
    1e96:	b9 1e       	adc	r11, r25
    1e98:	d6 01       	movw	r26, r12
    1e9a:	8c 91       	ld	r24, X
    1e9c:	89 8f       	std	Y+25, r24	; 0x19
    1e9e:	8c 91       	ld	r24, X
    1ea0:	81 11       	cpse	r24, r1
    1ea2:	05 c0       	rjmp	.+10     	; 0x1eae <xTaskCreate+0x74>
    1ea4:	18 c0       	rjmp	.+48     	; 0x1ed6 <xTaskCreate+0x9c>
    1ea6:	c3 01       	movw	r24, r6
    1ea8:	0e 94 0b 02 	call	0x416	; 0x416 <vPortFree>
    1eac:	c9 c0       	rjmp	.+402    	; 0x2040 <xTaskCreate+0x206>
    1eae:	ae 01       	movw	r20, r28
    1eb0:	46 5e       	subi	r20, 0xE6	; 230
    1eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb4:	f6 01       	movw	r30, r12
    1eb6:	31 96       	adiw	r30, 0x01	; 1
    1eb8:	b8 e0       	ldi	r27, 0x08	; 8
    1eba:	cb 0e       	add	r12, r27
    1ebc:	d1 1c       	adc	r13, r1
    1ebe:	cf 01       	movw	r24, r30
    1ec0:	21 91       	ld	r18, Z+
    1ec2:	da 01       	movw	r26, r20
    1ec4:	2d 93       	st	X+, r18
    1ec6:	ad 01       	movw	r20, r26
    1ec8:	dc 01       	movw	r26, r24
    1eca:	8c 91       	ld	r24, X
    1ecc:	88 23       	and	r24, r24
    1ece:	19 f0       	breq	.+6      	; 0x1ed6 <xTaskCreate+0x9c>
    1ed0:	ec 15       	cp	r30, r12
    1ed2:	fd 05       	cpc	r31, r13
    1ed4:	a1 f7       	brne	.-24     	; 0x1ebe <xTaskCreate+0x84>
    1ed6:	18 a2       	std	Y+32, r1	; 0x20
    1ed8:	04 30       	cpi	r16, 0x04	; 4
    1eda:	08 f0       	brcs	.+2      	; 0x1ede <xTaskCreate+0xa4>
    1edc:	03 e0       	ldi	r16, 0x03	; 3
    1ede:	0e 8b       	std	Y+22, r16	; 0x16
    1ee0:	09 a3       	std	Y+33, r16	; 0x21
    1ee2:	1a a2       	std	Y+34, r1	; 0x22
    1ee4:	6e 01       	movw	r12, r28
    1ee6:	b2 e0       	ldi	r27, 0x02	; 2
    1ee8:	cb 0e       	add	r12, r27
    1eea:	d1 1c       	adc	r13, r1
    1eec:	c6 01       	movw	r24, r12
    1eee:	0e 94 48 03 	call	0x690	; 0x690 <vListInitialiseItem>
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	0c 96       	adiw	r24, 0x0c	; 12
    1ef6:	0e 94 48 03 	call	0x690	; 0x690 <vListInitialiseItem>
    1efa:	d9 87       	std	Y+9, r29	; 0x09
    1efc:	c8 87       	std	Y+8, r28	; 0x08
    1efe:	84 e0       	ldi	r24, 0x04	; 4
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	80 1b       	sub	r24, r16
    1f04:	91 09       	sbc	r25, r1
    1f06:	9d 87       	std	Y+13, r25	; 0x0d
    1f08:	8c 87       	std	Y+12, r24	; 0x0c
    1f0a:	db 8b       	std	Y+19, r29	; 0x13
    1f0c:	ca 8b       	std	Y+18, r28	; 0x12
    1f0e:	1b a2       	std	Y+35, r1	; 0x23
    1f10:	1c a2       	std	Y+36, r1	; 0x24
    1f12:	1d a2       	std	Y+37, r1	; 0x25
    1f14:	1e a2       	std	Y+38, r1	; 0x26
    1f16:	1f a2       	std	Y+39, r1	; 0x27
    1f18:	a2 01       	movw	r20, r4
    1f1a:	b4 01       	movw	r22, r8
    1f1c:	c5 01       	movw	r24, r10
    1f1e:	02 da       	rcall	.-3068   	; 0x1324 <pxPortInitialiseStack>
    1f20:	99 83       	std	Y+1, r25	; 0x01
    1f22:	88 83       	st	Y, r24
    1f24:	e1 14       	cp	r14, r1
    1f26:	f1 04       	cpc	r15, r1
    1f28:	19 f0       	breq	.+6      	; 0x1f30 <xTaskCreate+0xf6>
    1f2a:	f7 01       	movw	r30, r14
    1f2c:	d1 83       	std	Z+1, r29	; 0x01
    1f2e:	c0 83       	st	Z, r28
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	0f 92       	push	r0
    1f36:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <uxCurrentNumberOfTasks>
    1f3a:	8f 5f       	subi	r24, 0xFF	; 255
    1f3c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <uxCurrentNumberOfTasks>
    1f40:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <pxCurrentTCB>
    1f44:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    1f48:	89 2b       	or	r24, r25
    1f4a:	d1 f5       	brne	.+116    	; 0x1fc0 <xTaskCreate+0x186>
    1f4c:	d0 93 27 03 	sts	0x0327, r29	; 0x800327 <pxCurrentTCB+0x1>
    1f50:	c0 93 26 03 	sts	0x0326, r28	; 0x800326 <pxCurrentTCB>
    1f54:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <uxCurrentNumberOfTasks>
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <xTaskCreate+0x124>
    1f5c:	41 c0       	rjmp	.+130    	; 0x1fe0 <xTaskCreate+0x1a6>
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	93 e0       	ldi	r25, 0x03	; 3
    1f62:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    1f66:	8b e0       	ldi	r24, 0x0B	; 11
    1f68:	93 e0       	ldi	r25, 0x03	; 3
    1f6a:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    1f6e:	84 e1       	ldi	r24, 0x14	; 20
    1f70:	93 e0       	ldi	r25, 0x03	; 3
    1f72:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    1f76:	8d e1       	ldi	r24, 0x1D	; 29
    1f78:	93 e0       	ldi	r25, 0x03	; 3
    1f7a:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    1f7e:	89 ef       	ldi	r24, 0xF9	; 249
    1f80:	92 e0       	ldi	r25, 0x02	; 2
    1f82:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    1f86:	80 ef       	ldi	r24, 0xF0	; 240
    1f88:	92 e0       	ldi	r25, 0x02	; 2
    1f8a:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    1f8e:	83 ee       	ldi	r24, 0xE3	; 227
    1f90:	92 e0       	ldi	r25, 0x02	; 2
    1f92:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    1f96:	8a ed       	ldi	r24, 0xDA	; 218
    1f98:	92 e0       	ldi	r25, 0x02	; 2
    1f9a:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    1f9e:	80 ed       	ldi	r24, 0xD0	; 208
    1fa0:	92 e0       	ldi	r25, 0x02	; 2
    1fa2:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    1fa6:	89 ef       	ldi	r24, 0xF9	; 249
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <pxDelayedTaskList+0x1>
    1fae:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <pxDelayedTaskList>
    1fb2:	80 ef       	ldi	r24, 0xF0	; 240
    1fb4:	92 e0       	ldi	r25, 0x02	; 2
    1fb6:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <pxOverflowDelayedTaskList+0x1>
    1fba:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <pxOverflowDelayedTaskList>
    1fbe:	10 c0       	rjmp	.+32     	; 0x1fe0 <xTaskCreate+0x1a6>
    1fc0:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <xSchedulerRunning>
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	0c c0       	rjmp	.+24     	; 0x1fe0 <xTaskCreate+0x1a6>
    1fc8:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <pxCurrentTCB>
    1fcc:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    1fd0:	96 89       	ldd	r25, Z+22	; 0x16
    1fd2:	8e 89       	ldd	r24, Y+22	; 0x16
    1fd4:	89 17       	cp	r24, r25
    1fd6:	20 f0       	brcs	.+8      	; 0x1fe0 <xTaskCreate+0x1a6>
    1fd8:	d0 93 27 03 	sts	0x0327, r29	; 0x800327 <pxCurrentTCB+0x1>
    1fdc:	c0 93 26 03 	sts	0x0326, r28	; 0x800326 <pxCurrentTCB>
    1fe0:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <uxTaskNumber>
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <uxTaskNumber>
    1fea:	8e 89       	ldd	r24, Y+22	; 0x16
    1fec:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <uxTopReadyPriority>
    1ff0:	98 17       	cp	r25, r24
    1ff2:	10 f4       	brcc	.+4      	; 0x1ff8 <xTaskCreate+0x1be>
    1ff4:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <uxTopReadyPriority>
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9c 01       	movw	r18, r24
    1ffc:	22 0f       	add	r18, r18
    1ffe:	33 1f       	adc	r19, r19
    2000:	22 0f       	add	r18, r18
    2002:	33 1f       	adc	r19, r19
    2004:	22 0f       	add	r18, r18
    2006:	33 1f       	adc	r19, r19
    2008:	82 0f       	add	r24, r18
    200a:	93 1f       	adc	r25, r19
    200c:	b6 01       	movw	r22, r12
    200e:	8e 5f       	subi	r24, 0xFE	; 254
    2010:	9c 4f       	sbci	r25, 0xFC	; 252
    2012:	0e 94 4c 03 	call	0x698	; 0x698 <vListInsertEnd>
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <xSchedulerRunning>
    201e:	88 23       	and	r24, r24
    2020:	59 f0       	breq	.+22     	; 0x2038 <xTaskCreate+0x1fe>
    2022:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <pxCurrentTCB>
    2026:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    202a:	96 89       	ldd	r25, Z+22	; 0x16
    202c:	8e 89       	ldd	r24, Y+22	; 0x16
    202e:	98 17       	cp	r25, r24
    2030:	28 f4       	brcc	.+10     	; 0x203c <xTaskCreate+0x202>
    2032:	30 da       	rcall	.-2976   	; 0x1494 <vPortYield>
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <xTaskCreate+0x208>
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <xTaskCreate+0x208>
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	01 c0       	rjmp	.+2      	; 0x2042 <xTaskCreate+0x208>
    2040:	8f ef       	ldi	r24, 0xFF	; 255
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	0f 91       	pop	r16
    2048:	ff 90       	pop	r15
    204a:	ef 90       	pop	r14
    204c:	df 90       	pop	r13
    204e:	cf 90       	pop	r12
    2050:	bf 90       	pop	r11
    2052:	af 90       	pop	r10
    2054:	9f 90       	pop	r9
    2056:	8f 90       	pop	r8
    2058:	7f 90       	pop	r7
    205a:	6f 90       	pop	r6
    205c:	5f 90       	pop	r5
    205e:	4f 90       	pop	r4
    2060:	08 95       	ret

00002062 <vTaskStartScheduler>:
    2062:	ef 92       	push	r14
    2064:	ff 92       	push	r15
    2066:	0f 93       	push	r16
    2068:	0f 2e       	mov	r0, r31
    206a:	f3 ec       	ldi	r31, 0xC3	; 195
    206c:	ef 2e       	mov	r14, r31
    206e:	f2 e0       	ldi	r31, 0x02	; 2
    2070:	ff 2e       	mov	r15, r31
    2072:	f0 2d       	mov	r31, r0
    2074:	00 e0       	ldi	r16, 0x00	; 0
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	45 e5       	ldi	r20, 0x55	; 85
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	67 e9       	ldi	r22, 0x97	; 151
    2080:	72 e0       	ldi	r23, 0x02	; 2
    2082:	81 e8       	ldi	r24, 0x81	; 129
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	d9 de       	rcall	.-590    	; 0x1e3a <xTaskCreate>
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	79 f4       	brne	.+30     	; 0x20aa <vTaskStartScheduler+0x48>
    208c:	f8 94       	cli
    208e:	8f ef       	ldi	r24, 0xFF	; 255
    2090:	9f ef       	ldi	r25, 0xFF	; 255
    2092:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <xNextTaskUnblockTime+0x1>
    2096:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <xNextTaskUnblockTime>
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <xSchedulerRunning>
    20a0:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <xTickCount+0x1>
    20a4:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <xTickCount>
    20a8:	af d9       	rcall	.-3234   	; 0x1408 <xPortStartScheduler>
    20aa:	0f 91       	pop	r16
    20ac:	ff 90       	pop	r15
    20ae:	ef 90       	pop	r14
    20b0:	08 95       	ret

000020b2 <vTaskSuspendAll>:
    20b2:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <uxSchedulerSuspended>
    20b6:	8f 5f       	subi	r24, 0xFF	; 255
    20b8:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <uxSchedulerSuspended>
    20bc:	08 95       	ret

000020be <xTaskIncrementTick>:
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <uxSchedulerSuspended>
    20d2:	81 11       	cpse	r24, r1
    20d4:	98 c0       	rjmp	.+304    	; 0x2206 <__stack+0x7>
    20d6:	e0 90 cd 02 	lds	r14, 0x02CD	; 0x8002cd <xTickCount>
    20da:	f0 90 ce 02 	lds	r15, 0x02CE	; 0x8002ce <xTickCount+0x1>
    20de:	8f ef       	ldi	r24, 0xFF	; 255
    20e0:	e8 1a       	sub	r14, r24
    20e2:	f8 0a       	sbc	r15, r24
    20e4:	f0 92 ce 02 	sts	0x02CE, r15	; 0x8002ce <xTickCount+0x1>
    20e8:	e0 92 cd 02 	sts	0x02CD, r14	; 0x8002cd <xTickCount>
    20ec:	e1 14       	cp	r14, r1
    20ee:	f1 04       	cpc	r15, r1
    20f0:	b1 f4       	brne	.+44     	; 0x211e <xTaskIncrementTick+0x60>
    20f2:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <pxDelayedTaskList>
    20f6:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
    20fa:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <pxOverflowDelayedTaskList>
    20fe:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <pxOverflowDelayedTaskList+0x1>
    2102:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <pxDelayedTaskList+0x1>
    2106:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <pxDelayedTaskList>
    210a:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <pxOverflowDelayedTaskList+0x1>
    210e:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <pxOverflowDelayedTaskList>
    2112:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <xNumOfOverflows>
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <xNumOfOverflows>
    211c:	17 de       	rcall	.-978    	; 0x1d4c <prvResetNextTaskUnblockTime>
    211e:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <xNextTaskUnblockTime>
    2122:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <xNextTaskUnblockTime+0x1>
    2126:	e8 16       	cp	r14, r24
    2128:	f9 06       	cpc	r15, r25
    212a:	10 f4       	brcc	.+4      	; 0x2130 <xTaskIncrementTick+0x72>
    212c:	d1 2c       	mov	r13, r1
    212e:	53 c0       	rjmp	.+166    	; 0x21d6 <xTaskIncrementTick+0x118>
    2130:	d1 2c       	mov	r13, r1
    2132:	cc 24       	eor	r12, r12
    2134:	c3 94       	inc	r12
    2136:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxDelayedTaskList>
    213a:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
    213e:	80 81       	ld	r24, Z
    2140:	81 11       	cpse	r24, r1
    2142:	07 c0       	rjmp	.+14     	; 0x2152 <xTaskIncrementTick+0x94>
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	9f ef       	ldi	r25, 0xFF	; 255
    2148:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <xNextTaskUnblockTime+0x1>
    214c:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <xNextTaskUnblockTime>
    2150:	42 c0       	rjmp	.+132    	; 0x21d6 <xTaskIncrementTick+0x118>
    2152:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxDelayedTaskList>
    2156:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxDelayedTaskList+0x1>
    215a:	05 80       	ldd	r0, Z+5	; 0x05
    215c:	f6 81       	ldd	r31, Z+6	; 0x06
    215e:	e0 2d       	mov	r30, r0
    2160:	c6 81       	ldd	r28, Z+6	; 0x06
    2162:	d7 81       	ldd	r29, Z+7	; 0x07
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	9b 81       	ldd	r25, Y+3	; 0x03
    2168:	e8 16       	cp	r14, r24
    216a:	f9 06       	cpc	r15, r25
    216c:	28 f4       	brcc	.+10     	; 0x2178 <xTaskIncrementTick+0xba>
    216e:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <xNextTaskUnblockTime+0x1>
    2172:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <xNextTaskUnblockTime>
    2176:	2f c0       	rjmp	.+94     	; 0x21d6 <xTaskIncrementTick+0x118>
    2178:	8e 01       	movw	r16, r28
    217a:	0e 5f       	subi	r16, 0xFE	; 254
    217c:	1f 4f       	sbci	r17, 0xFF	; 255
    217e:	c8 01       	movw	r24, r16
    2180:	0e 94 9e 03 	call	0x73c	; 0x73c <uxListRemove>
    2184:	8c 89       	ldd	r24, Y+20	; 0x14
    2186:	9d 89       	ldd	r25, Y+21	; 0x15
    2188:	89 2b       	or	r24, r25
    218a:	21 f0       	breq	.+8      	; 0x2194 <xTaskIncrementTick+0xd6>
    218c:	ce 01       	movw	r24, r28
    218e:	0c 96       	adiw	r24, 0x0c	; 12
    2190:	0e 94 9e 03 	call	0x73c	; 0x73c <uxListRemove>
    2194:	8e 89       	ldd	r24, Y+22	; 0x16
    2196:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <uxTopReadyPriority>
    219a:	98 17       	cp	r25, r24
    219c:	10 f4       	brcc	.+4      	; 0x21a2 <xTaskIncrementTick+0xe4>
    219e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <uxTopReadyPriority>
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9c 01       	movw	r18, r24
    21a6:	22 0f       	add	r18, r18
    21a8:	33 1f       	adc	r19, r19
    21aa:	22 0f       	add	r18, r18
    21ac:	33 1f       	adc	r19, r19
    21ae:	22 0f       	add	r18, r18
    21b0:	33 1f       	adc	r19, r19
    21b2:	82 0f       	add	r24, r18
    21b4:	93 1f       	adc	r25, r19
    21b6:	b8 01       	movw	r22, r16
    21b8:	8e 5f       	subi	r24, 0xFE	; 254
    21ba:	9c 4f       	sbci	r25, 0xFC	; 252
    21bc:	0e 94 4c 03 	call	0x698	; 0x698 <vListInsertEnd>
    21c0:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <pxCurrentTCB>
    21c4:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    21c8:	9e 89       	ldd	r25, Y+22	; 0x16
    21ca:	86 89       	ldd	r24, Z+22	; 0x16
    21cc:	98 17       	cp	r25, r24
    21ce:	08 f4       	brcc	.+2      	; 0x21d2 <xTaskIncrementTick+0x114>
    21d0:	b2 cf       	rjmp	.-156    	; 0x2136 <xTaskIncrementTick+0x78>
    21d2:	dc 2c       	mov	r13, r12
    21d4:	b0 cf       	rjmp	.-160    	; 0x2136 <xTaskIncrementTick+0x78>
    21d6:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <pxCurrentTCB>
    21da:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    21de:	86 89       	ldd	r24, Z+22	; 0x16
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	fc 01       	movw	r30, r24
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	ee 0f       	add	r30, r30
    21ea:	ff 1f       	adc	r31, r31
    21ec:	ee 0f       	add	r30, r30
    21ee:	ff 1f       	adc	r31, r31
    21f0:	8e 0f       	add	r24, r30
    21f2:	9f 1f       	adc	r25, r31
    21f4:	fc 01       	movw	r30, r24
    21f6:	ee 5f       	subi	r30, 0xFE	; 254
    21f8:	fc 4f       	sbci	r31, 0xFC	; 252
    21fa:	80 81       	ld	r24, Z
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	48 f0       	brcs	.+18     	; 0x2212 <__stack+0x13>
    2200:	dd 24       	eor	r13, r13
    2202:	d3 94       	inc	r13
    2204:	06 c0       	rjmp	.+12     	; 0x2212 <__stack+0x13>
    2206:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <uxPendedTicks>
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <uxPendedTicks>
    2210:	d1 2c       	mov	r13, r1
    2212:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <xYieldPending>
    2216:	88 23       	and	r24, r24
    2218:	11 f0       	breq	.+4      	; 0x221e <__stack+0x1f>
    221a:	dd 24       	eor	r13, r13
    221c:	d3 94       	inc	r13
    221e:	8d 2d       	mov	r24, r13
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	df 90       	pop	r13
    222e:	cf 90       	pop	r12
    2230:	08 95       	ret

00002232 <xTaskResumeAll>:
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	0f 92       	push	r0
    2246:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <uxSchedulerSuspended>
    224a:	81 50       	subi	r24, 0x01	; 1
    224c:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <uxSchedulerSuspended>
    2250:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <uxSchedulerSuspended>
    2254:	81 11       	cpse	r24, r1
    2256:	5c c0       	rjmp	.+184    	; 0x2310 <xTaskResumeAll+0xde>
    2258:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <uxCurrentNumberOfTasks>
    225c:	81 11       	cpse	r24, r1
    225e:	33 c0       	rjmp	.+102    	; 0x22c6 <xTaskResumeAll+0x94>
    2260:	5a c0       	rjmp	.+180    	; 0x2316 <xTaskResumeAll+0xe4>
    2262:	d7 01       	movw	r26, r14
    2264:	15 96       	adiw	r26, 0x05	; 5
    2266:	ed 91       	ld	r30, X+
    2268:	fc 91       	ld	r31, X
    226a:	16 97       	sbiw	r26, 0x06	; 6
    226c:	c6 81       	ldd	r28, Z+6	; 0x06
    226e:	d7 81       	ldd	r29, Z+7	; 0x07
    2270:	ce 01       	movw	r24, r28
    2272:	0c 96       	adiw	r24, 0x0c	; 12
    2274:	0e 94 9e 03 	call	0x73c	; 0x73c <uxListRemove>
    2278:	8e 01       	movw	r16, r28
    227a:	0e 5f       	subi	r16, 0xFE	; 254
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	c8 01       	movw	r24, r16
    2280:	0e 94 9e 03 	call	0x73c	; 0x73c <uxListRemove>
    2284:	8e 89       	ldd	r24, Y+22	; 0x16
    2286:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <uxTopReadyPriority>
    228a:	98 17       	cp	r25, r24
    228c:	10 f4       	brcc	.+4      	; 0x2292 <xTaskResumeAll+0x60>
    228e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <uxTopReadyPriority>
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9c 01       	movw	r18, r24
    2296:	22 0f       	add	r18, r18
    2298:	33 1f       	adc	r19, r19
    229a:	22 0f       	add	r18, r18
    229c:	33 1f       	adc	r19, r19
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	82 0f       	add	r24, r18
    22a4:	93 1f       	adc	r25, r19
    22a6:	b8 01       	movw	r22, r16
    22a8:	8e 5f       	subi	r24, 0xFE	; 254
    22aa:	9c 4f       	sbci	r25, 0xFC	; 252
    22ac:	0e 94 4c 03 	call	0x698	; 0x698 <vListInsertEnd>
    22b0:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <pxCurrentTCB>
    22b4:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    22b8:	9e 89       	ldd	r25, Y+22	; 0x16
    22ba:	86 89       	ldd	r24, Z+22	; 0x16
    22bc:	98 17       	cp	r25, r24
    22be:	68 f0       	brcs	.+26     	; 0x22da <xTaskResumeAll+0xa8>
    22c0:	d0 92 c9 02 	sts	0x02C9, r13	; 0x8002c9 <xYieldPending>
    22c4:	0a c0       	rjmp	.+20     	; 0x22da <xTaskResumeAll+0xa8>
    22c6:	c0 e0       	ldi	r28, 0x00	; 0
    22c8:	d0 e0       	ldi	r29, 0x00	; 0
    22ca:	0f 2e       	mov	r0, r31
    22cc:	f3 ee       	ldi	r31, 0xE3	; 227
    22ce:	ef 2e       	mov	r14, r31
    22d0:	f2 e0       	ldi	r31, 0x02	; 2
    22d2:	ff 2e       	mov	r15, r31
    22d4:	f0 2d       	mov	r31, r0
    22d6:	dd 24       	eor	r13, r13
    22d8:	d3 94       	inc	r13
    22da:	f7 01       	movw	r30, r14
    22dc:	80 81       	ld	r24, Z
    22de:	81 11       	cpse	r24, r1
    22e0:	c0 cf       	rjmp	.-128    	; 0x2262 <xTaskResumeAll+0x30>
    22e2:	cd 2b       	or	r28, r29
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <xTaskResumeAll+0xb6>
    22e6:	32 dd       	rcall	.-1436   	; 0x1d4c <prvResetNextTaskUnblockTime>
    22e8:	c0 91 ca 02 	lds	r28, 0x02CA	; 0x8002ca <uxPendedTicks>
    22ec:	cc 23       	and	r28, r28
    22ee:	49 f0       	breq	.+18     	; 0x2302 <xTaskResumeAll+0xd0>
    22f0:	d1 e0       	ldi	r29, 0x01	; 1
    22f2:	e5 de       	rcall	.-566    	; 0x20be <xTaskIncrementTick>
    22f4:	81 11       	cpse	r24, r1
    22f6:	d0 93 c9 02 	sts	0x02C9, r29	; 0x8002c9 <xYieldPending>
    22fa:	c1 50       	subi	r28, 0x01	; 1
    22fc:	d1 f7       	brne	.-12     	; 0x22f2 <xTaskResumeAll+0xc0>
    22fe:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <uxPendedTicks>
    2302:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <xYieldPending>
    2306:	88 23       	and	r24, r24
    2308:	29 f0       	breq	.+10     	; 0x2314 <xTaskResumeAll+0xe2>
    230a:	c4 d8       	rcall	.-3704   	; 0x1494 <vPortYield>
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	03 c0       	rjmp	.+6      	; 0x2316 <xTaskResumeAll+0xe4>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	01 c0       	rjmp	.+2      	; 0x2316 <xTaskResumeAll+0xe4>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	ff 90       	pop	r15
    2324:	ef 90       	pop	r14
    2326:	df 90       	pop	r13
    2328:	08 95       	ret

0000232a <vTaskDelay>:
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	ec 01       	movw	r28, r24
    2330:	89 2b       	or	r24, r25
    2332:	39 f0       	breq	.+14     	; 0x2342 <vTaskDelay+0x18>
    2334:	be de       	rcall	.-644    	; 0x20b2 <vTaskSuspendAll>
    2336:	60 e0       	ldi	r22, 0x00	; 0
    2338:	ce 01       	movw	r24, r28
    233a:	27 dd       	rcall	.-1458   	; 0x1d8a <prvAddCurrentTaskToDelayedList>
    233c:	7a df       	rcall	.-268    	; 0x2232 <xTaskResumeAll>
    233e:	81 11       	cpse	r24, r1
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <vTaskDelay+0x1a>
    2342:	a8 d8       	rcall	.-3760   	; 0x1494 <vPortYield>
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <vTaskSwitchContext>:
    234a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <uxSchedulerSuspended>
    234e:	88 23       	and	r24, r24
    2350:	21 f0       	breq	.+8      	; 0x235a <vTaskSwitchContext+0x10>
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xYieldPending>
    2358:	08 95       	ret
    235a:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <xYieldPending>
    235e:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <pxCurrentTCB>
    2362:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    2366:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <pxCurrentTCB>
    236a:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    236e:	2d 91       	ld	r18, X+
    2370:	3c 91       	ld	r19, X
    2372:	87 89       	ldd	r24, Z+23	; 0x17
    2374:	90 8d       	ldd	r25, Z+24	; 0x18
    2376:	82 17       	cp	r24, r18
    2378:	93 07       	cpc	r25, r19
    237a:	60 f0       	brcs	.+24     	; 0x2394 <vTaskSwitchContext+0x4a>
    237c:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <pxCurrentTCB>
    2380:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    2384:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <pxCurrentTCB>
    2388:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    238c:	67 5e       	subi	r22, 0xE7	; 231
    238e:	7f 4f       	sbci	r23, 0xFF	; 255
    2390:	0e 94 3d 02 	call	0x47a	; 0x47a <vApplicationStackOverflowHook>
    2394:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <uxTopReadyPriority>
    2398:	82 2f       	mov	r24, r18
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	fc 01       	movw	r30, r24
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	ee 0f       	add	r30, r30
    23a4:	ff 1f       	adc	r31, r31
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	e8 0f       	add	r30, r24
    23ac:	f9 1f       	adc	r31, r25
    23ae:	ee 5f       	subi	r30, 0xFE	; 254
    23b0:	fc 4f       	sbci	r31, 0xFC	; 252
    23b2:	30 81       	ld	r19, Z
    23b4:	31 11       	cpse	r19, r1
    23b6:	11 c0       	rjmp	.+34     	; 0x23da <vTaskSwitchContext+0x90>
    23b8:	21 50       	subi	r18, 0x01	; 1
    23ba:	82 2f       	mov	r24, r18
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	fc 01       	movw	r30, r24
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	ee 0f       	add	r30, r30
    23c6:	ff 1f       	adc	r31, r31
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
    23cc:	e8 0f       	add	r30, r24
    23ce:	f9 1f       	adc	r31, r25
    23d0:	ee 5f       	subi	r30, 0xFE	; 254
    23d2:	fc 4f       	sbci	r31, 0xFC	; 252
    23d4:	30 81       	ld	r19, Z
    23d6:	33 23       	and	r19, r19
    23d8:	79 f3       	breq	.-34     	; 0x23b8 <vTaskSwitchContext+0x6e>
    23da:	ac 01       	movw	r20, r24
    23dc:	44 0f       	add	r20, r20
    23de:	55 1f       	adc	r21, r21
    23e0:	44 0f       	add	r20, r20
    23e2:	55 1f       	adc	r21, r21
    23e4:	44 0f       	add	r20, r20
    23e6:	55 1f       	adc	r21, r21
    23e8:	48 0f       	add	r20, r24
    23ea:	59 1f       	adc	r21, r25
    23ec:	da 01       	movw	r26, r20
    23ee:	ae 5f       	subi	r26, 0xFE	; 254
    23f0:	bc 4f       	sbci	r27, 0xFC	; 252
    23f2:	11 96       	adiw	r26, 0x01	; 1
    23f4:	ed 91       	ld	r30, X+
    23f6:	fc 91       	ld	r31, X
    23f8:	12 97       	sbiw	r26, 0x02	; 2
    23fa:	02 80       	ldd	r0, Z+2	; 0x02
    23fc:	f3 81       	ldd	r31, Z+3	; 0x03
    23fe:	e0 2d       	mov	r30, r0
    2400:	12 96       	adiw	r26, 0x02	; 2
    2402:	fc 93       	st	X, r31
    2404:	ee 93       	st	-X, r30
    2406:	11 97       	sbiw	r26, 0x01	; 1
    2408:	4b 5f       	subi	r20, 0xFB	; 251
    240a:	5c 4f       	sbci	r21, 0xFC	; 252
    240c:	e4 17       	cp	r30, r20
    240e:	f5 07       	cpc	r31, r21
    2410:	29 f4       	brne	.+10     	; 0x241c <vTaskSwitchContext+0xd2>
    2412:	42 81       	ldd	r20, Z+2	; 0x02
    2414:	53 81       	ldd	r21, Z+3	; 0x03
    2416:	fd 01       	movw	r30, r26
    2418:	52 83       	std	Z+2, r21	; 0x02
    241a:	41 83       	std	Z+1, r20	; 0x01
    241c:	fc 01       	movw	r30, r24
    241e:	ee 0f       	add	r30, r30
    2420:	ff 1f       	adc	r31, r31
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	ee 0f       	add	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	8e 0f       	add	r24, r30
    242c:	9f 1f       	adc	r25, r31
    242e:	fc 01       	movw	r30, r24
    2430:	ee 5f       	subi	r30, 0xFE	; 254
    2432:	fc 4f       	sbci	r31, 0xFC	; 252
    2434:	01 80       	ldd	r0, Z+1	; 0x01
    2436:	f2 81       	ldd	r31, Z+2	; 0x02
    2438:	e0 2d       	mov	r30, r0
    243a:	86 81       	ldd	r24, Z+6	; 0x06
    243c:	97 81       	ldd	r25, Z+7	; 0x07
    243e:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <pxCurrentTCB+0x1>
    2442:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <pxCurrentTCB>
    2446:	20 93 cc 02 	sts	0x02CC, r18	; 0x8002cc <uxTopReadyPriority>
    244a:	08 95       	ret

0000244c <vTaskPlaceOnEventList>:
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	eb 01       	movw	r28, r22
    2452:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <pxCurrentTCB>
    2456:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    245a:	64 5f       	subi	r22, 0xF4	; 244
    245c:	7f 4f       	sbci	r23, 0xFF	; 255
    245e:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInsert>
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	ce 01       	movw	r24, r28
    2466:	91 dc       	rcall	.-1758   	; 0x1d8a <prvAddCurrentTaskToDelayedList>
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	08 95       	ret

0000246e <xTaskRemoveFromEventList>:
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	dc 01       	movw	r26, r24
    2478:	15 96       	adiw	r26, 0x05	; 5
    247a:	ed 91       	ld	r30, X+
    247c:	fc 91       	ld	r31, X
    247e:	16 97       	sbiw	r26, 0x06	; 6
    2480:	c6 81       	ldd	r28, Z+6	; 0x06
    2482:	d7 81       	ldd	r29, Z+7	; 0x07
    2484:	8e 01       	movw	r16, r28
    2486:	04 5f       	subi	r16, 0xF4	; 244
    2488:	1f 4f       	sbci	r17, 0xFF	; 255
    248a:	c8 01       	movw	r24, r16
    248c:	0e 94 9e 03 	call	0x73c	; 0x73c <uxListRemove>
    2490:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <uxSchedulerSuspended>
    2494:	81 11       	cpse	r24, r1
    2496:	1c c0       	rjmp	.+56     	; 0x24d0 <xTaskRemoveFromEventList+0x62>
    2498:	0a 50       	subi	r16, 0x0A	; 10
    249a:	11 09       	sbc	r17, r1
    249c:	c8 01       	movw	r24, r16
    249e:	0e 94 9e 03 	call	0x73c	; 0x73c <uxListRemove>
    24a2:	8e 89       	ldd	r24, Y+22	; 0x16
    24a4:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <uxTopReadyPriority>
    24a8:	98 17       	cp	r25, r24
    24aa:	10 f4       	brcc	.+4      	; 0x24b0 <xTaskRemoveFromEventList+0x42>
    24ac:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <uxTopReadyPriority>
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9c 01       	movw	r18, r24
    24b4:	22 0f       	add	r18, r18
    24b6:	33 1f       	adc	r19, r19
    24b8:	22 0f       	add	r18, r18
    24ba:	33 1f       	adc	r19, r19
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	82 0f       	add	r24, r18
    24c2:	93 1f       	adc	r25, r19
    24c4:	b8 01       	movw	r22, r16
    24c6:	8e 5f       	subi	r24, 0xFE	; 254
    24c8:	9c 4f       	sbci	r25, 0xFC	; 252
    24ca:	0e 94 4c 03 	call	0x698	; 0x698 <vListInsertEnd>
    24ce:	05 c0       	rjmp	.+10     	; 0x24da <xTaskRemoveFromEventList+0x6c>
    24d0:	b8 01       	movw	r22, r16
    24d2:	83 ee       	ldi	r24, 0xE3	; 227
    24d4:	92 e0       	ldi	r25, 0x02	; 2
    24d6:	0e 94 4c 03 	call	0x698	; 0x698 <vListInsertEnd>
    24da:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <pxCurrentTCB>
    24de:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <pxCurrentTCB+0x1>
    24e2:	9e 89       	ldd	r25, Y+22	; 0x16
    24e4:	86 89       	ldd	r24, Z+22	; 0x16
    24e6:	89 17       	cp	r24, r25
    24e8:	20 f4       	brcc	.+8      	; 0x24f2 <xTaskRemoveFromEventList+0x84>
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xYieldPending>
    24f0:	01 c0       	rjmp	.+2      	; 0x24f4 <xTaskRemoveFromEventList+0x86>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	0f 91       	pop	r16
    24fc:	08 95       	ret

000024fe <vTaskSetTimeOutState>:
    24fe:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <xNumOfOverflows>
    2502:	fc 01       	movw	r30, r24
    2504:	20 83       	st	Z, r18
    2506:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <xTickCount>
    250a:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <xTickCount+0x1>
    250e:	32 83       	std	Z+2, r19	; 0x02
    2510:	21 83       	std	Z+1, r18	; 0x01
    2512:	08 95       	ret

00002514 <xTaskCheckForTimeOut>:
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	0f 92       	push	r0
    251a:	40 91 cd 02 	lds	r20, 0x02CD	; 0x8002cd <xTickCount>
    251e:	50 91 ce 02 	lds	r21, 0x02CE	; 0x8002ce <xTickCount+0x1>
    2522:	db 01       	movw	r26, r22
    2524:	2d 91       	ld	r18, X+
    2526:	3c 91       	ld	r19, X
    2528:	2f 3f       	cpi	r18, 0xFF	; 255
    252a:	bf ef       	ldi	r27, 0xFF	; 255
    252c:	3b 07       	cpc	r19, r27
    252e:	11 f1       	breq	.+68     	; 0x2574 <xTaskCheckForTimeOut+0x60>
    2530:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <xNumOfOverflows>
    2534:	dc 01       	movw	r26, r24
    2536:	fc 91       	ld	r31, X
    2538:	fe 17       	cp	r31, r30
    253a:	39 f0       	breq	.+14     	; 0x254a <xTaskCheckForTimeOut+0x36>
    253c:	11 96       	adiw	r26, 0x01	; 1
    253e:	ed 91       	ld	r30, X+
    2540:	fc 91       	ld	r31, X
    2542:	12 97       	sbiw	r26, 0x02	; 2
    2544:	4e 17       	cp	r20, r30
    2546:	5f 07       	cpc	r21, r31
    2548:	b8 f4       	brcc	.+46     	; 0x2578 <xTaskCheckForTimeOut+0x64>
    254a:	dc 01       	movw	r26, r24
    254c:	11 96       	adiw	r26, 0x01	; 1
    254e:	ed 91       	ld	r30, X+
    2550:	fc 91       	ld	r31, X
    2552:	12 97       	sbiw	r26, 0x02	; 2
    2554:	da 01       	movw	r26, r20
    2556:	ae 1b       	sub	r26, r30
    2558:	bf 0b       	sbc	r27, r31
    255a:	a2 17       	cp	r26, r18
    255c:	b3 07       	cpc	r27, r19
    255e:	70 f4       	brcc	.+28     	; 0x257c <xTaskCheckForTimeOut+0x68>
    2560:	db 01       	movw	r26, r22
    2562:	e4 1b       	sub	r30, r20
    2564:	f5 0b       	sbc	r31, r21
    2566:	2e 0f       	add	r18, r30
    2568:	3f 1f       	adc	r19, r31
    256a:	2d 93       	st	X+, r18
    256c:	3c 93       	st	X, r19
    256e:	c7 df       	rcall	.-114    	; 0x24fe <vTaskSetTimeOutState>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	05 c0       	rjmp	.+10     	; 0x257e <xTaskCheckForTimeOut+0x6a>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	03 c0       	rjmp	.+6      	; 0x257e <xTaskCheckForTimeOut+0x6a>
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	01 c0       	rjmp	.+2      	; 0x257e <xTaskCheckForTimeOut+0x6a>
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	0f 90       	pop	r0
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	08 95       	ret

00002584 <vTaskMissedYield>:
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xYieldPending>
    258a:	08 95       	ret

0000258c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	fc 01       	movw	r30, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    2596:	89 2b       	or	r24, r25
    2598:	79 f1       	breq	.+94     	; 0x25f8 <xTaskPriorityDisinherit+0x6c>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    259a:	82 a1       	ldd	r24, Z+34	; 0x22
    259c:	81 50       	subi	r24, 0x01	; 1
    259e:	82 a3       	std	Z+34, r24	; 0x22

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    25a0:	26 89       	ldd	r18, Z+22	; 0x16
    25a2:	91 a1       	ldd	r25, Z+33	; 0x21
    25a4:	29 17       	cp	r18, r25
    25a6:	51 f1       	breq	.+84     	; 0x25fc <xTaskPriorityDisinherit+0x70>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    25a8:	81 11       	cpse	r24, r1
    25aa:	2a c0       	rjmp	.+84     	; 0x2600 <xTaskPriorityDisinherit+0x74>
    25ac:	ef 01       	movw	r28, r30
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    25ae:	8f 01       	movw	r16, r30
    25b0:	0e 5f       	subi	r16, 0xFE	; 254
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	c8 01       	movw	r24, r16
    25b6:	0e 94 9e 03 	call	0x73c	; 0x73c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    25ba:	89 a1       	ldd	r24, Y+33	; 0x21
    25bc:	8e 8b       	std	Y+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25be:	24 e0       	ldi	r18, 0x04	; 4
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	28 1b       	sub	r18, r24
    25c4:	31 09       	sbc	r19, r1
    25c6:	3d 87       	std	Y+13, r19	; 0x0d
    25c8:	2c 87       	std	Y+12, r18	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    25ca:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <uxTopReadyPriority>
    25ce:	98 17       	cp	r25, r24
    25d0:	10 f4       	brcc	.+4      	; 0x25d6 <xTaskPriorityDisinherit+0x4a>
    25d2:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <uxTopReadyPriority>
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9c 01       	movw	r18, r24
    25da:	22 0f       	add	r18, r18
    25dc:	33 1f       	adc	r19, r19
    25de:	22 0f       	add	r18, r18
    25e0:	33 1f       	adc	r19, r19
    25e2:	22 0f       	add	r18, r18
    25e4:	33 1f       	adc	r19, r19
    25e6:	82 0f       	add	r24, r18
    25e8:	93 1f       	adc	r25, r19
    25ea:	b8 01       	movw	r22, r16
    25ec:	8e 5f       	subi	r24, 0xFE	; 254
    25ee:	9c 4f       	sbci	r25, 0xFC	; 252
    25f0:	0e 94 4c 03 	call	0x698	; 0x698 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	03 c0       	rjmp	.+6      	; 0x2602 <xTaskPriorityDisinherit+0x76>
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	01 c0       	rjmp	.+2      	; 0x2602 <xTaskPriorityDisinherit+0x76>
    2600:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	08 95       	ret

0000260c <__subsf3>:
    260c:	50 58       	subi	r21, 0x80	; 128

0000260e <__addsf3>:
    260e:	bb 27       	eor	r27, r27
    2610:	aa 27       	eor	r26, r26
    2612:	0e d0       	rcall	.+28     	; 0x2630 <__addsf3x>
    2614:	e5 c0       	rjmp	.+458    	; 0x27e0 <__fp_round>
    2616:	d6 d0       	rcall	.+428    	; 0x27c4 <__fp_pscA>
    2618:	30 f0       	brcs	.+12     	; 0x2626 <__addsf3+0x18>
    261a:	db d0       	rcall	.+438    	; 0x27d2 <__fp_pscB>
    261c:	20 f0       	brcs	.+8      	; 0x2626 <__addsf3+0x18>
    261e:	31 f4       	brne	.+12     	; 0x262c <__addsf3+0x1e>
    2620:	9f 3f       	cpi	r25, 0xFF	; 255
    2622:	11 f4       	brne	.+4      	; 0x2628 <__addsf3+0x1a>
    2624:	1e f4       	brtc	.+6      	; 0x262c <__addsf3+0x1e>
    2626:	cb c0       	rjmp	.+406    	; 0x27be <__fp_nan>
    2628:	0e f4       	brtc	.+2      	; 0x262c <__addsf3+0x1e>
    262a:	e0 95       	com	r30
    262c:	e7 fb       	bst	r30, 7
    262e:	c1 c0       	rjmp	.+386    	; 0x27b2 <__fp_inf>

00002630 <__addsf3x>:
    2630:	e9 2f       	mov	r30, r25
    2632:	e7 d0       	rcall	.+462    	; 0x2802 <__fp_split3>
    2634:	80 f3       	brcs	.-32     	; 0x2616 <__addsf3+0x8>
    2636:	ba 17       	cp	r27, r26
    2638:	62 07       	cpc	r22, r18
    263a:	73 07       	cpc	r23, r19
    263c:	84 07       	cpc	r24, r20
    263e:	95 07       	cpc	r25, r21
    2640:	18 f0       	brcs	.+6      	; 0x2648 <__addsf3x+0x18>
    2642:	71 f4       	brne	.+28     	; 0x2660 <__addsf3x+0x30>
    2644:	9e f5       	brtc	.+102    	; 0x26ac <__addsf3x+0x7c>
    2646:	ff c0       	rjmp	.+510    	; 0x2846 <__fp_zero>
    2648:	0e f4       	brtc	.+2      	; 0x264c <__addsf3x+0x1c>
    264a:	e0 95       	com	r30
    264c:	0b 2e       	mov	r0, r27
    264e:	ba 2f       	mov	r27, r26
    2650:	a0 2d       	mov	r26, r0
    2652:	0b 01       	movw	r0, r22
    2654:	b9 01       	movw	r22, r18
    2656:	90 01       	movw	r18, r0
    2658:	0c 01       	movw	r0, r24
    265a:	ca 01       	movw	r24, r20
    265c:	a0 01       	movw	r20, r0
    265e:	11 24       	eor	r1, r1
    2660:	ff 27       	eor	r31, r31
    2662:	59 1b       	sub	r21, r25
    2664:	99 f0       	breq	.+38     	; 0x268c <__addsf3x+0x5c>
    2666:	59 3f       	cpi	r21, 0xF9	; 249
    2668:	50 f4       	brcc	.+20     	; 0x267e <__addsf3x+0x4e>
    266a:	50 3e       	cpi	r21, 0xE0	; 224
    266c:	68 f1       	brcs	.+90     	; 0x26c8 <__addsf3x+0x98>
    266e:	1a 16       	cp	r1, r26
    2670:	f0 40       	sbci	r31, 0x00	; 0
    2672:	a2 2f       	mov	r26, r18
    2674:	23 2f       	mov	r18, r19
    2676:	34 2f       	mov	r19, r20
    2678:	44 27       	eor	r20, r20
    267a:	58 5f       	subi	r21, 0xF8	; 248
    267c:	f3 cf       	rjmp	.-26     	; 0x2664 <__addsf3x+0x34>
    267e:	46 95       	lsr	r20
    2680:	37 95       	ror	r19
    2682:	27 95       	ror	r18
    2684:	a7 95       	ror	r26
    2686:	f0 40       	sbci	r31, 0x00	; 0
    2688:	53 95       	inc	r21
    268a:	c9 f7       	brne	.-14     	; 0x267e <__addsf3x+0x4e>
    268c:	7e f4       	brtc	.+30     	; 0x26ac <__addsf3x+0x7c>
    268e:	1f 16       	cp	r1, r31
    2690:	ba 0b       	sbc	r27, r26
    2692:	62 0b       	sbc	r22, r18
    2694:	73 0b       	sbc	r23, r19
    2696:	84 0b       	sbc	r24, r20
    2698:	ba f0       	brmi	.+46     	; 0x26c8 <__addsf3x+0x98>
    269a:	91 50       	subi	r25, 0x01	; 1
    269c:	a1 f0       	breq	.+40     	; 0x26c6 <__addsf3x+0x96>
    269e:	ff 0f       	add	r31, r31
    26a0:	bb 1f       	adc	r27, r27
    26a2:	66 1f       	adc	r22, r22
    26a4:	77 1f       	adc	r23, r23
    26a6:	88 1f       	adc	r24, r24
    26a8:	c2 f7       	brpl	.-16     	; 0x269a <__addsf3x+0x6a>
    26aa:	0e c0       	rjmp	.+28     	; 0x26c8 <__addsf3x+0x98>
    26ac:	ba 0f       	add	r27, r26
    26ae:	62 1f       	adc	r22, r18
    26b0:	73 1f       	adc	r23, r19
    26b2:	84 1f       	adc	r24, r20
    26b4:	48 f4       	brcc	.+18     	; 0x26c8 <__addsf3x+0x98>
    26b6:	87 95       	ror	r24
    26b8:	77 95       	ror	r23
    26ba:	67 95       	ror	r22
    26bc:	b7 95       	ror	r27
    26be:	f7 95       	ror	r31
    26c0:	9e 3f       	cpi	r25, 0xFE	; 254
    26c2:	08 f0       	brcs	.+2      	; 0x26c6 <__addsf3x+0x96>
    26c4:	b3 cf       	rjmp	.-154    	; 0x262c <__addsf3+0x1e>
    26c6:	93 95       	inc	r25
    26c8:	88 0f       	add	r24, r24
    26ca:	08 f0       	brcs	.+2      	; 0x26ce <__addsf3x+0x9e>
    26cc:	99 27       	eor	r25, r25
    26ce:	ee 0f       	add	r30, r30
    26d0:	97 95       	ror	r25
    26d2:	87 95       	ror	r24
    26d4:	08 95       	ret

000026d6 <__fixsfsi>:
    26d6:	04 d0       	rcall	.+8      	; 0x26e0 <__fixunssfsi>
    26d8:	68 94       	set
    26da:	b1 11       	cpse	r27, r1
    26dc:	b5 c0       	rjmp	.+362    	; 0x2848 <__fp_szero>
    26de:	08 95       	ret

000026e0 <__fixunssfsi>:
    26e0:	98 d0       	rcall	.+304    	; 0x2812 <__fp_splitA>
    26e2:	88 f0       	brcs	.+34     	; 0x2706 <__fixunssfsi+0x26>
    26e4:	9f 57       	subi	r25, 0x7F	; 127
    26e6:	90 f0       	brcs	.+36     	; 0x270c <__fixunssfsi+0x2c>
    26e8:	b9 2f       	mov	r27, r25
    26ea:	99 27       	eor	r25, r25
    26ec:	b7 51       	subi	r27, 0x17	; 23
    26ee:	a0 f0       	brcs	.+40     	; 0x2718 <__fixunssfsi+0x38>
    26f0:	d1 f0       	breq	.+52     	; 0x2726 <__fixunssfsi+0x46>
    26f2:	66 0f       	add	r22, r22
    26f4:	77 1f       	adc	r23, r23
    26f6:	88 1f       	adc	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	1a f0       	brmi	.+6      	; 0x2702 <__fixunssfsi+0x22>
    26fc:	ba 95       	dec	r27
    26fe:	c9 f7       	brne	.-14     	; 0x26f2 <__fixunssfsi+0x12>
    2700:	12 c0       	rjmp	.+36     	; 0x2726 <__fixunssfsi+0x46>
    2702:	b1 30       	cpi	r27, 0x01	; 1
    2704:	81 f0       	breq	.+32     	; 0x2726 <__fixunssfsi+0x46>
    2706:	9f d0       	rcall	.+318    	; 0x2846 <__fp_zero>
    2708:	b1 e0       	ldi	r27, 0x01	; 1
    270a:	08 95       	ret
    270c:	9c c0       	rjmp	.+312    	; 0x2846 <__fp_zero>
    270e:	67 2f       	mov	r22, r23
    2710:	78 2f       	mov	r23, r24
    2712:	88 27       	eor	r24, r24
    2714:	b8 5f       	subi	r27, 0xF8	; 248
    2716:	39 f0       	breq	.+14     	; 0x2726 <__fixunssfsi+0x46>
    2718:	b9 3f       	cpi	r27, 0xF9	; 249
    271a:	cc f3       	brlt	.-14     	; 0x270e <__fixunssfsi+0x2e>
    271c:	86 95       	lsr	r24
    271e:	77 95       	ror	r23
    2720:	67 95       	ror	r22
    2722:	b3 95       	inc	r27
    2724:	d9 f7       	brne	.-10     	; 0x271c <__fixunssfsi+0x3c>
    2726:	3e f4       	brtc	.+14     	; 0x2736 <__fixunssfsi+0x56>
    2728:	90 95       	com	r25
    272a:	80 95       	com	r24
    272c:	70 95       	com	r23
    272e:	61 95       	neg	r22
    2730:	7f 4f       	sbci	r23, 0xFF	; 255
    2732:	8f 4f       	sbci	r24, 0xFF	; 255
    2734:	9f 4f       	sbci	r25, 0xFF	; 255
    2736:	08 95       	ret

00002738 <__floatunsisf>:
    2738:	e8 94       	clt
    273a:	09 c0       	rjmp	.+18     	; 0x274e <__floatsisf+0x12>

0000273c <__floatsisf>:
    273c:	97 fb       	bst	r25, 7
    273e:	3e f4       	brtc	.+14     	; 0x274e <__floatsisf+0x12>
    2740:	90 95       	com	r25
    2742:	80 95       	com	r24
    2744:	70 95       	com	r23
    2746:	61 95       	neg	r22
    2748:	7f 4f       	sbci	r23, 0xFF	; 255
    274a:	8f 4f       	sbci	r24, 0xFF	; 255
    274c:	9f 4f       	sbci	r25, 0xFF	; 255
    274e:	99 23       	and	r25, r25
    2750:	a9 f0       	breq	.+42     	; 0x277c <__floatsisf+0x40>
    2752:	f9 2f       	mov	r31, r25
    2754:	96 e9       	ldi	r25, 0x96	; 150
    2756:	bb 27       	eor	r27, r27
    2758:	93 95       	inc	r25
    275a:	f6 95       	lsr	r31
    275c:	87 95       	ror	r24
    275e:	77 95       	ror	r23
    2760:	67 95       	ror	r22
    2762:	b7 95       	ror	r27
    2764:	f1 11       	cpse	r31, r1
    2766:	f8 cf       	rjmp	.-16     	; 0x2758 <__floatsisf+0x1c>
    2768:	fa f4       	brpl	.+62     	; 0x27a8 <__floatsisf+0x6c>
    276a:	bb 0f       	add	r27, r27
    276c:	11 f4       	brne	.+4      	; 0x2772 <__floatsisf+0x36>
    276e:	60 ff       	sbrs	r22, 0
    2770:	1b c0       	rjmp	.+54     	; 0x27a8 <__floatsisf+0x6c>
    2772:	6f 5f       	subi	r22, 0xFF	; 255
    2774:	7f 4f       	sbci	r23, 0xFF	; 255
    2776:	8f 4f       	sbci	r24, 0xFF	; 255
    2778:	9f 4f       	sbci	r25, 0xFF	; 255
    277a:	16 c0       	rjmp	.+44     	; 0x27a8 <__floatsisf+0x6c>
    277c:	88 23       	and	r24, r24
    277e:	11 f0       	breq	.+4      	; 0x2784 <__floatsisf+0x48>
    2780:	96 e9       	ldi	r25, 0x96	; 150
    2782:	11 c0       	rjmp	.+34     	; 0x27a6 <__floatsisf+0x6a>
    2784:	77 23       	and	r23, r23
    2786:	21 f0       	breq	.+8      	; 0x2790 <__floatsisf+0x54>
    2788:	9e e8       	ldi	r25, 0x8E	; 142
    278a:	87 2f       	mov	r24, r23
    278c:	76 2f       	mov	r23, r22
    278e:	05 c0       	rjmp	.+10     	; 0x279a <__floatsisf+0x5e>
    2790:	66 23       	and	r22, r22
    2792:	71 f0       	breq	.+28     	; 0x27b0 <__floatsisf+0x74>
    2794:	96 e8       	ldi	r25, 0x86	; 134
    2796:	86 2f       	mov	r24, r22
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	2a f0       	brmi	.+10     	; 0x27a8 <__floatsisf+0x6c>
    279e:	9a 95       	dec	r25
    27a0:	66 0f       	add	r22, r22
    27a2:	77 1f       	adc	r23, r23
    27a4:	88 1f       	adc	r24, r24
    27a6:	da f7       	brpl	.-10     	; 0x279e <__floatsisf+0x62>
    27a8:	88 0f       	add	r24, r24
    27aa:	96 95       	lsr	r25
    27ac:	87 95       	ror	r24
    27ae:	97 f9       	bld	r25, 7
    27b0:	08 95       	ret

000027b2 <__fp_inf>:
    27b2:	97 f9       	bld	r25, 7
    27b4:	9f 67       	ori	r25, 0x7F	; 127
    27b6:	80 e8       	ldi	r24, 0x80	; 128
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	08 95       	ret

000027be <__fp_nan>:
    27be:	9f ef       	ldi	r25, 0xFF	; 255
    27c0:	80 ec       	ldi	r24, 0xC0	; 192
    27c2:	08 95       	ret

000027c4 <__fp_pscA>:
    27c4:	00 24       	eor	r0, r0
    27c6:	0a 94       	dec	r0
    27c8:	16 16       	cp	r1, r22
    27ca:	17 06       	cpc	r1, r23
    27cc:	18 06       	cpc	r1, r24
    27ce:	09 06       	cpc	r0, r25
    27d0:	08 95       	ret

000027d2 <__fp_pscB>:
    27d2:	00 24       	eor	r0, r0
    27d4:	0a 94       	dec	r0
    27d6:	12 16       	cp	r1, r18
    27d8:	13 06       	cpc	r1, r19
    27da:	14 06       	cpc	r1, r20
    27dc:	05 06       	cpc	r0, r21
    27de:	08 95       	ret

000027e0 <__fp_round>:
    27e0:	09 2e       	mov	r0, r25
    27e2:	03 94       	inc	r0
    27e4:	00 0c       	add	r0, r0
    27e6:	11 f4       	brne	.+4      	; 0x27ec <__fp_round+0xc>
    27e8:	88 23       	and	r24, r24
    27ea:	52 f0       	brmi	.+20     	; 0x2800 <__fp_round+0x20>
    27ec:	bb 0f       	add	r27, r27
    27ee:	40 f4       	brcc	.+16     	; 0x2800 <__fp_round+0x20>
    27f0:	bf 2b       	or	r27, r31
    27f2:	11 f4       	brne	.+4      	; 0x27f8 <__fp_round+0x18>
    27f4:	60 ff       	sbrs	r22, 0
    27f6:	04 c0       	rjmp	.+8      	; 0x2800 <__fp_round+0x20>
    27f8:	6f 5f       	subi	r22, 0xFF	; 255
    27fa:	7f 4f       	sbci	r23, 0xFF	; 255
    27fc:	8f 4f       	sbci	r24, 0xFF	; 255
    27fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2800:	08 95       	ret

00002802 <__fp_split3>:
    2802:	57 fd       	sbrc	r21, 7
    2804:	90 58       	subi	r25, 0x80	; 128
    2806:	44 0f       	add	r20, r20
    2808:	55 1f       	adc	r21, r21
    280a:	59 f0       	breq	.+22     	; 0x2822 <__fp_splitA+0x10>
    280c:	5f 3f       	cpi	r21, 0xFF	; 255
    280e:	71 f0       	breq	.+28     	; 0x282c <__fp_splitA+0x1a>
    2810:	47 95       	ror	r20

00002812 <__fp_splitA>:
    2812:	88 0f       	add	r24, r24
    2814:	97 fb       	bst	r25, 7
    2816:	99 1f       	adc	r25, r25
    2818:	61 f0       	breq	.+24     	; 0x2832 <__fp_splitA+0x20>
    281a:	9f 3f       	cpi	r25, 0xFF	; 255
    281c:	79 f0       	breq	.+30     	; 0x283c <__fp_splitA+0x2a>
    281e:	87 95       	ror	r24
    2820:	08 95       	ret
    2822:	12 16       	cp	r1, r18
    2824:	13 06       	cpc	r1, r19
    2826:	14 06       	cpc	r1, r20
    2828:	55 1f       	adc	r21, r21
    282a:	f2 cf       	rjmp	.-28     	; 0x2810 <__fp_split3+0xe>
    282c:	46 95       	lsr	r20
    282e:	f1 df       	rcall	.-30     	; 0x2812 <__fp_splitA>
    2830:	08 c0       	rjmp	.+16     	; 0x2842 <__fp_splitA+0x30>
    2832:	16 16       	cp	r1, r22
    2834:	17 06       	cpc	r1, r23
    2836:	18 06       	cpc	r1, r24
    2838:	99 1f       	adc	r25, r25
    283a:	f1 cf       	rjmp	.-30     	; 0x281e <__fp_splitA+0xc>
    283c:	86 95       	lsr	r24
    283e:	71 05       	cpc	r23, r1
    2840:	61 05       	cpc	r22, r1
    2842:	08 94       	sec
    2844:	08 95       	ret

00002846 <__fp_zero>:
    2846:	e8 94       	clt

00002848 <__fp_szero>:
    2848:	bb 27       	eor	r27, r27
    284a:	66 27       	eor	r22, r22
    284c:	77 27       	eor	r23, r23
    284e:	cb 01       	movw	r24, r22
    2850:	97 f9       	bld	r25, 7
    2852:	08 95       	ret

00002854 <__mulsf3>:
    2854:	0b d0       	rcall	.+22     	; 0x286c <__mulsf3x>
    2856:	c4 cf       	rjmp	.-120    	; 0x27e0 <__fp_round>
    2858:	b5 df       	rcall	.-150    	; 0x27c4 <__fp_pscA>
    285a:	28 f0       	brcs	.+10     	; 0x2866 <__mulsf3+0x12>
    285c:	ba df       	rcall	.-140    	; 0x27d2 <__fp_pscB>
    285e:	18 f0       	brcs	.+6      	; 0x2866 <__mulsf3+0x12>
    2860:	95 23       	and	r25, r21
    2862:	09 f0       	breq	.+2      	; 0x2866 <__mulsf3+0x12>
    2864:	a6 cf       	rjmp	.-180    	; 0x27b2 <__fp_inf>
    2866:	ab cf       	rjmp	.-170    	; 0x27be <__fp_nan>
    2868:	11 24       	eor	r1, r1
    286a:	ee cf       	rjmp	.-36     	; 0x2848 <__fp_szero>

0000286c <__mulsf3x>:
    286c:	ca df       	rcall	.-108    	; 0x2802 <__fp_split3>
    286e:	a0 f3       	brcs	.-24     	; 0x2858 <__mulsf3+0x4>

00002870 <__mulsf3_pse>:
    2870:	95 9f       	mul	r25, r21
    2872:	d1 f3       	breq	.-12     	; 0x2868 <__mulsf3+0x14>
    2874:	95 0f       	add	r25, r21
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	55 1f       	adc	r21, r21
    287a:	62 9f       	mul	r22, r18
    287c:	f0 01       	movw	r30, r0
    287e:	72 9f       	mul	r23, r18
    2880:	bb 27       	eor	r27, r27
    2882:	f0 0d       	add	r31, r0
    2884:	b1 1d       	adc	r27, r1
    2886:	63 9f       	mul	r22, r19
    2888:	aa 27       	eor	r26, r26
    288a:	f0 0d       	add	r31, r0
    288c:	b1 1d       	adc	r27, r1
    288e:	aa 1f       	adc	r26, r26
    2890:	64 9f       	mul	r22, r20
    2892:	66 27       	eor	r22, r22
    2894:	b0 0d       	add	r27, r0
    2896:	a1 1d       	adc	r26, r1
    2898:	66 1f       	adc	r22, r22
    289a:	82 9f       	mul	r24, r18
    289c:	22 27       	eor	r18, r18
    289e:	b0 0d       	add	r27, r0
    28a0:	a1 1d       	adc	r26, r1
    28a2:	62 1f       	adc	r22, r18
    28a4:	73 9f       	mul	r23, r19
    28a6:	b0 0d       	add	r27, r0
    28a8:	a1 1d       	adc	r26, r1
    28aa:	62 1f       	adc	r22, r18
    28ac:	83 9f       	mul	r24, r19
    28ae:	a0 0d       	add	r26, r0
    28b0:	61 1d       	adc	r22, r1
    28b2:	22 1f       	adc	r18, r18
    28b4:	74 9f       	mul	r23, r20
    28b6:	33 27       	eor	r19, r19
    28b8:	a0 0d       	add	r26, r0
    28ba:	61 1d       	adc	r22, r1
    28bc:	23 1f       	adc	r18, r19
    28be:	84 9f       	mul	r24, r20
    28c0:	60 0d       	add	r22, r0
    28c2:	21 1d       	adc	r18, r1
    28c4:	82 2f       	mov	r24, r18
    28c6:	76 2f       	mov	r23, r22
    28c8:	6a 2f       	mov	r22, r26
    28ca:	11 24       	eor	r1, r1
    28cc:	9f 57       	subi	r25, 0x7F	; 127
    28ce:	50 40       	sbci	r21, 0x00	; 0
    28d0:	8a f0       	brmi	.+34     	; 0x28f4 <__mulsf3_pse+0x84>
    28d2:	e1 f0       	breq	.+56     	; 0x290c <__mulsf3_pse+0x9c>
    28d4:	88 23       	and	r24, r24
    28d6:	4a f0       	brmi	.+18     	; 0x28ea <__mulsf3_pse+0x7a>
    28d8:	ee 0f       	add	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	bb 1f       	adc	r27, r27
    28de:	66 1f       	adc	r22, r22
    28e0:	77 1f       	adc	r23, r23
    28e2:	88 1f       	adc	r24, r24
    28e4:	91 50       	subi	r25, 0x01	; 1
    28e6:	50 40       	sbci	r21, 0x00	; 0
    28e8:	a9 f7       	brne	.-22     	; 0x28d4 <__mulsf3_pse+0x64>
    28ea:	9e 3f       	cpi	r25, 0xFE	; 254
    28ec:	51 05       	cpc	r21, r1
    28ee:	70 f0       	brcs	.+28     	; 0x290c <__mulsf3_pse+0x9c>
    28f0:	60 cf       	rjmp	.-320    	; 0x27b2 <__fp_inf>
    28f2:	aa cf       	rjmp	.-172    	; 0x2848 <__fp_szero>
    28f4:	5f 3f       	cpi	r21, 0xFF	; 255
    28f6:	ec f3       	brlt	.-6      	; 0x28f2 <__mulsf3_pse+0x82>
    28f8:	98 3e       	cpi	r25, 0xE8	; 232
    28fa:	dc f3       	brlt	.-10     	; 0x28f2 <__mulsf3_pse+0x82>
    28fc:	86 95       	lsr	r24
    28fe:	77 95       	ror	r23
    2900:	67 95       	ror	r22
    2902:	b7 95       	ror	r27
    2904:	f7 95       	ror	r31
    2906:	e7 95       	ror	r30
    2908:	9f 5f       	subi	r25, 0xFF	; 255
    290a:	c1 f7       	brne	.-16     	; 0x28fc <__mulsf3_pse+0x8c>
    290c:	fe 2b       	or	r31, r30
    290e:	88 0f       	add	r24, r24
    2910:	91 1d       	adc	r25, r1
    2912:	96 95       	lsr	r25
    2914:	87 95       	ror	r24
    2916:	97 f9       	bld	r25, 7
    2918:	08 95       	ret

0000291a <__udivmodsi4>:
    291a:	a1 e2       	ldi	r26, 0x21	; 33
    291c:	1a 2e       	mov	r1, r26
    291e:	aa 1b       	sub	r26, r26
    2920:	bb 1b       	sub	r27, r27
    2922:	fd 01       	movw	r30, r26
    2924:	0d c0       	rjmp	.+26     	; 0x2940 <__udivmodsi4_ep>

00002926 <__udivmodsi4_loop>:
    2926:	aa 1f       	adc	r26, r26
    2928:	bb 1f       	adc	r27, r27
    292a:	ee 1f       	adc	r30, r30
    292c:	ff 1f       	adc	r31, r31
    292e:	a2 17       	cp	r26, r18
    2930:	b3 07       	cpc	r27, r19
    2932:	e4 07       	cpc	r30, r20
    2934:	f5 07       	cpc	r31, r21
    2936:	20 f0       	brcs	.+8      	; 0x2940 <__udivmodsi4_ep>
    2938:	a2 1b       	sub	r26, r18
    293a:	b3 0b       	sbc	r27, r19
    293c:	e4 0b       	sbc	r30, r20
    293e:	f5 0b       	sbc	r31, r21

00002940 <__udivmodsi4_ep>:
    2940:	66 1f       	adc	r22, r22
    2942:	77 1f       	adc	r23, r23
    2944:	88 1f       	adc	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	1a 94       	dec	r1
    294a:	69 f7       	brne	.-38     	; 0x2926 <__udivmodsi4_loop>
    294c:	60 95       	com	r22
    294e:	70 95       	com	r23
    2950:	80 95       	com	r24
    2952:	90 95       	com	r25
    2954:	9b 01       	movw	r18, r22
    2956:	ac 01       	movw	r20, r24
    2958:	bd 01       	movw	r22, r26
    295a:	cf 01       	movw	r24, r30
    295c:	08 95       	ret

0000295e <__tablejump2__>:
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	88 1f       	adc	r24, r24
    2964:	8b bf       	out	0x3b, r24	; 59
    2966:	07 90       	elpm	r0, Z+
    2968:	f6 91       	elpm	r31, Z
    296a:	e0 2d       	mov	r30, r0
    296c:	19 94       	eijmp

0000296e <__umulhisi3>:
    296e:	a2 9f       	mul	r26, r18
    2970:	b0 01       	movw	r22, r0
    2972:	b3 9f       	mul	r27, r19
    2974:	c0 01       	movw	r24, r0
    2976:	a3 9f       	mul	r26, r19
    2978:	70 0d       	add	r23, r0
    297a:	81 1d       	adc	r24, r1
    297c:	11 24       	eor	r1, r1
    297e:	91 1d       	adc	r25, r1
    2980:	b2 9f       	mul	r27, r18
    2982:	70 0d       	add	r23, r0
    2984:	81 1d       	adc	r24, r1
    2986:	11 24       	eor	r1, r1
    2988:	91 1d       	adc	r25, r1
    298a:	08 95       	ret

0000298c <__muluhisi3>:
    298c:	f0 df       	rcall	.-32     	; 0x296e <__umulhisi3>
    298e:	a5 9f       	mul	r26, r21
    2990:	90 0d       	add	r25, r0
    2992:	b4 9f       	mul	r27, r20
    2994:	90 0d       	add	r25, r0
    2996:	a4 9f       	mul	r26, r20
    2998:	80 0d       	add	r24, r0
    299a:	91 1d       	adc	r25, r1
    299c:	11 24       	eor	r1, r1
    299e:	08 95       	ret

000029a0 <malloc>:
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	82 30       	cpi	r24, 0x02	; 2
    29aa:	91 05       	cpc	r25, r1
    29ac:	10 f4       	brcc	.+4      	; 0x29b2 <malloc+0x12>
    29ae:	82 e0       	ldi	r24, 0x02	; 2
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	e0 91 fb 04 	lds	r30, 0x04FB	; 0x8004fb <__flp>
    29b6:	f0 91 fc 04 	lds	r31, 0x04FC	; 0x8004fc <__flp+0x1>
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	a0 e0       	ldi	r26, 0x00	; 0
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	30 97       	sbiw	r30, 0x00	; 0
    29c4:	19 f1       	breq	.+70     	; 0x2a0c <malloc+0x6c>
    29c6:	40 81       	ld	r20, Z
    29c8:	51 81       	ldd	r21, Z+1	; 0x01
    29ca:	02 81       	ldd	r16, Z+2	; 0x02
    29cc:	13 81       	ldd	r17, Z+3	; 0x03
    29ce:	48 17       	cp	r20, r24
    29d0:	59 07       	cpc	r21, r25
    29d2:	c8 f0       	brcs	.+50     	; 0x2a06 <malloc+0x66>
    29d4:	84 17       	cp	r24, r20
    29d6:	95 07       	cpc	r25, r21
    29d8:	69 f4       	brne	.+26     	; 0x29f4 <malloc+0x54>
    29da:	10 97       	sbiw	r26, 0x00	; 0
    29dc:	31 f0       	breq	.+12     	; 0x29ea <malloc+0x4a>
    29de:	12 96       	adiw	r26, 0x02	; 2
    29e0:	0c 93       	st	X, r16
    29e2:	12 97       	sbiw	r26, 0x02	; 2
    29e4:	13 96       	adiw	r26, 0x03	; 3
    29e6:	1c 93       	st	X, r17
    29e8:	27 c0       	rjmp	.+78     	; 0x2a38 <malloc+0x98>
    29ea:	00 93 fb 04 	sts	0x04FB, r16	; 0x8004fb <__flp>
    29ee:	10 93 fc 04 	sts	0x04FC, r17	; 0x8004fc <__flp+0x1>
    29f2:	22 c0       	rjmp	.+68     	; 0x2a38 <malloc+0x98>
    29f4:	21 15       	cp	r18, r1
    29f6:	31 05       	cpc	r19, r1
    29f8:	19 f0       	breq	.+6      	; 0x2a00 <malloc+0x60>
    29fa:	42 17       	cp	r20, r18
    29fc:	53 07       	cpc	r21, r19
    29fe:	18 f4       	brcc	.+6      	; 0x2a06 <malloc+0x66>
    2a00:	9a 01       	movw	r18, r20
    2a02:	bd 01       	movw	r22, r26
    2a04:	ef 01       	movw	r28, r30
    2a06:	df 01       	movw	r26, r30
    2a08:	f8 01       	movw	r30, r16
    2a0a:	db cf       	rjmp	.-74     	; 0x29c2 <malloc+0x22>
    2a0c:	21 15       	cp	r18, r1
    2a0e:	31 05       	cpc	r19, r1
    2a10:	f9 f0       	breq	.+62     	; 0x2a50 <malloc+0xb0>
    2a12:	28 1b       	sub	r18, r24
    2a14:	39 0b       	sbc	r19, r25
    2a16:	24 30       	cpi	r18, 0x04	; 4
    2a18:	31 05       	cpc	r19, r1
    2a1a:	80 f4       	brcc	.+32     	; 0x2a3c <malloc+0x9c>
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a20:	61 15       	cp	r22, r1
    2a22:	71 05       	cpc	r23, r1
    2a24:	21 f0       	breq	.+8      	; 0x2a2e <malloc+0x8e>
    2a26:	fb 01       	movw	r30, r22
    2a28:	93 83       	std	Z+3, r25	; 0x03
    2a2a:	82 83       	std	Z+2, r24	; 0x02
    2a2c:	04 c0       	rjmp	.+8      	; 0x2a36 <malloc+0x96>
    2a2e:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <__flp+0x1>
    2a32:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__flp>
    2a36:	fe 01       	movw	r30, r28
    2a38:	32 96       	adiw	r30, 0x02	; 2
    2a3a:	44 c0       	rjmp	.+136    	; 0x2ac4 <malloc+0x124>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e2 0f       	add	r30, r18
    2a40:	f3 1f       	adc	r31, r19
    2a42:	81 93       	st	Z+, r24
    2a44:	91 93       	st	Z+, r25
    2a46:	22 50       	subi	r18, 0x02	; 2
    2a48:	31 09       	sbc	r19, r1
    2a4a:	39 83       	std	Y+1, r19	; 0x01
    2a4c:	28 83       	st	Y, r18
    2a4e:	3a c0       	rjmp	.+116    	; 0x2ac4 <malloc+0x124>
    2a50:	20 91 f9 04 	lds	r18, 0x04F9	; 0x8004f9 <__brkval>
    2a54:	30 91 fa 04 	lds	r19, 0x04FA	; 0x8004fa <__brkval+0x1>
    2a58:	23 2b       	or	r18, r19
    2a5a:	41 f4       	brne	.+16     	; 0x2a6c <malloc+0xcc>
    2a5c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2a60:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2a64:	30 93 fa 04 	sts	0x04FA, r19	; 0x8004fa <__brkval+0x1>
    2a68:	20 93 f9 04 	sts	0x04F9, r18	; 0x8004f9 <__brkval>
    2a6c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2a70:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2a74:	21 15       	cp	r18, r1
    2a76:	31 05       	cpc	r19, r1
    2a78:	41 f4       	brne	.+16     	; 0x2a8a <malloc+0xea>
    2a7a:	2d b7       	in	r18, 0x3d	; 61
    2a7c:	3e b7       	in	r19, 0x3e	; 62
    2a7e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2a82:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2a86:	24 1b       	sub	r18, r20
    2a88:	35 0b       	sbc	r19, r21
    2a8a:	e0 91 f9 04 	lds	r30, 0x04F9	; 0x8004f9 <__brkval>
    2a8e:	f0 91 fa 04 	lds	r31, 0x04FA	; 0x8004fa <__brkval+0x1>
    2a92:	e2 17       	cp	r30, r18
    2a94:	f3 07       	cpc	r31, r19
    2a96:	a0 f4       	brcc	.+40     	; 0x2ac0 <malloc+0x120>
    2a98:	2e 1b       	sub	r18, r30
    2a9a:	3f 0b       	sbc	r19, r31
    2a9c:	28 17       	cp	r18, r24
    2a9e:	39 07       	cpc	r19, r25
    2aa0:	78 f0       	brcs	.+30     	; 0x2ac0 <malloc+0x120>
    2aa2:	ac 01       	movw	r20, r24
    2aa4:	4e 5f       	subi	r20, 0xFE	; 254
    2aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa8:	24 17       	cp	r18, r20
    2aaa:	35 07       	cpc	r19, r21
    2aac:	48 f0       	brcs	.+18     	; 0x2ac0 <malloc+0x120>
    2aae:	4e 0f       	add	r20, r30
    2ab0:	5f 1f       	adc	r21, r31
    2ab2:	50 93 fa 04 	sts	0x04FA, r21	; 0x8004fa <__brkval+0x1>
    2ab6:	40 93 f9 04 	sts	0x04F9, r20	; 0x8004f9 <__brkval>
    2aba:	81 93       	st	Z+, r24
    2abc:	91 93       	st	Z+, r25
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <malloc+0x124>
    2ac0:	e0 e0       	ldi	r30, 0x00	; 0
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	cf 01       	movw	r24, r30
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	1f 91       	pop	r17
    2acc:	0f 91       	pop	r16
    2ace:	08 95       	ret

00002ad0 <free>:
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <free+0xa>
    2ad8:	81 c0       	rjmp	.+258    	; 0x2bdc <free+0x10c>
    2ada:	fc 01       	movw	r30, r24
    2adc:	32 97       	sbiw	r30, 0x02	; 2
    2ade:	13 82       	std	Z+3, r1	; 0x03
    2ae0:	12 82       	std	Z+2, r1	; 0x02
    2ae2:	a0 91 fb 04 	lds	r26, 0x04FB	; 0x8004fb <__flp>
    2ae6:	b0 91 fc 04 	lds	r27, 0x04FC	; 0x8004fc <__flp+0x1>
    2aea:	10 97       	sbiw	r26, 0x00	; 0
    2aec:	81 f4       	brne	.+32     	; 0x2b0e <free+0x3e>
    2aee:	20 81       	ld	r18, Z
    2af0:	31 81       	ldd	r19, Z+1	; 0x01
    2af2:	82 0f       	add	r24, r18
    2af4:	93 1f       	adc	r25, r19
    2af6:	20 91 f9 04 	lds	r18, 0x04F9	; 0x8004f9 <__brkval>
    2afa:	30 91 fa 04 	lds	r19, 0x04FA	; 0x8004fa <__brkval+0x1>
    2afe:	28 17       	cp	r18, r24
    2b00:	39 07       	cpc	r19, r25
    2b02:	51 f5       	brne	.+84     	; 0x2b58 <free+0x88>
    2b04:	f0 93 fa 04 	sts	0x04FA, r31	; 0x8004fa <__brkval+0x1>
    2b08:	e0 93 f9 04 	sts	0x04F9, r30	; 0x8004f9 <__brkval>
    2b0c:	67 c0       	rjmp	.+206    	; 0x2bdc <free+0x10c>
    2b0e:	ed 01       	movw	r28, r26
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	ce 17       	cp	r28, r30
    2b16:	df 07       	cpc	r29, r31
    2b18:	40 f4       	brcc	.+16     	; 0x2b2a <free+0x5a>
    2b1a:	4a 81       	ldd	r20, Y+2	; 0x02
    2b1c:	5b 81       	ldd	r21, Y+3	; 0x03
    2b1e:	9e 01       	movw	r18, r28
    2b20:	41 15       	cp	r20, r1
    2b22:	51 05       	cpc	r21, r1
    2b24:	f1 f0       	breq	.+60     	; 0x2b62 <free+0x92>
    2b26:	ea 01       	movw	r28, r20
    2b28:	f5 cf       	rjmp	.-22     	; 0x2b14 <free+0x44>
    2b2a:	d3 83       	std	Z+3, r29	; 0x03
    2b2c:	c2 83       	std	Z+2, r28	; 0x02
    2b2e:	40 81       	ld	r20, Z
    2b30:	51 81       	ldd	r21, Z+1	; 0x01
    2b32:	84 0f       	add	r24, r20
    2b34:	95 1f       	adc	r25, r21
    2b36:	c8 17       	cp	r28, r24
    2b38:	d9 07       	cpc	r29, r25
    2b3a:	59 f4       	brne	.+22     	; 0x2b52 <free+0x82>
    2b3c:	88 81       	ld	r24, Y
    2b3e:	99 81       	ldd	r25, Y+1	; 0x01
    2b40:	84 0f       	add	r24, r20
    2b42:	95 1f       	adc	r25, r21
    2b44:	02 96       	adiw	r24, 0x02	; 2
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4e:	93 83       	std	Z+3, r25	; 0x03
    2b50:	82 83       	std	Z+2, r24	; 0x02
    2b52:	21 15       	cp	r18, r1
    2b54:	31 05       	cpc	r19, r1
    2b56:	29 f4       	brne	.+10     	; 0x2b62 <free+0x92>
    2b58:	f0 93 fc 04 	sts	0x04FC, r31	; 0x8004fc <__flp+0x1>
    2b5c:	e0 93 fb 04 	sts	0x04FB, r30	; 0x8004fb <__flp>
    2b60:	3d c0       	rjmp	.+122    	; 0x2bdc <free+0x10c>
    2b62:	e9 01       	movw	r28, r18
    2b64:	fb 83       	std	Y+3, r31	; 0x03
    2b66:	ea 83       	std	Y+2, r30	; 0x02
    2b68:	49 91       	ld	r20, Y+
    2b6a:	59 91       	ld	r21, Y+
    2b6c:	c4 0f       	add	r28, r20
    2b6e:	d5 1f       	adc	r29, r21
    2b70:	ec 17       	cp	r30, r28
    2b72:	fd 07       	cpc	r31, r29
    2b74:	61 f4       	brne	.+24     	; 0x2b8e <free+0xbe>
    2b76:	80 81       	ld	r24, Z
    2b78:	91 81       	ldd	r25, Z+1	; 0x01
    2b7a:	84 0f       	add	r24, r20
    2b7c:	95 1f       	adc	r25, r21
    2b7e:	02 96       	adiw	r24, 0x02	; 2
    2b80:	e9 01       	movw	r28, r18
    2b82:	99 83       	std	Y+1, r25	; 0x01
    2b84:	88 83       	st	Y, r24
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
    2b88:	93 81       	ldd	r25, Z+3	; 0x03
    2b8a:	9b 83       	std	Y+3, r25	; 0x03
    2b8c:	8a 83       	std	Y+2, r24	; 0x02
    2b8e:	e0 e0       	ldi	r30, 0x00	; 0
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	12 96       	adiw	r26, 0x02	; 2
    2b94:	8d 91       	ld	r24, X+
    2b96:	9c 91       	ld	r25, X
    2b98:	13 97       	sbiw	r26, 0x03	; 3
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	19 f0       	breq	.+6      	; 0x2ba4 <free+0xd4>
    2b9e:	fd 01       	movw	r30, r26
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	f7 cf       	rjmp	.-18     	; 0x2b92 <free+0xc2>
    2ba4:	8d 91       	ld	r24, X+
    2ba6:	9c 91       	ld	r25, X
    2ba8:	11 97       	sbiw	r26, 0x01	; 1
    2baa:	9d 01       	movw	r18, r26
    2bac:	2e 5f       	subi	r18, 0xFE	; 254
    2bae:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb0:	82 0f       	add	r24, r18
    2bb2:	93 1f       	adc	r25, r19
    2bb4:	20 91 f9 04 	lds	r18, 0x04F9	; 0x8004f9 <__brkval>
    2bb8:	30 91 fa 04 	lds	r19, 0x04FA	; 0x8004fa <__brkval+0x1>
    2bbc:	28 17       	cp	r18, r24
    2bbe:	39 07       	cpc	r19, r25
    2bc0:	69 f4       	brne	.+26     	; 0x2bdc <free+0x10c>
    2bc2:	30 97       	sbiw	r30, 0x00	; 0
    2bc4:	29 f4       	brne	.+10     	; 0x2bd0 <free+0x100>
    2bc6:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <__flp+0x1>
    2bca:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <__flp>
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <free+0x104>
    2bd0:	13 82       	std	Z+3, r1	; 0x03
    2bd2:	12 82       	std	Z+2, r1	; 0x02
    2bd4:	b0 93 fa 04 	sts	0x04FA, r27	; 0x8004fa <__brkval+0x1>
    2bd8:	a0 93 f9 04 	sts	0x04F9, r26	; 0x8004f9 <__brkval>
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	08 95       	ret

00002be2 <memcpy>:
    2be2:	fb 01       	movw	r30, r22
    2be4:	dc 01       	movw	r26, r24
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <memcpy+0xa>
    2be8:	01 90       	ld	r0, Z+
    2bea:	0d 92       	st	X+, r0
    2bec:	41 50       	subi	r20, 0x01	; 1
    2bee:	50 40       	sbci	r21, 0x00	; 0
    2bf0:	d8 f7       	brcc	.-10     	; 0x2be8 <memcpy+0x6>
    2bf2:	08 95       	ret

00002bf4 <memset>:
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <memset+0x6>
    2bf8:	6d 93       	st	X+, r22
    2bfa:	41 50       	subi	r20, 0x01	; 1
    2bfc:	50 40       	sbci	r21, 0x00	; 0
    2bfe:	e0 f7       	brcc	.-8      	; 0x2bf8 <memset+0x4>
    2c00:	08 95       	ret

00002c02 <__itoa_ncheck>:
    2c02:	bb 27       	eor	r27, r27
    2c04:	4a 30       	cpi	r20, 0x0A	; 10
    2c06:	31 f4       	brne	.+12     	; 0x2c14 <__itoa_ncheck+0x12>
    2c08:	99 23       	and	r25, r25
    2c0a:	22 f4       	brpl	.+8      	; 0x2c14 <__itoa_ncheck+0x12>
    2c0c:	bd e2       	ldi	r27, 0x2D	; 45
    2c0e:	90 95       	com	r25
    2c10:	81 95       	neg	r24
    2c12:	9f 4f       	sbci	r25, 0xFF	; 255
    2c14:	01 c0       	rjmp	.+2      	; 0x2c18 <__utoa_common>

00002c16 <__utoa_ncheck>:
    2c16:	bb 27       	eor	r27, r27

00002c18 <__utoa_common>:
    2c18:	fb 01       	movw	r30, r22
    2c1a:	55 27       	eor	r21, r21
    2c1c:	aa 27       	eor	r26, r26
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	aa 1f       	adc	r26, r26
    2c24:	a4 17       	cp	r26, r20
    2c26:	10 f0       	brcs	.+4      	; 0x2c2c <__utoa_common+0x14>
    2c28:	a4 1b       	sub	r26, r20
    2c2a:	83 95       	inc	r24
    2c2c:	50 51       	subi	r21, 0x10	; 16
    2c2e:	b9 f7       	brne	.-18     	; 0x2c1e <__utoa_common+0x6>
    2c30:	a0 5d       	subi	r26, 0xD0	; 208
    2c32:	aa 33       	cpi	r26, 0x3A	; 58
    2c34:	08 f0       	brcs	.+2      	; 0x2c38 <__utoa_common+0x20>
    2c36:	a9 5d       	subi	r26, 0xD9	; 217
    2c38:	a1 93       	st	Z+, r26
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	79 f7       	brne	.-34     	; 0x2c1c <__utoa_common+0x4>
    2c3e:	b1 11       	cpse	r27, r1
    2c40:	b1 93       	st	Z+, r27
    2c42:	11 92       	st	Z+, r1
    2c44:	cb 01       	movw	r24, r22
    2c46:	00 c0       	rjmp	.+0      	; 0x2c48 <strrev>

00002c48 <strrev>:
    2c48:	dc 01       	movw	r26, r24
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	67 2f       	mov	r22, r23
    2c4e:	71 91       	ld	r23, Z+
    2c50:	77 23       	and	r23, r23
    2c52:	e1 f7       	brne	.-8      	; 0x2c4c <strrev+0x4>
    2c54:	32 97       	sbiw	r30, 0x02	; 2
    2c56:	04 c0       	rjmp	.+8      	; 0x2c60 <strrev+0x18>
    2c58:	7c 91       	ld	r23, X
    2c5a:	6d 93       	st	X+, r22
    2c5c:	70 83       	st	Z, r23
    2c5e:	62 91       	ld	r22, -Z
    2c60:	ae 17       	cp	r26, r30
    2c62:	bf 07       	cpc	r27, r31
    2c64:	c8 f3       	brcs	.-14     	; 0x2c58 <strrev+0x10>
    2c66:	08 95       	ret

00002c68 <_exit>:
    2c68:	f8 94       	cli

00002c6a <__stop_program>:
    2c6a:	ff cf       	rjmp	.-2      	; 0x2c6a <__stop_program>
