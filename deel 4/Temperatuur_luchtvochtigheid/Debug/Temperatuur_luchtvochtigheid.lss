
Temperatuur_luchtvochtigheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800200  00002930  000029c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002930  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024f  00800288  00800288  00002a4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000598  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007bab  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ebb  00000000  00000000  0000abff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a29  00000000  00000000  0000caba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014d0  00000000  00000000  000114e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002017  00000000  00000000  000129b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007543  00000000  00000000  000149cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000870  00000000  00000000  0001bf0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c1       	rjmp	.+728    	; 0x2da <__ctors_end>
       2:	00 00       	nop
       4:	8a c1       	rjmp	.+788    	; 0x31a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c1       	rjmp	.+784    	; 0x31a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c1       	rjmp	.+780    	; 0x31a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c1       	rjmp	.+776    	; 0x31a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c1       	rjmp	.+772    	; 0x31a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c1       	rjmp	.+768    	; 0x31a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c1       	rjmp	.+764    	; 0x31a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c1       	rjmp	.+760    	; 0x31a <__bad_interrupt>
      22:	00 00       	nop
      24:	95 c4       	rjmp	.+2346   	; 0x950 <__vector_9>
      26:	00 00       	nop
      28:	78 c1       	rjmp	.+752    	; 0x31a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c1       	rjmp	.+748    	; 0x31a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c1       	rjmp	.+744    	; 0x31a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c1       	rjmp	.+740    	; 0x31a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c1       	rjmp	.+736    	; 0x31a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c1       	rjmp	.+732    	; 0x31a <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c1       	rjmp	.+728    	; 0x31a <__bad_interrupt>
      42:	00 00       	nop
      44:	d2 c7       	rjmp	.+4004   	; 0xfea <__vector_17>
      46:	00 00       	nop
      48:	68 c1       	rjmp	.+720    	; 0x31a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	66 c1       	rjmp	.+716    	; 0x31a <__bad_interrupt>
      4e:	00 00       	nop
      50:	64 c1       	rjmp	.+712    	; 0x31a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_21>
      58:	60 c1       	rjmp	.+704    	; 0x31a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c1       	rjmp	.+700    	; 0x31a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c1       	rjmp	.+696    	; 0x31a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c1       	rjmp	.+692    	; 0x31a <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__vector_26>
      6c:	56 c1       	rjmp	.+684    	; 0x31a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c1       	rjmp	.+680    	; 0x31a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c1       	rjmp	.+676    	; 0x31a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c1       	rjmp	.+672    	; 0x31a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c1       	rjmp	.+668    	; 0x31a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c1       	rjmp	.+664    	; 0x31a <__bad_interrupt>
      82:	00 00       	nop
      84:	4a c1       	rjmp	.+660    	; 0x31a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c1       	rjmp	.+656    	; 0x31a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	04 c5       	rjmp	.+2568   	; 0xa96 <__vector_35>
      8e:	00 00       	nop
      90:	68 c3       	rjmp	.+1744   	; 0x762 <__vector_36>
      92:	00 00       	nop
      94:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_37>
      98:	40 c1       	rjmp	.+640    	; 0x31a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ac c1       	rjmp	.+856    	; 0x3f6 <__vector_39>
      9e:	00 00       	nop
      a0:	3c c1       	rjmp	.+632    	; 0x31a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3a c1       	rjmp	.+628    	; 0x31a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	38 c1       	rjmp	.+624    	; 0x31a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	36 c1       	rjmp	.+620    	; 0x31a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	34 c1       	rjmp	.+616    	; 0x31a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	32 c1       	rjmp	.+612    	; 0x31a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	30 c1       	rjmp	.+608    	; 0x31a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2e c1       	rjmp	.+604    	; 0x31a <__bad_interrupt>
      be:	00 00       	nop
      c0:	2c c1       	rjmp	.+600    	; 0x31a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2a c1       	rjmp	.+596    	; 0x31a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	28 c1       	rjmp	.+592    	; 0x31a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__vector_51>
      d0:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_52>
      d4:	22 c1       	rjmp	.+580    	; 0x31a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__vector_54>
      dc:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_55>
      e0:	1c c1       	rjmp	.+568    	; 0x31a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1a 02       	muls	r17, r26
      e6:	d5 02       	muls	r29, r21
      e8:	d5 02       	muls	r29, r21
      ea:	d5 02       	muls	r29, r21
      ec:	d5 02       	muls	r29, r21
      ee:	d5 02       	muls	r29, r21
      f0:	d5 02       	muls	r29, r21
      f2:	d5 02       	muls	r29, r21
      f4:	1a 02       	muls	r17, r26
      f6:	d5 02       	muls	r29, r21
      f8:	d5 02       	muls	r29, r21
      fa:	d5 02       	muls	r29, r21
      fc:	d5 02       	muls	r29, r21
      fe:	d5 02       	muls	r29, r21
     100:	d5 02       	muls	r29, r21
     102:	d5 02       	muls	r29, r21
     104:	1c 02       	muls	r17, r28
     106:	d5 02       	muls	r29, r21
     108:	d5 02       	muls	r29, r21
     10a:	d5 02       	muls	r29, r21
     10c:	d5 02       	muls	r29, r21
     10e:	d5 02       	muls	r29, r21
     110:	d5 02       	muls	r29, r21
     112:	d5 02       	muls	r29, r21
     114:	39 02       	muls	r19, r25
     116:	d5 02       	muls	r29, r21
     118:	d5 02       	muls	r29, r21
     11a:	d5 02       	muls	r29, r21
     11c:	d5 02       	muls	r29, r21
     11e:	d5 02       	muls	r29, r21
     120:	d5 02       	muls	r29, r21
     122:	d5 02       	muls	r29, r21
     124:	1c 02       	muls	r17, r28
     126:	d5 02       	muls	r29, r21
     128:	d5 02       	muls	r29, r21
     12a:	d5 02       	muls	r29, r21
     12c:	d5 02       	muls	r29, r21
     12e:	d5 02       	muls	r29, r21
     130:	d5 02       	muls	r29, r21
     132:	d5 02       	muls	r29, r21
     134:	39 02       	muls	r19, r25
     136:	d5 02       	muls	r29, r21
     138:	d5 02       	muls	r29, r21
     13a:	d5 02       	muls	r29, r21
     13c:	d5 02       	muls	r29, r21
     13e:	d5 02       	muls	r29, r21
     140:	d5 02       	muls	r29, r21
     142:	d5 02       	muls	r29, r21
     144:	d1 02       	muls	r29, r17
     146:	d5 02       	muls	r29, r21
     148:	d5 02       	muls	r29, r21
     14a:	d5 02       	muls	r29, r21
     14c:	d5 02       	muls	r29, r21
     14e:	d5 02       	muls	r29, r21
     150:	d5 02       	muls	r29, r21
     152:	d5 02       	muls	r29, r21
     154:	4d 02       	muls	r20, r29
     156:	d5 02       	muls	r29, r21
     158:	d5 02       	muls	r29, r21
     15a:	d5 02       	muls	r29, r21
     15c:	d5 02       	muls	r29, r21
     15e:	d5 02       	muls	r29, r21
     160:	d5 02       	muls	r29, r21
     162:	d5 02       	muls	r29, r21
     164:	70 02       	muls	r23, r16
     166:	d5 02       	muls	r29, r21
     168:	d5 02       	muls	r29, r21
     16a:	d5 02       	muls	r29, r21
     16c:	d5 02       	muls	r29, r21
     16e:	d5 02       	muls	r29, r21
     170:	d5 02       	muls	r29, r21
     172:	d5 02       	muls	r29, r21
     174:	41 02       	muls	r20, r17
     176:	d5 02       	muls	r29, r21
     178:	d5 02       	muls	r29, r21
     17a:	d5 02       	muls	r29, r21
     17c:	d5 02       	muls	r29, r21
     17e:	d5 02       	muls	r29, r21
     180:	d5 02       	muls	r29, r21
     182:	d5 02       	muls	r29, r21
     184:	5f 02       	muls	r21, r31
     186:	d5 02       	muls	r29, r21
     188:	d5 02       	muls	r29, r21
     18a:	d5 02       	muls	r29, r21
     18c:	d5 02       	muls	r29, r21
     18e:	d5 02       	muls	r29, r21
     190:	d5 02       	muls	r29, r21
     192:	d5 02       	muls	r29, r21
     194:	a7 02       	muls	r26, r23
     196:	d5 02       	muls	r29, r21
     198:	d5 02       	muls	r29, r21
     19a:	d5 02       	muls	r29, r21
     19c:	d5 02       	muls	r29, r21
     19e:	d5 02       	muls	r29, r21
     1a0:	d5 02       	muls	r29, r21
     1a2:	d5 02       	muls	r29, r21
     1a4:	a7 02       	muls	r26, r23
     1a6:	d5 02       	muls	r29, r21
     1a8:	d5 02       	muls	r29, r21
     1aa:	d5 02       	muls	r29, r21
     1ac:	d5 02       	muls	r29, r21
     1ae:	d5 02       	muls	r29, r21
     1b0:	d5 02       	muls	r29, r21
     1b2:	d5 02       	muls	r29, r21
     1b4:	a2 02       	muls	r26, r18
     1b6:	d5 02       	muls	r29, r21
     1b8:	d5 02       	muls	r29, r21
     1ba:	d5 02       	muls	r29, r21
     1bc:	d5 02       	muls	r29, r21
     1be:	d5 02       	muls	r29, r21
     1c0:	d5 02       	muls	r29, r21
     1c2:	d5 02       	muls	r29, r21
     1c4:	a2 02       	muls	r26, r18
     1c6:	d5 02       	muls	r29, r21
     1c8:	d5 02       	muls	r29, r21
     1ca:	d5 02       	muls	r29, r21
     1cc:	d5 02       	muls	r29, r21
     1ce:	d5 02       	muls	r29, r21
     1d0:	d5 02       	muls	r29, r21
     1d2:	d5 02       	muls	r29, r21
     1d4:	b2 02       	muls	r27, r18
     1d6:	d5 02       	muls	r29, r21
     1d8:	d5 02       	muls	r29, r21
     1da:	d5 02       	muls	r29, r21
     1dc:	d5 02       	muls	r29, r21
     1de:	d5 02       	muls	r29, r21
     1e0:	d5 02       	muls	r29, r21
     1e2:	d5 02       	muls	r29, r21
     1e4:	c7 02       	muls	r28, r23
     1e6:	d5 02       	muls	r29, r21
     1e8:	d5 02       	muls	r29, r21
     1ea:	d5 02       	muls	r29, r21
     1ec:	d5 02       	muls	r29, r21
     1ee:	d5 02       	muls	r29, r21
     1f0:	d5 02       	muls	r29, r21
     1f2:	d5 02       	muls	r29, r21
     1f4:	b2 02       	muls	r27, r18
     1f6:	d5 02       	muls	r29, r21
     1f8:	d5 02       	muls	r29, r21
     1fa:	d5 02       	muls	r29, r21
     1fc:	d5 02       	muls	r29, r21
     1fe:	d5 02       	muls	r29, r21
     200:	d5 02       	muls	r29, r21
     202:	d5 02       	muls	r29, r21
     204:	c7 02       	muls	r28, r23
     206:	d5 02       	muls	r29, r21
     208:	d5 02       	muls	r29, r21
     20a:	d5 02       	muls	r29, r21
     20c:	d5 02       	muls	r29, r21
     20e:	d5 02       	muls	r29, r21
     210:	d5 02       	muls	r29, r21
     212:	d5 02       	muls	r29, r21
     214:	cb 02       	muls	r28, r27
     216:	d5 02       	muls	r29, r21
     218:	d5 02       	muls	r29, r21
     21a:	d5 02       	muls	r29, r21
     21c:	d5 02       	muls	r29, r21
     21e:	d5 02       	muls	r29, r21
     220:	d5 02       	muls	r29, r21
     222:	d5 02       	muls	r29, r21
     224:	78 02       	muls	r23, r24
     226:	d5 02       	muls	r29, r21
     228:	d5 02       	muls	r29, r21
     22a:	d5 02       	muls	r29, r21
     22c:	d5 02       	muls	r29, r21
     22e:	d5 02       	muls	r29, r21
     230:	d5 02       	muls	r29, r21
     232:	d5 02       	muls	r29, r21
     234:	78 02       	muls	r23, r24
     236:	d5 02       	muls	r29, r21
     238:	d5 02       	muls	r29, r21
     23a:	d5 02       	muls	r29, r21
     23c:	d5 02       	muls	r29, r21
     23e:	d5 02       	muls	r29, r21
     240:	d5 02       	muls	r29, r21
     242:	d5 02       	muls	r29, r21
     244:	7a 02       	muls	r23, r26
     246:	d5 02       	muls	r29, r21
     248:	d5 02       	muls	r29, r21
     24a:	d5 02       	muls	r29, r21
     24c:	d5 02       	muls	r29, r21
     24e:	d5 02       	muls	r29, r21
     250:	d5 02       	muls	r29, r21
     252:	d5 02       	muls	r29, r21
     254:	8a 02       	muls	r24, r26
     256:	d5 02       	muls	r29, r21
     258:	d5 02       	muls	r29, r21
     25a:	d5 02       	muls	r29, r21
     25c:	d5 02       	muls	r29, r21
     25e:	d5 02       	muls	r29, r21
     260:	d5 02       	muls	r29, r21
     262:	d5 02       	muls	r29, r21
     264:	9e 02       	muls	r25, r30

00000266 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     266:	08 ec       	ldi	r16, 0xC8	; 200
     268:	12 e0       	ldi	r17, 0x02	; 2
     26a:	0f 2e       	mov	r0, r31
     26c:	f0 ef       	ldi	r31, 0xF0	; 240
     26e:	ef 2e       	mov	r14, r31
     270:	f2 e0       	ldi	r31, 0x02	; 2
     272:	ff 2e       	mov	r15, r31
     274:	f0 2d       	mov	r31, r0
     276:	26 c0       	rjmp	.+76     	; 0x2c4 <prvIdleTask+0x5e>
     278:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <vTaskSuspendAll>
     27c:	d8 01       	movw	r26, r16
     27e:	cc 91       	ld	r28, X
     280:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <xTaskResumeAll>
     284:	cc 23       	and	r28, r28
     286:	f1 f0       	breq	.+60     	; 0x2c4 <prvIdleTask+0x5e>
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	0f 92       	push	r0
     28e:	d8 01       	movw	r26, r16
     290:	15 96       	adiw	r26, 0x05	; 5
     292:	ed 91       	ld	r30, X+
     294:	fc 91       	ld	r31, X
     296:	16 97       	sbiw	r26, 0x06	; 6
     298:	c6 81       	ldd	r28, Z+6	; 0x06
     29a:	d7 81       	ldd	r29, Z+7	; 0x07
     29c:	ce 01       	movw	r24, r28
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	fe d1       	rcall	.+1020   	; 0x69e <uxListRemove>
     2a2:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <uxCurrentNumberOfTasks>
     2a6:	81 50       	subi	r24, 0x01	; 1
     2a8:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <uxCurrentNumberOfTasks>
     2ac:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <uxDeletedTasksWaitingCleanUp>
     2b0:	81 50       	subi	r24, 0x01	; 1
     2b2:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <uxDeletedTasksWaitingCleanUp>
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	8f 89       	ldd	r24, Y+23	; 0x17
     2bc:	98 8d       	ldd	r25, Y+24	; 0x18
     2be:	5c d0       	rcall	.+184    	; 0x378 <vPortFree>
     2c0:	ce 01       	movw	r24, r28
     2c2:	5a d0       	rcall	.+180    	; 0x378 <vPortFree>
     2c4:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <uxDeletedTasksWaitingCleanUp>
     2c8:	81 11       	cpse	r24, r1
     2ca:	d6 cf       	rjmp	.-84     	; 0x278 <prvIdleTask+0x12>
     2cc:	f7 01       	movw	r30, r14
     2ce:	80 81       	ld	r24, Z
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <prvIdleTask+0x70>
     2d4:	54 d7       	rcall	.+3752   	; 0x117e <vPortYield>
     2d6:	5f d0       	rcall	.+190    	; 0x396 <vApplicationIdleHook>
     2d8:	f5 cf       	rjmp	.-22     	; 0x2c4 <prvIdleTask+0x5e>

000002da <__ctors_end>:
     2da:	11 24       	eor	r1, r1
     2dc:	1f be       	out	0x3f, r1	; 63
     2de:	cf ef       	ldi	r28, 0xFF	; 255
     2e0:	d1 e2       	ldi	r29, 0x21	; 33
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	0c bf       	out	0x3c, r16	; 60

000002ea <__do_copy_data>:
     2ea:	12 e0       	ldi	r17, 0x02	; 2
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b2 e0       	ldi	r27, 0x02	; 2
     2f0:	e0 e3       	ldi	r30, 0x30	; 48
     2f2:	f9 e2       	ldi	r31, 0x29	; 41
     2f4:	00 e0       	ldi	r16, 0x00	; 0
     2f6:	0b bf       	out	0x3b, r16	; 59
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <__do_copy_data+0x14>
     2fa:	07 90       	elpm	r0, Z+
     2fc:	0d 92       	st	X+, r0
     2fe:	a8 38       	cpi	r26, 0x88	; 136
     300:	b1 07       	cpc	r27, r17
     302:	d9 f7       	brne	.-10     	; 0x2fa <__do_copy_data+0x10>

00000304 <__do_clear_bss>:
     304:	24 e0       	ldi	r18, 0x04	; 4
     306:	a8 e8       	ldi	r26, 0x88	; 136
     308:	b2 e0       	ldi	r27, 0x02	; 2
     30a:	01 c0       	rjmp	.+2      	; 0x30e <.do_clear_bss_start>

0000030c <.do_clear_bss_loop>:
     30c:	1d 92       	st	X+, r1

0000030e <.do_clear_bss_start>:
     30e:	a7 3d       	cpi	r26, 0xD7	; 215
     310:	b2 07       	cpc	r27, r18
     312:	e1 f7       	brne	.-8      	; 0x30c <.do_clear_bss_loop>
     314:	4d d4       	rcall	.+2202   	; 0xbb0 <main>
     316:	0c 94 96 14 	jmp	0x292c	; 0x292c <_exit>

0000031a <__bad_interrupt>:
     31a:	72 ce       	rjmp	.-796    	; 0x0 <__vectors>

0000031c <system_tick>:
     31c:	8f 93       	push	r24
     31e:	8f b7       	in	r24, 0x3f	; 63
     320:	8f 93       	push	r24
     322:	f8 94       	cli
     324:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <__system_time>
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <__system_time>
     32e:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <__system_time+0x1>
     332:	8f 4f       	sbci	r24, 0xFF	; 255
     334:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <__system_time+0x1>
     338:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <__system_time+0x2>
     33c:	8f 4f       	sbci	r24, 0xFF	; 255
     33e:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <__system_time+0x2>
     342:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <__system_time+0x3>
     346:	8f 4f       	sbci	r24, 0xFF	; 255
     348:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <__system_time+0x3>
     34c:	8f 91       	pop	r24
     34e:	8f bf       	out	0x3f, r24	; 63
     350:	8f 91       	pop	r24
     352:	08 95       	ret

00000354 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     35a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     35e:	ce 01       	movw	r24, r28
     360:	0e 94 32 13 	call	0x2664	; 0x2664 <malloc>
     364:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     366:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     36a:	20 97       	sbiw	r28, 0x00	; 0
     36c:	09 f4       	brne	.+2      	; 0x370 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     36e:	2c d0       	rcall	.+88     	; 0x3c8 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     370:	ce 01       	movw	r24, r28
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
	if( pv )
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	41 f0       	breq	.+16     	; 0x390 <vPortFree+0x18>
     380:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     382:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <vTaskSuspendAll>
		{
			free( pv );
     386:	ce 01       	movw	r24, r28
     388:	0e 94 ca 13 	call	0x2794	; 0x2794 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     38c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <xTaskResumeAll>
	}
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Mega with 2560
	DIDR0 = 0xFF;
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     39c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     3a0:	80 b7       	in	r24, 0x30	; 48
     3a2:	87 7f       	andi	r24, 0xF7	; 247
     3a4:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     3a6:	80 b7       	in	r24, 0x30	; 48
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     3ac:	83 b7       	in	r24, 0x33	; 51
     3ae:	81 7f       	andi	r24, 0xF1	; 241
     3b0:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	0f 92       	push	r0

	sleep_enable();
     3b8:	83 b7       	in	r24, 0x33	; 51
     3ba:	81 60       	ori	r24, 0x01	; 1
     3bc:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63

	sleep_cpu();		// good night.
     3c2:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     3c4:	13 be       	out	0x33, r1	; 51
     3c6:	08 95       	ret

000003c8 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Mega with 2560
	DDRB  |= _BV(DDB7);
     3c8:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     3ca:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3cc:	83 ed       	ldi	r24, 0xD3	; 211
     3ce:	90 e3       	ldi	r25, 0x30	; 48
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <vApplicationMallocFailedHook+0x8>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <vApplicationMallocFailedHook+0xe>
     3d6:	00 00       	nop

	for(;;)
	{
		_delay_ms(50);
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     3d8:	1f 9a       	sbi	0x03, 7	; 3
     3da:	f8 cf       	rjmp	.-16     	; 0x3cc <vApplicationMallocFailedHook+0x4>

000003dc <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
	DDRB  |= _BV(DDB7);
     3dc:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     3de:	2f 9a       	sbi	0x05, 7	; 5
     3e0:	2f e7       	ldi	r18, 0x7F	; 127
     3e2:	8a e1       	ldi	r24, 0x1A	; 26
     3e4:	96 e0       	ldi	r25, 0x06	; 6
     3e6:	21 50       	subi	r18, 0x01	; 1
     3e8:	80 40       	sbci	r24, 0x00	; 0
     3ea:	90 40       	sbci	r25, 0x00	; 0
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <vApplicationStackOverflowHook+0xa>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <vApplicationStackOverflowHook+0x14>
     3f0:	00 00       	nop

	for(;;)
	{
		_delay_ms(2000);
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
     3f2:	1f 9a       	sbi	0x03, 7	; 3
     3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <vApplicationStackOverflowHook+0x4>

000003f6 <__vector_39>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect) __attribute__((hot, flatten));
ISR(TWI_vect)
{
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	11 24       	eor	r1, r1
     400:	0b b6       	in	r0, 0x3b	; 59
     402:	0f 92       	push	r0
     404:	2f 93       	push	r18
     406:	3f 93       	push	r19
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
  static uint8_t I2C_bufPtr;

  switch (TWSR)
     414:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     418:	8e 2f       	mov	r24, r30
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	38 97       	sbiw	r30, 0x08	; 8
     420:	e1 3c       	cpi	r30, 0xC1	; 193
     422:	f1 05       	cpc	r31, r1
     424:	08 f0       	brcs	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	c1 c0       	rjmp	.+386    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     428:	88 27       	eor	r24, r24
     42a:	ee 58       	subi	r30, 0x8E	; 142
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	8f 4f       	sbci	r24, 0xFF	; 255
     430:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__tablejump2__>
  {

    case I2C_START:             // START has been transmitted
    case I2C_REP_START:         // Repeated START has been transmitted
		I2C_bufPtr = 0;         // Set buffer pointer to the TWI Address location
     434:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__data_end>

// Master Transmitter

    case I2C_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case I2C_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
		if (I2C_bufPtr < I2C_msgSize)
     438:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__data_end>
     43c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <I2C_msgSize>
     440:	e8 17       	cp	r30, r24
     442:	70 f4       	brcc	.+28     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			TWDR = I2C_buf[I2C_bufPtr++];
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	8e 0f       	add	r24, r30
     448:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	e4 57       	subi	r30, 0x74	; 116
     450:	fd 4f       	sbci	r31, 0xFD	; 253
     452:	80 81       	ld	r24, Z
     454:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     458:	85 e8       	ldi	r24, 0x85	; 133
     45a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     45e:	ac c0       	rjmp	.+344    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				   (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
				   (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
				   (0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
		I2C_statusReg.lastTransOK = true;                 // Set status bits to completed successfully.
     460:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <I2C_statusReg>
     464:	81 60       	ori	r24, 0x01	; 1
     466:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <I2C_statusReg>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     46a:	84 e9       	ldi	r24, 0x94	; 148
     46c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     470:	a3 c0       	rjmp	.+326    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		}
		break;

    case I2C_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case I2C_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
	    I2C_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     472:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     476:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
	    // Reset TWI Interface and send START.
		TWCR = 	(1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     47a:	85 ee       	ldi	r24, 0xE5	; 229
     47c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				(1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
				(1<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|    		// Send Start.
				(0<<TWWC);
		break;
     480:	9b c0       	rjmp	.+310    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


// Master Receiver

    case I2C_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
		I2C_buf[I2C_bufPtr++] = TWDR;
     482:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__data_end>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	8e 0f       	add	r24, r30
     48a:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
     48e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	e4 57       	subi	r30, 0x74	; 116
     496:	fd 4f       	sbci	r31, 0xFD	; 253
     498:	80 83       	st	Z, r24

    case I2C_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
		if (I2C_bufPtr < (I2C_msgSize-1) )                  // Detect the last byte to NACK it.
     49a:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <__data_end>
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <I2C_msgSize>
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	28 17       	cp	r18, r24
     4aa:	39 07       	cpc	r19, r25
     4ac:	24 f4       	brge	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     4ae:	85 ec       	ldi	r24, 0xC5	; 197
     4b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     4b4:	81 c0       	rjmp	.+258    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				   (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
				   (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
				   (0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     4b6:	85 e8       	ldi	r24, 0x85	; 133
     4b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     4bc:	7d c0       	rjmp	.+250    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				   (0<<TWWC);                                 //
		}
		break;

    case I2C_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
		I2C_buf[I2C_bufPtr] = TWDR;
     4be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     4c2:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__data_end>
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	e4 57       	subi	r30, 0x74	; 116
     4ca:	fd 4f       	sbci	r31, 0xFD	; 253
     4cc:	80 83       	st	Z, r24
		I2C_statusReg.lastTransOK = true;                 // Set status bits to completed successfully.
     4ce:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <I2C_statusReg>
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <I2C_statusReg>
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     4d8:	84 ed       	ldi	r24, 0xD4	; 212
     4da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			   (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
			   (1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			   (0<<TWWC);                                 //
		break;
     4de:	6c c0       	rjmp	.+216    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>



    case I2C_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received
 	    I2C_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     4e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     4e4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
		// Reset TWI Interface and send STOP.
		TWCR = 	(1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     4e8:	85 ed       	ldi	r24, 0xD5	; 213
     4ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				(1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
				(1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|    		// Send stop.
				(0<<TWWC);
		break;
     4ee:	64 c0       	rjmp	.+200    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
// Slave Transmitter

	case I2C_STX_ADR_ACK:			// Own SLA+R has been received; ACK has been returned
	case I2C_STX_ADR_ACK_M_ARB_LOST:// Arbitration lost in SLA+R/W as Master; own SLA+R has
									// been received; ACK has been returned
	    I2C_bufPtr   = 0;	    	// Set buffer pointer to first data location
     4f0:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__data_end>


	case I2C_STX_DATA_ACK:		// Data byte in TWDR has been transmitted; ACK has been received
	    TWDR = I2C_buf[I2C_bufPtr++];
     4f4:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__data_end>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	8e 0f       	add	r24, r30
     4fc:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	e4 57       	subi	r30, 0x74	; 116
     504:	fd 4f       	sbci	r31, 0xFD	; 253
     506:	80 81       	ld	r24, Z
     508:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	    						// Enable TWI Interrupt and clear the flag to send byte
	    TWCR = 	(1<<TWEN) |
     50c:	85 ec       	ldi	r24, 0xC5	; 197
     50e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	    		(1<<TWIE)|(1<<TWINT)|
	    		(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|
	    		(0<<TWWC);
	    break;
     512:	52 c0       	rjmp	.+164    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


	case I2C_STX_DATA_NACK:  	// Data byte in TWDR has been transmitted; NACK has been received.
	    						// I.e. this could be the end of the transmission.
	    if (I2C_bufPtr == I2C_msgSize) 	    // Have we transmitted all expected data?
     514:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <__data_end>
     518:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <I2C_msgSize>
     51c:	98 13       	cpse	r25, r24
     51e:	06 c0       	rjmp	.+12     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
	    {
	        I2C_statusReg.lastTransOK = true; // Set status bits to completed successfully.
     520:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <I2C_statusReg>
     524:	81 60       	ori	r24, 0x01	; 1
     526:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <I2C_statusReg>
     52a:	04 c0       	rjmp	.+8      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
	    }
	    else
	    {
	        I2C_state = TWSR;     // Master has sent a NACK before all data where sent, Store I2C State as error message.
     52c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     530:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
	    }

	    // Put I2C Transceiver in passive mode.
	    // Enable I2C-interface and release I2C pins
	    TWCR = (1<<TWEN)|
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	           (0<<TWIE)|(0<<TWINT)|                // Disable Interrupt
	           (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|     // Do not acknowledge on any new requests.
	           (0<<TWWC);
	   break;
     53a:	3e c0       	rjmp	.+124    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


    case I2C_STX_DATA_ACK_LAST_BYTE: // Last data byte in TWDR has been transmitted TWEA = ; ACK has been received

    	// Enable TWI Interrupt and clear the flag to send byte
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     53c:	85 ec       	ldi	r24, 0xC5	; 197
     53e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Acknowledge on any new requests.
               (0<<TWWC);

	    break;
     542:	3a c0       	rjmp	.+116    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
// Slave Receiver

	case I2C_SRX_GEN_ACK:				// General call address has been received; ACK has been returned
	case I2C_SRX_GEN_ACK_M_ARB_LOST:	// Arbitration lost in SLA+R/W as Master; General call
										// address has been received; ACK has been returned
	    I2C_statusReg.genAddressCall = true;
     544:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <I2C_statusReg>
     548:	84 60       	ori	r24, 0x04	; 4
     54a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <I2C_statusReg>

	case I2C_SRX_ADR_ACK:		// Own SLA+W has been received ACK has been returned
	case I2C_SRX_ADR_ACK_M_ARB_LOST:	// Arbitration lost in SLA+R/W as Master; own SLA+W
										// has been received; ACK has been returned

	    I2C_statusReg.RxDataInBuf = true; // Don't need to clear I2C_statusRegister.generalAddressCall due to that it is the default state.
     54e:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <I2C_statusReg>
     552:	82 60       	ori	r24, 0x02	; 2
     554:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <I2C_statusReg>

	    I2C_bufPtr   = 0;	    // Set buffer pointer to first data location
     558:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__data_end>
	    // Reset the TWI Interrupt to wait for a new event.

	    // TWI Interface enabled
	    // Enable TWI Interrupt and clear the flag to send byte
	    // Expect ACK on this transmission
	    TWCR =  (1<<TWEN)|
     55c:	85 ec       	ldi	r24, 0xC5	; 197
     55e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	    		(1<<TWIE)|(1<<TWINT)|
	    		(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|
	    		(0<<TWWC);
		break;
     562:	2a c0       	rjmp	.+84     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

	case I2C_SRX_ADR_DATA_ACK:	// Previously addressed with own SLA+W; data has been received; ACK has been returned
	case I2C_SRX_GEN_DATA_ACK:	// Previously addressed with general call; data has been received; ACK has been returned

		I2C_buf[I2C_bufPtr++] = TWDR;
     564:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__data_end>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	8e 0f       	add	r24, r30
     56c:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
     570:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	e4 57       	subi	r30, 0x74	; 116
     578:	fd 4f       	sbci	r31, 0xFD	; 253
     57a:	80 83       	st	Z, r24

		I2C_statusReg.lastTransOK = true;		// Set flag transmission successful.
     57c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <I2C_statusReg>
     580:	81 60       	ori	r24, 0x01	; 1
     582:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <I2C_statusReg>

		// Reset the TWI Interrupt to wait for a new event.
		TWCR = (1<<TWEN)|                          // TWI Interface enabled
     586:	85 ec       	ldi	r24, 0xC5	; 197
     588:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
		       (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
		       (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Send ACK after next reception
		       (0<<TWWC);
		break;
     58c:	15 c0       	rjmp	.+42     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

    case I2C_SRX_ADR_DATA_NACK: // Previously addressed with own SLA+W; data has been received; NOT ACK has been returned
    case I2C_SRX_GEN_DATA_NACK: // Previously addressed with general call; data has been received; NOT ACK has been returned

    	// NOT ACK back at the Master
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     58e:	85 e8       	ldi	r24, 0x85	; 133
     590:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Do not acknowledge on any new requests.
               (0<<TWWC);
		break;
     594:	11 c0       	rjmp	.+34     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

    case I2C_SRX_STOP_RESTART:  // A STOP condition or repeated START condition has been received while still addressed as Slave

    	I2C_checkBusyAfterStop = I2C_HOW_MANY_BUSY_CHECKS_AFTER_STOP; // do some busy checks before hitting the bus again.
     596:	84 e0       	ldi	r24, 0x04	; 4
     598:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <I2C_checkBusyAfterStop>

        // Put TWI Transceiver in passive mode.
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     59c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (0<<TWIE)|(0<<TWINT)|               // Disable Interrupt
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Do not acknowledge on any new requests.
               (0<<TWWC);
        break;
     5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


// ERRORS AND FAULT CONDITIONS

    case I2C_ARB_LOST:          						// Arbitration lost
		TWCR = (1<<TWEN)|                               // TWI Interface enabled
     5a2:	85 ee       	ldi	r24, 0xE5	; 229
     5a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			   (1<<TWIE)|(1<<TWINT)|                    // Enable TWI Interrupt and clear the flag
			   (1<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|         // Initiate a (RE)START condition.
			   (0<<TWWC);                               //
		break;
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

    case I2C_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    case I2C_NO_STATE:          // No relevant state information available TWINT = 0

    default:
		I2C_state = TWSR;                               // Store TWSR and automatically sets clears noErrors bit.
     5aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     5ae:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>

														// Reset TWI Interface
		TWCR = (1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     5b2:	85 ed       	ldi	r24, 0xD5	; 213
     5b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			 (1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
			 (1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|    		// Acknowledge on any new requests. Send stop.
			 (0<<TWWC);                               	//
      	break;
  }
}
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	0f 90       	pop	r0
     5d2:	1f 90       	pop	r1
     5d4:	18 95       	reti

000005d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     5d6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5d8:	03 96       	adiw	r24, 0x03	; 3
     5da:	92 83       	std	Z+2, r25	; 0x02
     5dc:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     5de:	2f ef       	ldi	r18, 0xFF	; 255
     5e0:	3f ef       	ldi	r19, 0xFF	; 255
     5e2:	34 83       	std	Z+4, r19	; 0x04
     5e4:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5e6:	96 83       	std	Z+6, r25	; 0x06
     5e8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ea:	90 87       	std	Z+8, r25	; 0x08
     5ec:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     5ee:	10 82       	st	Z, r1
     5f0:	08 95       	ret

000005f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     5f2:	fc 01       	movw	r30, r24
     5f4:	11 86       	std	Z+9, r1	; 0x09
     5f6:	10 86       	std	Z+8, r1	; 0x08
     5f8:	08 95       	ret

000005fa <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	9c 01       	movw	r18, r24
     600:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     602:	dc 01       	movw	r26, r24
     604:	11 96       	adiw	r26, 0x01	; 1
     606:	cd 91       	ld	r28, X+
     608:	dc 91       	ld	r29, X
     60a:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     60c:	d3 83       	std	Z+3, r29	; 0x03
     60e:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     610:	8c 81       	ldd	r24, Y+4	; 0x04
     612:	9d 81       	ldd	r25, Y+5	; 0x05
     614:	95 83       	std	Z+5, r25	; 0x05
     616:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     618:	8c 81       	ldd	r24, Y+4	; 0x04
     61a:	9d 81       	ldd	r25, Y+5	; 0x05
     61c:	dc 01       	movw	r26, r24
     61e:	13 96       	adiw	r26, 0x03	; 3
     620:	7c 93       	st	X, r23
     622:	6e 93       	st	-X, r22
     624:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     626:	7d 83       	std	Y+5, r23	; 0x05
     628:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     62a:	31 87       	std	Z+9, r19	; 0x09
     62c:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     62e:	f9 01       	movw	r30, r18
     630:	80 81       	ld	r24, Z
     632:	8f 5f       	subi	r24, 0xFF	; 255
     634:	80 83       	st	Z, r24
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     642:	48 81       	ld	r20, Y
     644:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     646:	4f 3f       	cpi	r20, 0xFF	; 255
     648:	2f ef       	ldi	r18, 0xFF	; 255
     64a:	52 07       	cpc	r21, r18
     64c:	21 f4       	brne	.+8      	; 0x656 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     64e:	fc 01       	movw	r30, r24
     650:	a7 81       	ldd	r26, Z+7	; 0x07
     652:	b0 85       	ldd	r27, Z+8	; 0x08
     654:	0d c0       	rjmp	.+26     	; 0x670 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     656:	dc 01       	movw	r26, r24
     658:	13 96       	adiw	r26, 0x03	; 3
     65a:	01 c0       	rjmp	.+2      	; 0x65e <vListInsert+0x22>
     65c:	df 01       	movw	r26, r30
     65e:	12 96       	adiw	r26, 0x02	; 2
     660:	ed 91       	ld	r30, X+
     662:	fc 91       	ld	r31, X
     664:	13 97       	sbiw	r26, 0x03	; 3
     666:	20 81       	ld	r18, Z
     668:	31 81       	ldd	r19, Z+1	; 0x01
     66a:	42 17       	cp	r20, r18
     66c:	53 07       	cpc	r21, r19
     66e:	b0 f7       	brcc	.-20     	; 0x65c <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	ed 91       	ld	r30, X+
     674:	fc 91       	ld	r31, X
     676:	13 97       	sbiw	r26, 0x03	; 3
     678:	fb 83       	std	Y+3, r31	; 0x03
     67a:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     67c:	d5 83       	std	Z+5, r29	; 0x05
     67e:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     680:	bd 83       	std	Y+5, r27	; 0x05
     682:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     684:	13 96       	adiw	r26, 0x03	; 3
     686:	dc 93       	st	X, r29
     688:	ce 93       	st	-X, r28
     68a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     68c:	99 87       	std	Y+9, r25	; 0x09
     68e:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     690:	fc 01       	movw	r30, r24
     692:	20 81       	ld	r18, Z
     694:	2f 5f       	subi	r18, 0xFF	; 255
     696:	20 83       	st	Z, r18
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     6a4:	a0 85       	ldd	r26, Z+8	; 0x08
     6a6:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6a8:	c2 81       	ldd	r28, Z+2	; 0x02
     6aa:	d3 81       	ldd	r29, Z+3	; 0x03
     6ac:	84 81       	ldd	r24, Z+4	; 0x04
     6ae:	95 81       	ldd	r25, Z+5	; 0x05
     6b0:	9d 83       	std	Y+5, r25	; 0x05
     6b2:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6b4:	c4 81       	ldd	r28, Z+4	; 0x04
     6b6:	d5 81       	ldd	r29, Z+5	; 0x05
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	9b 83       	std	Y+3, r25	; 0x03
     6be:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     6c0:	11 96       	adiw	r26, 0x01	; 1
     6c2:	8d 91       	ld	r24, X+
     6c4:	9c 91       	ld	r25, X
     6c6:	12 97       	sbiw	r26, 0x02	; 2
     6c8:	e8 17       	cp	r30, r24
     6ca:	f9 07       	cpc	r31, r25
     6cc:	31 f4       	brne	.+12     	; 0x6da <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     6ce:	84 81       	ldd	r24, Z+4	; 0x04
     6d0:	95 81       	ldd	r25, Z+5	; 0x05
     6d2:	12 96       	adiw	r26, 0x02	; 2
     6d4:	9c 93       	st	X, r25
     6d6:	8e 93       	st	-X, r24
     6d8:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     6da:	11 86       	std	Z+9, r1	; 0x09
     6dc:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     6de:	8c 91       	ld	r24, X
     6e0:	81 50       	subi	r24, 0x01	; 1
     6e2:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <watchdogTaak>:
		
		waarde = ((uint16_t)data[0]<<8) | data[1];
		
		humidity=((125*waarde)/65536.0) -6;

		watchdogTemp = 1;
     6ea:	8f e9       	ldi	r24, 0x9F	; 159
     6ec:	9f e0       	ldi	r25, 0x0F	; 15
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <watchdogTaak+0x4>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <watchdogTaak+0xa>
     6f4:	00 00       	nop
     6f6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <watchdogSonar>
     6fa:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <watchdogSonar+0x1>
     6fe:	89 2b       	or	r24, r25
     700:	a1 f3       	breq	.-24     	; 0x6ea <watchdogTaak>
     702:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <watchdogServo>
     706:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <watchdogServo+0x1>
     70a:	89 2b       	or	r24, r25
     70c:	71 f3       	breq	.-36     	; 0x6ea <watchdogTaak>
     70e:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <watchdogGyro>
     712:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <watchdogGyro+0x1>
     716:	89 2b       	or	r24, r25
     718:	41 f3       	breq	.-48     	; 0x6ea <watchdogTaak>
     71a:	a8 95       	wdr
     71c:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <watchdogSonar+0x1>
     720:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <watchdogSonar>
     724:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <watchdogServo+0x1>
     728:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <watchdogServo>
     72c:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <watchdogGyro+0x1>
     730:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <watchdogGyro>
     734:	da cf       	rjmp	.-76     	; 0x6ea <watchdogTaak>

00000736 <UART_Init>:
     736:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     73a:	87 e6       	ldi	r24, 0x67	; 103
     73c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     740:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     744:	86 e0       	ldi	r24, 0x06	; 6
     746:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     74a:	88 e1       	ldi	r24, 0x18	; 24
     74c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     750:	08 95       	ret

00000752 <UART_Transmit>:
     752:	e8 ec       	ldi	r30, 0xC8	; 200
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	90 81       	ld	r25, Z
     758:	95 ff       	sbrs	r25, 5
     75a:	fd cf       	rjmp	.-6      	; 0x756 <UART_Transmit+0x4>
     75c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     760:	08 95       	ret

00000762 <__vector_36>:
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	0b b6       	in	r0, 0x3b	; 59
     76e:	0f 92       	push	r0
     770:	2f 93       	push	r18
     772:	3f 93       	push	r19
     774:	4f 93       	push	r20
     776:	5f 93       	push	r21
     778:	6f 93       	push	r22
     77a:	7f 93       	push	r23
     77c:	8f 93       	push	r24
     77e:	9f 93       	push	r25
     780:	af 93       	push	r26
     782:	bf 93       	push	r27
     784:	ef 93       	push	r30
     786:	ff 93       	push	r31
     788:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     78c:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <ontvang>
     790:	e0 df       	rcall	.-64     	; 0x752 <UART_Transmit>
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <state+0x1>
     79a:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <state>
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	0b be       	out	0x3b, r0	; 59
     7ba:	0f 90       	pop	r0
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	0f 90       	pop	r0
     7c0:	1f 90       	pop	r1
     7c2:	18 95       	reti

000007c4 <UART_Transmit_String>:
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ec 01       	movw	r28, r24
     7ca:	88 81       	ld	r24, Y
     7cc:	88 23       	and	r24, r24
     7ce:	29 f0       	breq	.+10     	; 0x7da <UART_Transmit_String+0x16>
     7d0:	21 96       	adiw	r28, 0x01	; 1
     7d2:	bf df       	rcall	.-130    	; 0x752 <UART_Transmit>
     7d4:	89 91       	ld	r24, Y+
     7d6:	81 11       	cpse	r24, r1
     7d8:	fc cf       	rjmp	.-8      	; 0x7d2 <UART_Transmit_String+0xe>
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <UART_Transmit_Integer>:
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	61 97       	sbiw	r28, 0x11	; 17
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	4a e0       	ldi	r20, 0x0A	; 10
     7fa:	be 01       	movw	r22, r28
     7fc:	6f 5f       	subi	r22, 0xFF	; 255
     7fe:	7f 4f       	sbci	r23, 0xFF	; 255
     800:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__itoa_ncheck>
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	dd df       	rcall	.-70     	; 0x7c4 <UART_Transmit_String>
     80a:	61 96       	adiw	r28, 0x11	; 17
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <servoTaak>:
     81c:	0a e8       	ldi	r16, 0x8A	; 138
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	c1 e0       	ldi	r28, 0x01	; 1
     822:	d0 e0       	ldi	r29, 0x00	; 0
     824:	e1 2c       	mov	r14, r1
     826:	f1 2c       	mov	r15, r1
     828:	f0 92 2d 04 	sts	0x042D, r15	; 0x80042d <hoek+0x1>
     82c:	e0 92 2c 04 	sts	0x042C, r14	; 0x80042c <hoek>
     830:	c7 01       	movw	r24, r14
     832:	99 27       	eor	r25, r25
     834:	9c 01       	movw	r18, r24
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	22 0f       	add	r18, r18
     83c:	33 1f       	adc	r19, r19
     83e:	22 0f       	add	r18, r18
     840:	33 1f       	adc	r19, r19
     842:	82 1b       	sub	r24, r18
     844:	93 0b       	sbc	r25, r19
     846:	95 5b       	subi	r25, 0xB5	; 181
     848:	f8 01       	movw	r30, r16
     84a:	91 83       	std	Z+1, r25	; 0x01
     84c:	80 83       	st	Z, r24
     84e:	ff ef       	ldi	r31, 0xFF	; 255
     850:	24 e3       	ldi	r18, 0x34	; 52
     852:	8c e0       	ldi	r24, 0x0C	; 12
     854:	f1 50       	subi	r31, 0x01	; 1
     856:	20 40       	sbci	r18, 0x00	; 0
     858:	80 40       	sbci	r24, 0x00	; 0
     85a:	e1 f7       	brne	.-8      	; 0x854 <servoTaak+0x38>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <servoTaak+0x42>
     85e:	00 00       	nop
     860:	87 e0       	ldi	r24, 0x07	; 7
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	af df       	rcall	.-162    	; 0x7c4 <UART_Transmit_String>
     866:	60 91 2c 04 	lds	r22, 0x042C	; 0x80042c <hoek>
     86a:	70 91 2d 04 	lds	r23, 0x042D	; 0x80042d <hoek+0x1>
     86e:	07 2e       	mov	r0, r23
     870:	00 0c       	add	r0, r0
     872:	88 0b       	sbc	r24, r24
     874:	99 0b       	sbc	r25, r25
     876:	b4 df       	rcall	.-152    	; 0x7e0 <UART_Transmit_Integer>
     878:	80 e1       	ldi	r24, 0x10	; 16
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	a3 df       	rcall	.-186    	; 0x7c4 <UART_Transmit_String>
     87e:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <afstand>
     882:	70 91 38 04 	lds	r23, 0x0438	; 0x800438 <afstand+0x1>
     886:	07 2e       	mov	r0, r23
     888:	00 0c       	add	r0, r0
     88a:	88 0b       	sbc	r24, r24
     88c:	99 0b       	sbc	r25, r25
     88e:	a8 df       	rcall	.-176    	; 0x7e0 <UART_Transmit_Integer>
     890:	8b e1       	ldi	r24, 0x1B	; 27
     892:	92 e0       	ldi	r25, 0x02	; 2
     894:	97 df       	rcall	.-210    	; 0x7c4 <UART_Transmit_String>
     896:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <gyroX>
     89a:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <gyroX+0x1>
     89e:	07 2e       	mov	r0, r23
     8a0:	00 0c       	add	r0, r0
     8a2:	88 0b       	sbc	r24, r24
     8a4:	99 0b       	sbc	r25, r25
     8a6:	9c df       	rcall	.-200    	; 0x7e0 <UART_Transmit_Integer>
     8a8:	85 e2       	ldi	r24, 0x25	; 37
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	8b df       	rcall	.-234    	; 0x7c4 <UART_Transmit_String>
     8ae:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <gyroY>
     8b2:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <gyroY+0x1>
     8b6:	07 2e       	mov	r0, r23
     8b8:	00 0c       	add	r0, r0
     8ba:	88 0b       	sbc	r24, r24
     8bc:	99 0b       	sbc	r25, r25
     8be:	90 df       	rcall	.-224    	; 0x7e0 <UART_Transmit_Integer>
     8c0:	8a e2       	ldi	r24, 0x2A	; 42
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	7f df       	rcall	.-258    	; 0x7c4 <UART_Transmit_String>
     8c6:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <gyroZ>
     8ca:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <gyroZ+0x1>
     8ce:	07 2e       	mov	r0, r23
     8d0:	00 0c       	add	r0, r0
     8d2:	88 0b       	sbc	r24, r24
     8d4:	99 0b       	sbc	r25, r25
     8d6:	84 df       	rcall	.-248    	; 0x7e0 <UART_Transmit_Integer>
     8d8:	8f e2       	ldi	r24, 0x2F	; 47
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	73 df       	rcall	.-282    	; 0x7c4 <UART_Transmit_String>
     8de:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <accelX>
     8e2:	70 91 1b 03 	lds	r23, 0x031B	; 0x80031b <accelX+0x1>
     8e6:	07 2e       	mov	r0, r23
     8e8:	00 0c       	add	r0, r0
     8ea:	88 0b       	sbc	r24, r24
     8ec:	99 0b       	sbc	r25, r25
     8ee:	78 df       	rcall	.-272    	; 0x7e0 <UART_Transmit_Integer>
     8f0:	85 e2       	ldi	r24, 0x25	; 37
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	67 df       	rcall	.-306    	; 0x7c4 <UART_Transmit_String>
     8f6:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <accelY>
     8fa:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <accelY+0x1>
     8fe:	07 2e       	mov	r0, r23
     900:	00 0c       	add	r0, r0
     902:	88 0b       	sbc	r24, r24
     904:	99 0b       	sbc	r25, r25
     906:	6c df       	rcall	.-296    	; 0x7e0 <UART_Transmit_Integer>
     908:	8a e2       	ldi	r24, 0x2A	; 42
     90a:	92 e0       	ldi	r25, 0x02	; 2
     90c:	5b df       	rcall	.-330    	; 0x7c4 <UART_Transmit_String>
     90e:	60 91 35 04 	lds	r22, 0x0435	; 0x800435 <accelZ>
     912:	70 91 36 04 	lds	r23, 0x0436	; 0x800436 <accelZ+0x1>
     916:	07 2e       	mov	r0, r23
     918:	00 0c       	add	r0, r0
     91a:	88 0b       	sbc	r24, r24
     91c:	99 0b       	sbc	r25, r25
     91e:	60 df       	rcall	.-320    	; 0x7e0 <UART_Transmit_Integer>
     920:	d0 93 33 04 	sts	0x0433, r29	; 0x800433 <watchdogServo+0x1>
     924:	c0 93 32 04 	sts	0x0432, r28	; 0x800432 <watchdogServo>
     928:	9b e1       	ldi	r25, 0x1B	; 27
     92a:	e9 0e       	add	r14, r25
     92c:	f1 1c       	adc	r15, r1
     92e:	e8 ed       	ldi	r30, 0xD8	; 216
     930:	ee 16       	cp	r14, r30
     932:	f1 04       	cpc	r15, r1
     934:	09 f0       	breq	.+2      	; 0x938 <servoTaak+0x11c>
     936:	78 cf       	rjmp	.-272    	; 0x828 <servoTaak+0xc>
     938:	75 cf       	rjmp	.-278    	; 0x824 <servoTaak+0x8>

0000093a <INT1_init>:
     93a:	e8 e6       	ldi	r30, 0x68	; 104
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	81 60       	ori	r24, 0x01	; 1
     942:	80 83       	st	Z, r24
     944:	eb e6       	ldi	r30, 0x6B	; 107
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	82 60       	ori	r24, 0x02	; 2
     94c:	80 83       	st	Z, r24
     94e:	08 95       	ret

00000950 <__vector_9>:
     950:	1f 92       	push	r1
     952:	0f 92       	push	r0
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	0f 92       	push	r0
     958:	11 24       	eor	r1, r1
     95a:	0b b6       	in	r0, 0x3b	; 59
     95c:	0f 92       	push	r0
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
     976:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <running>
     97a:	88 23       	and	r24, r24
     97c:	d1 f1       	breq	.+116    	; 0x9f2 <__vector_9+0xa2>
     97e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <up>
     982:	81 11       	cpse	r24, r1
     984:	10 c0       	rjmp	.+32     	; 0x9a6 <__vector_9+0x56>
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <up>
     98c:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <timerCounter>
     990:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <timerCounter+0x1>
     994:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <timerCounter+0x2>
     998:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <timerCounter+0x3>
     99c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     9a0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     9a4:	26 c0       	rjmp	.+76     	; 0x9f2 <__vector_9+0xa2>
     9a6:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <up>
     9aa:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <timerCounter>
     9ae:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <timerCounter+0x1>
     9b2:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <timerCounter+0x2>
     9b6:	50 91 ab 02 	lds	r21, 0x02AB	; 0x8002ab <timerCounter+0x3>
     9ba:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     9be:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     9c2:	af ef       	ldi	r26, 0xFF	; 255
     9c4:	bf ef       	ldi	r27, 0xFF	; 255
     9c6:	0e 94 28 13 	call	0x2650	; 0x2650 <__muluhisi3>
     9ca:	6e 0f       	add	r22, r30
     9cc:	7f 1f       	adc	r23, r31
     9ce:	81 1d       	adc	r24, r1
     9d0:	91 1d       	adc	r25, r1
     9d2:	24 e7       	ldi	r18, 0x74	; 116
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	0e 94 ef 12 	call	0x25de	; 0x25de <__udivmodsi4>
     9de:	20 93 a4 02 	sts	0x02A4, r18	; 0x8002a4 <result>
     9e2:	30 93 a5 02 	sts	0x02A5, r19	; 0x8002a5 <result+0x1>
     9e6:	40 93 a6 02 	sts	0x02A6, r20	; 0x8002a6 <result+0x2>
     9ea:	50 93 a7 02 	sts	0x02A7, r21	; 0x8002a7 <result+0x3>
     9ee:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <running>
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0b be       	out	0x3b, r0	; 59
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <pulse>:
     a18:	28 98       	cbi	0x05, 0	; 5
     a1a:	85 e0       	ldi	r24, 0x05	; 5
     a1c:	8a 95       	dec	r24
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <pulse+0x4>
     a20:	00 00       	nop
     a22:	28 9a       	sbi	0x05, 0	; 5
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <running>
     a2a:	85 e3       	ldi	r24, 0x35	; 53
     a2c:	8a 95       	dec	r24
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <pulse+0x14>
     a30:	00 00       	nop
     a32:	28 98       	cbi	0x05, 0	; 5
     a34:	08 95       	ret

00000a36 <sonarTaak>:
     a36:	c1 e0       	ldi	r28, 0x01	; 1
     a38:	d0 e0       	ldi	r29, 0x00	; 0
     a3a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <running>
     a3e:	81 11       	cpse	r24, r1
     a40:	16 c0       	rjmp	.+44     	; 0xa6e <sonarTaak+0x38>
     a42:	2f ef       	ldi	r18, 0xFF	; 255
     a44:	80 e7       	ldi	r24, 0x70	; 112
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	21 50       	subi	r18, 0x01	; 1
     a4a:	80 40       	sbci	r24, 0x00	; 0
     a4c:	90 40       	sbci	r25, 0x00	; 0
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <sonarTaak+0x12>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <sonarTaak+0x1c>
     a52:	00 00       	nop
     a54:	e1 df       	rcall	.-62     	; 0xa18 <pulse>
     a56:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <result>
     a5a:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <result+0x1>
     a5e:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <result+0x2>
     a62:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <result+0x3>
     a66:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <afstand+0x1>
     a6a:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <afstand>
     a6e:	d0 93 1f 03 	sts	0x031F, r29	; 0x80031f <watchdogSonar+0x1>
     a72:	c0 93 1e 03 	sts	0x031E, r28	; 0x80031e <watchdogSonar>
     a76:	e1 cf       	rjmp	.-62     	; 0xa3a <sonarTaak+0x4>

00000a78 <timer3_init>:
     a78:	e1 e9       	ldi	r30, 0x91	; 145
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	82 60       	ori	r24, 0x02	; 2
     a80:	80 83       	st	Z, r24
     a82:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a86:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a8a:	e1 e7       	ldi	r30, 0x71	; 113
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	81 60       	ori	r24, 0x01	; 1
     a92:	80 83       	st	Z, r24
     a94:	08 95       	ret

00000a96 <__vector_35>:
     a96:	1f 92       	push	r1
     a98:	0f 92       	push	r0
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	0f 92       	push	r0
     a9e:	11 24       	eor	r1, r1
     aa0:	0b b6       	in	r0, 0x3b	; 59
     aa2:	0f 92       	push	r0
     aa4:	2f 93       	push	r18
     aa6:	3f 93       	push	r19
     aa8:	4f 93       	push	r20
     aaa:	5f 93       	push	r21
     aac:	6f 93       	push	r22
     aae:	7f 93       	push	r23
     ab0:	8f 93       	push	r24
     ab2:	9f 93       	push	r25
     ab4:	af 93       	push	r26
     ab6:	bf 93       	push	r27
     ab8:	ef 93       	push	r30
     aba:	ff 93       	push	r31
     abc:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <up>
     ac0:	88 23       	and	r24, r24
     ac2:	e9 f1       	breq	.+122    	; 0xb3e <__vector_35+0xa8>
     ac4:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <timerCounter>
     ac8:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <timerCounter+0x1>
     acc:	a0 91 aa 02 	lds	r26, 0x02AA	; 0x8002aa <timerCounter+0x2>
     ad0:	b0 91 ab 02 	lds	r27, 0x02AB	; 0x8002ab <timerCounter+0x3>
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	a1 1d       	adc	r26, r1
     ad8:	b1 1d       	adc	r27, r1
     ada:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <timerCounter>
     ade:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <timerCounter+0x1>
     ae2:	a0 93 aa 02 	sts	0x02AA, r26	; 0x8002aa <timerCounter+0x2>
     ae6:	b0 93 ab 02 	sts	0x02AB, r27	; 0x8002ab <timerCounter+0x3>
     aea:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <timerCounter>
     aee:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <timerCounter+0x1>
     af2:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <timerCounter+0x2>
     af6:	50 91 ab 02 	lds	r21, 0x02AB	; 0x8002ab <timerCounter+0x3>
     afa:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     afe:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     b02:	af ef       	ldi	r26, 0xFF	; 255
     b04:	bf ef       	ldi	r27, 0xFF	; 255
     b06:	0e 94 28 13 	call	0x2650	; 0x2650 <__muluhisi3>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	8e 0f       	add	r24, r30
     b10:	9f 1f       	adc	r25, r31
     b12:	a1 1d       	adc	r26, r1
     b14:	b1 1d       	adc	r27, r1
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	94 4d       	sbci	r25, 0xD4	; 212
     b1a:	a0 43       	sbci	r26, 0x30	; 48
     b1c:	b1 05       	cpc	r27, r1
     b1e:	78 f0       	brcs	.+30     	; 0xb3e <__vector_35+0xa8>
     b20:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <up>
     b24:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <running>
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	9f ef       	ldi	r25, 0xFF	; 255
     b2c:	dc 01       	movw	r26, r24
     b2e:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <result>
     b32:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <result+0x1>
     b36:	a0 93 a6 02 	sts	0x02A6, r26	; 0x8002a6 <result+0x2>
     b3a:	b0 93 a7 02 	sts	0x02A7, r27	; 0x8002a7 <result+0x3>
     b3e:	ff 91       	pop	r31
     b40:	ef 91       	pop	r30
     b42:	bf 91       	pop	r27
     b44:	af 91       	pop	r26
     b46:	9f 91       	pop	r25
     b48:	8f 91       	pop	r24
     b4a:	7f 91       	pop	r23
     b4c:	6f 91       	pop	r22
     b4e:	5f 91       	pop	r21
     b50:	4f 91       	pop	r20
     b52:	3f 91       	pop	r19
     b54:	2f 91       	pop	r18
     b56:	0f 90       	pop	r0
     b58:	0b be       	out	0x3b, r0	; 59
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti

00000b64 <initServo>:
     b64:	26 9a       	sbi	0x04, 6	; 4
     b66:	82 e3       	ldi	r24, 0x32	; 50
     b68:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     b6c:	82 e1       	ldi	r24, 0x12	; 18
     b6e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     b72:	80 e2       	ldi	r24, 0x20	; 32
     b74:	9e e4       	ldi	r25, 0x4E	; 78
     b76:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     b7a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     b7e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     b82:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	9b e4       	ldi	r25, 0x4B	; 75
     b8a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     b8e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     b92:	ef e6       	ldi	r30, 0x6F	; 111
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	80 83       	st	Z, r24
     b9c:	08 95       	ret

00000b9e <init_master>:
     b9e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ba2:	88 e4       	ldi	r24, 0x48	; 72
     ba4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     ba8:	84 e0       	ldi	r24, 0x04	; 4
     baa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     bae:	08 95       	ret

00000bb0 <main>:
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	43 e0       	ldi	r20, 0x03	; 3
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	99 d4       	rcall	.+2354   	; 0x14f0 <xQueueGenericCreate>
     bbe:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <sem+0x1>
     bc2:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <sem>
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	bb d4       	rcall	.+2422   	; 0x1548 <xQueueGenericSend>
     bd2:	8a b1       	in	r24, 0x0a	; 10
     bd4:	83 60       	ori	r24, 0x03	; 3
     bd6:	8a b9       	out	0x0a, r24	; 10
     bd8:	20 9a       	sbi	0x04, 0	; 4
     bda:	ad dd       	rcall	.-1190   	; 0x736 <UART_Init>
     bdc:	ae de       	rcall	.-676    	; 0x93a <INT1_init>
     bde:	4c df       	rcall	.-360    	; 0xa78 <timer3_init>
     be0:	c1 df       	rcall	.-126    	; 0xb64 <initServo>
     be2:	78 94       	sei
     be4:	dc df       	rcall	.-72     	; 0xb9e <init_master>
     be6:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <watchdogSonar+0x1>
     bea:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <watchdogSonar>
     bee:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <watchdogServo+0x1>
     bf2:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <watchdogServo>
     bf6:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <watchdogTemp+0x1>
     bfa:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <watchdogTemp>
     bfe:	98 e2       	ldi	r25, 0x28	; 40
     c00:	88 e1       	ldi	r24, 0x18	; 24
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	a8 95       	wdr
     c08:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c12:	86 e1       	ldi	r24, 0x16	; 22
     c14:	9a ee       	ldi	r25, 0xEA	; 234
     c16:	ac e9       	ldi	r26, 0x9C	; 156
     c18:	bb e3       	ldi	r27, 0x3B	; 59
     c1a:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <_accelScale>
     c1e:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <_accelScale+0x1>
     c22:	a0 93 3b 04 	sts	0x043B, r26	; 0x80043b <_accelScale+0x2>
     c26:	b0 93 3c 04 	sts	0x043C, r27	; 0x80043c <_accelScale+0x3>
     c2a:	83 ee       	ldi	r24, 0xE3	; 227
     c2c:	90 ea       	ldi	r25, 0xA0	; 160
     c2e:	ab e8       	ldi	r26, 0x8B	; 139
     c30:	ba e3       	ldi	r27, 0x3A	; 58
     c32:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <_gyroScale>
     c36:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <_gyroScale+0x1>
     c3a:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <_gyroScale+0x2>
     c3e:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <_gyroScale+0x3>
     c42:	8a e3       	ldi	r24, 0x3A	; 58
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	be dd       	rcall	.-1156   	; 0x7c4 <UART_Transmit_String>
     c48:	e1 2c       	mov	r14, r1
     c4a:	f1 2c       	mov	r15, r1
     c4c:	03 e0       	ldi	r16, 0x03	; 3
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	51 e0       	ldi	r21, 0x01	; 1
     c56:	69 e4       	ldi	r22, 0x49	; 73
     c58:	72 e0       	ldi	r23, 0x02	; 2
     c5a:	8b e1       	ldi	r24, 0x1B	; 27
     c5c:	95 e0       	ldi	r25, 0x05	; 5
     c5e:	5f d7       	rcall	.+3774   	; 0x1b1e <xTaskCreate>
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	51 e0       	ldi	r21, 0x01	; 1
     c68:	66 e5       	ldi	r22, 0x56	; 86
     c6a:	72 e0       	ldi	r23, 0x02	; 2
     c6c:	8e e0       	ldi	r24, 0x0E	; 14
     c6e:	94 e0       	ldi	r25, 0x04	; 4
     c70:	56 d7       	rcall	.+3756   	; 0x1b1e <xTaskCreate>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	51 e0       	ldi	r21, 0x01	; 1
     c7a:	62 e6       	ldi	r22, 0x62	; 98
     c7c:	72 e0       	ldi	r23, 0x02	; 2
     c7e:	88 ec       	ldi	r24, 0xC8	; 200
     c80:	96 e0       	ldi	r25, 0x06	; 6
     c82:	4d d7       	rcall	.+3738   	; 0x1b1e <xTaskCreate>
     c84:	04 e0       	ldi	r16, 0x04	; 4
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	51 e0       	ldi	r21, 0x01	; 1
     c8e:	63 e7       	ldi	r22, 0x73	; 115
     c90:	72 e0       	ldi	r23, 0x02	; 2
     c92:	85 e7       	ldi	r24, 0x75	; 117
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	43 d7       	rcall	.+3718   	; 0x1b1e <xTaskCreate>
     c98:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <vTaskStartScheduler>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	08 95       	ret

00000ca8 <ontvangen>:
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	ec eb       	ldi	r30, 0xBC	; 188
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	90 81       	ld	r25, Z
     cba:	90 62       	ori	r25, 0x20	; 32
     cbc:	90 83       	st	Z, r25
     cbe:	90 81       	ld	r25, Z
     cc0:	99 23       	and	r25, r25
     cc2:	ec f7       	brge	.-6      	; 0xcbe <ontvangen+0x16>
     cc4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     cc8:	88 0f       	add	r24, r24
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     cd0:	84 e8       	ldi	r24, 0x84	; 132
     cd2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     cd6:	ec eb       	ldi	r30, 0xBC	; 188
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	88 23       	and	r24, r24
     cde:	ec f7       	brge	.-6      	; 0xcda <ontvangen+0x32>
     ce0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ce4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ce8:	db 01       	movw	r26, r22
     cea:	8c 93       	st	X, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	41 50       	subi	r20, 0x01	; 1
     cf2:	51 09       	sbc	r21, r1
     cf4:	ec eb       	ldi	r30, 0xBC	; 188
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	0f 2e       	mov	r0, r31
     cfa:	f4 ec       	ldi	r31, 0xC4	; 196
     cfc:	ff 2e       	mov	r15, r31
     cfe:	f0 2d       	mov	r31, r0
     d00:	0f 2e       	mov	r0, r31
     d02:	f4 e8       	ldi	r31, 0x84	; 132
     d04:	ef 2e       	mov	r14, r31
     d06:	f0 2d       	mov	r31, r0
     d08:	09 eb       	ldi	r16, 0xB9	; 185
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	cb eb       	ldi	r28, 0xBB	; 187
     d0e:	d0 e0       	ldi	r29, 0x00	; 0
     d10:	29 2f       	mov	r18, r25
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	24 17       	cp	r18, r20
     d16:	35 07       	cpc	r19, r21
     d18:	11 f4       	brne	.+4      	; 0xd1e <ontvangen+0x76>
     d1a:	e0 82       	st	Z, r14
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <ontvangen+0x78>
     d1e:	f0 82       	st	Z, r15
     d20:	80 81       	ld	r24, Z
     d22:	88 23       	and	r24, r24
     d24:	ec f7       	brge	.-6      	; 0xd20 <ontvangen+0x78>
     d26:	d8 01       	movw	r26, r16
     d28:	8c 91       	ld	r24, X
     d2a:	28 81       	ld	r18, Y
     d2c:	db 01       	movw	r26, r22
     d2e:	a9 0f       	add	r26, r25
     d30:	b1 1d       	adc	r27, r1
     d32:	2c 93       	st	X, r18
     d34:	9f 5f       	subi	r25, 0xFF	; 255
     d36:	80 35       	cpi	r24, 0x50	; 80
     d38:	59 f3       	breq	.-42     	; 0xd10 <ontvangen+0x68>
     d3a:	84 e9       	ldi	r24, 0x94	; 148
     d3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	08 95       	ret

00000d4e <verzenden>:
     d4e:	ec eb       	ldi	r30, 0xBC	; 188
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	90 81       	ld	r25, Z
     d54:	90 62       	ori	r25, 0x20	; 32
     d56:	90 83       	st	Z, r25
     d58:	90 81       	ld	r25, Z
     d5a:	99 23       	and	r25, r25
     d5c:	ec f7       	brge	.-6      	; 0xd58 <verzenden+0xa>
     d5e:	88 0f       	add	r24, r24
     d60:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     d64:	84 e8       	ldi	r24, 0x84	; 132
     d66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d6a:	ec eb       	ldi	r30, 0xBC	; 188
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	88 23       	and	r24, r24
     d72:	ec f7       	brge	.-6      	; 0xd6e <verzenden+0x20>
     d74:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     d78:	84 e8       	ldi	r24, 0x84	; 132
     d7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d7e:	ec eb       	ldi	r30, 0xBC	; 188
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	88 23       	and	r24, r24
     d86:	ec f7       	brge	.-6      	; 0xd82 <verzenden+0x34>
     d88:	84 e9       	ldi	r24, 0x94	; 148
     d8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     d8e:	08 95       	ret

00000d90 <gyroTaak>:
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	1f 92       	push	r1
     d96:	1f 92       	push	r1
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	01 e0       	ldi	r16, 0x01	; 1
     d9e:	10 e0       	ldi	r17, 0x00	; 0
     da0:	6b e3       	ldi	r22, 0x3B	; 59
     da2:	88 e6       	ldi	r24, 0x68	; 104
     da4:	d4 df       	rcall	.-88     	; 0xd4e <verzenden>
     da6:	41 e0       	ldi	r20, 0x01	; 1
     da8:	be 01       	movw	r22, r28
     daa:	6f 5f       	subi	r22, 0xFF	; 255
     dac:	7f 4f       	sbci	r23, 0xFF	; 255
     dae:	88 e6       	ldi	r24, 0x68	; 104
     db0:	7b df       	rcall	.-266    	; 0xca8 <ontvangen>
     db2:	f9 80       	ldd	r15, Y+1	; 0x01
     db4:	6c e3       	ldi	r22, 0x3C	; 60
     db6:	88 e6       	ldi	r24, 0x68	; 104
     db8:	ca df       	rcall	.-108    	; 0xd4e <verzenden>
     dba:	41 e0       	ldi	r20, 0x01	; 1
     dbc:	be 01       	movw	r22, r28
     dbe:	6f 5f       	subi	r22, 0xFF	; 255
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	88 e6       	ldi	r24, 0x68	; 104
     dc4:	71 df       	rcall	.-286    	; 0xca8 <ontvangen>
     dc6:	6f 2d       	mov	r22, r15
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	76 2f       	mov	r23, r22
     dcc:	66 27       	eor	r22, r22
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	68 2b       	or	r22, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatunsisf>
     dda:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <_gyroScale>
     dde:	30 91 40 04 	lds	r19, 0x0440	; 0x800440 <_gyroScale+0x1>
     de2:	40 91 41 04 	lds	r20, 0x0441	; 0x800441 <_gyroScale+0x2>
     de6:	50 91 42 04 	lds	r21, 0x0442	; 0x800442 <_gyroScale+0x3>
     dea:	0e 94 8c 12 	call	0x2518	; 0x2518 <__mulsf3>
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	4a e8       	ldi	r20, 0x8A	; 138
     df4:	52 e4       	ldi	r21, 0x42	; 66
     df6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__subsf3>
     dfa:	0e 94 cd 11 	call	0x239a	; 0x239a <__fixsfsi>
     dfe:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <gyroX+0x1>
     e02:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <gyroX>
     e06:	6d e3       	ldi	r22, 0x3D	; 61
     e08:	88 e6       	ldi	r24, 0x68	; 104
     e0a:	a1 df       	rcall	.-190    	; 0xd4e <verzenden>
     e0c:	41 e0       	ldi	r20, 0x01	; 1
     e0e:	be 01       	movw	r22, r28
     e10:	6f 5f       	subi	r22, 0xFF	; 255
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	88 e6       	ldi	r24, 0x68	; 104
     e16:	48 df       	rcall	.-368    	; 0xca8 <ontvangen>
     e18:	f9 80       	ldd	r15, Y+1	; 0x01
     e1a:	6e e3       	ldi	r22, 0x3E	; 62
     e1c:	88 e6       	ldi	r24, 0x68	; 104
     e1e:	97 df       	rcall	.-210    	; 0xd4e <verzenden>
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	be 01       	movw	r22, r28
     e24:	6f 5f       	subi	r22, 0xFF	; 255
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	88 e6       	ldi	r24, 0x68	; 104
     e2a:	3e df       	rcall	.-388    	; 0xca8 <ontvangen>
     e2c:	6f 2d       	mov	r22, r15
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	76 2f       	mov	r23, r22
     e32:	66 27       	eor	r22, r22
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	68 2b       	or	r22, r24
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatunsisf>
     e40:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <_gyroScale>
     e44:	30 91 40 04 	lds	r19, 0x0440	; 0x800440 <_gyroScale+0x1>
     e48:	40 91 41 04 	lds	r20, 0x0441	; 0x800441 <_gyroScale+0x2>
     e4c:	50 91 42 04 	lds	r21, 0x0442	; 0x800442 <_gyroScale+0x3>
     e50:	0e 94 8c 12 	call	0x2518	; 0x2518 <__mulsf3>
     e54:	0e 94 cd 11 	call	0x239a	; 0x239a <__fixsfsi>
     e58:	70 93 3e 04 	sts	0x043E, r23	; 0x80043e <gyroY+0x1>
     e5c:	60 93 3d 04 	sts	0x043D, r22	; 0x80043d <gyroY>
     e60:	6f e3       	ldi	r22, 0x3F	; 63
     e62:	88 e6       	ldi	r24, 0x68	; 104
     e64:	74 df       	rcall	.-280    	; 0xd4e <verzenden>
     e66:	41 e0       	ldi	r20, 0x01	; 1
     e68:	be 01       	movw	r22, r28
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	88 e6       	ldi	r24, 0x68	; 104
     e70:	1b df       	rcall	.-458    	; 0xca8 <ontvangen>
     e72:	f9 80       	ldd	r15, Y+1	; 0x01
     e74:	60 e4       	ldi	r22, 0x40	; 64
     e76:	88 e6       	ldi	r24, 0x68	; 104
     e78:	6a df       	rcall	.-300    	; 0xd4e <verzenden>
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	be 01       	movw	r22, r28
     e7e:	6f 5f       	subi	r22, 0xFF	; 255
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	88 e6       	ldi	r24, 0x68	; 104
     e84:	11 df       	rcall	.-478    	; 0xca8 <ontvangen>
     e86:	6f 2d       	mov	r22, r15
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	76 2f       	mov	r23, r22
     e8c:	66 27       	eor	r22, r22
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	68 2b       	or	r22, r24
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatunsisf>
     e9a:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <_gyroScale>
     e9e:	30 91 40 04 	lds	r19, 0x0440	; 0x800440 <_gyroScale+0x1>
     ea2:	40 91 41 04 	lds	r20, 0x0441	; 0x800441 <_gyroScale+0x2>
     ea6:	50 91 42 04 	lds	r21, 0x0442	; 0x800442 <_gyroScale+0x3>
     eaa:	0e 94 8c 12 	call	0x2518	; 0x2518 <__mulsf3>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e8       	ldi	r20, 0x80	; 128
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__subsf3>
     eba:	0e 94 cd 11 	call	0x239a	; 0x239a <__fixsfsi>
     ebe:	70 93 25 04 	sts	0x0425, r23	; 0x800425 <gyroZ+0x1>
     ec2:	60 93 24 04 	sts	0x0424, r22	; 0x800424 <gyroZ>
     ec6:	63 e4       	ldi	r22, 0x43	; 67
     ec8:	88 e6       	ldi	r24, 0x68	; 104
     eca:	41 df       	rcall	.-382    	; 0xd4e <verzenden>
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	be 01       	movw	r22, r28
     ed0:	6f 5f       	subi	r22, 0xFF	; 255
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	88 e6       	ldi	r24, 0x68	; 104
     ed6:	e8 de       	rcall	.-560    	; 0xca8 <ontvangen>
     ed8:	f9 80       	ldd	r15, Y+1	; 0x01
     eda:	64 e4       	ldi	r22, 0x44	; 68
     edc:	88 e6       	ldi	r24, 0x68	; 104
     ede:	37 df       	rcall	.-402    	; 0xd4e <verzenden>
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	be 01       	movw	r22, r28
     ee4:	6f 5f       	subi	r22, 0xFF	; 255
     ee6:	7f 4f       	sbci	r23, 0xFF	; 255
     ee8:	88 e6       	ldi	r24, 0x68	; 104
     eea:	de de       	rcall	.-580    	; 0xca8 <ontvangen>
     eec:	6f 2d       	mov	r22, r15
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	76 2f       	mov	r23, r22
     ef2:	66 27       	eor	r22, r22
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	68 2b       	or	r22, r24
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatunsisf>
     f00:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <_accelScale>
     f04:	30 91 3a 04 	lds	r19, 0x043A	; 0x80043a <_accelScale+0x1>
     f08:	40 91 3b 04 	lds	r20, 0x043B	; 0x80043b <_accelScale+0x2>
     f0c:	50 91 3c 04 	lds	r21, 0x043C	; 0x80043c <_accelScale+0x3>
     f10:	0e 94 8c 12 	call	0x2518	; 0x2518 <__mulsf3>
     f14:	0e 94 cd 11 	call	0x239a	; 0x239a <__fixsfsi>
     f18:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <accelX+0x1>
     f1c:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <accelX>
     f20:	65 e4       	ldi	r22, 0x45	; 69
     f22:	88 e6       	ldi	r24, 0x68	; 104
     f24:	14 df       	rcall	.-472    	; 0xd4e <verzenden>
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	be 01       	movw	r22, r28
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	88 e6       	ldi	r24, 0x68	; 104
     f30:	bb de       	rcall	.-650    	; 0xca8 <ontvangen>
     f32:	f9 80       	ldd	r15, Y+1	; 0x01
     f34:	66 e4       	ldi	r22, 0x46	; 70
     f36:	88 e6       	ldi	r24, 0x68	; 104
     f38:	0a df       	rcall	.-492    	; 0xd4e <verzenden>
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	be 01       	movw	r22, r28
     f3e:	6f 5f       	subi	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	88 e6       	ldi	r24, 0x68	; 104
     f44:	b1 de       	rcall	.-670    	; 0xca8 <ontvangen>
     f46:	6f 2d       	mov	r22, r15
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	76 2f       	mov	r23, r22
     f4c:	66 27       	eor	r22, r22
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	68 2b       	or	r22, r24
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatunsisf>
     f5a:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <_accelScale>
     f5e:	30 91 3a 04 	lds	r19, 0x043A	; 0x80043a <_accelScale+0x1>
     f62:	40 91 3b 04 	lds	r20, 0x043B	; 0x80043b <_accelScale+0x2>
     f66:	50 91 3c 04 	lds	r21, 0x043C	; 0x80043c <_accelScale+0x3>
     f6a:	0e 94 8c 12 	call	0x2518	; 0x2518 <__mulsf3>
     f6e:	0e 94 cd 11 	call	0x239a	; 0x239a <__fixsfsi>
     f72:	70 93 17 03 	sts	0x0317, r23	; 0x800317 <accelY+0x1>
     f76:	60 93 16 03 	sts	0x0316, r22	; 0x800316 <accelY>
     f7a:	67 e4       	ldi	r22, 0x47	; 71
     f7c:	88 e6       	ldi	r24, 0x68	; 104
     f7e:	e7 de       	rcall	.-562    	; 0xd4e <verzenden>
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	be 01       	movw	r22, r28
     f84:	6f 5f       	subi	r22, 0xFF	; 255
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	88 e6       	ldi	r24, 0x68	; 104
     f8a:	8e de       	rcall	.-740    	; 0xca8 <ontvangen>
     f8c:	f9 80       	ldd	r15, Y+1	; 0x01
     f8e:	68 e4       	ldi	r22, 0x48	; 72
     f90:	88 e6       	ldi	r24, 0x68	; 104
     f92:	dd de       	rcall	.-582    	; 0xd4e <verzenden>
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	be 01       	movw	r22, r28
     f98:	6f 5f       	subi	r22, 0xFF	; 255
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	88 e6       	ldi	r24, 0x68	; 104
     f9e:	84 de       	rcall	.-760    	; 0xca8 <ontvangen>
     fa0:	6f 2d       	mov	r22, r15
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	76 2f       	mov	r23, r22
     fa6:	66 27       	eor	r22, r22
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	68 2b       	or	r22, r24
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatunsisf>
     fb4:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <_accelScale>
     fb8:	30 91 3a 04 	lds	r19, 0x043A	; 0x80043a <_accelScale+0x1>
     fbc:	40 91 3b 04 	lds	r20, 0x043B	; 0x80043b <_accelScale+0x2>
     fc0:	50 91 3c 04 	lds	r21, 0x043C	; 0x80043c <_accelScale+0x3>
     fc4:	0e 94 8c 12 	call	0x2518	; 0x2518 <__mulsf3>
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e8       	ldi	r19, 0x80	; 128
     fcc:	4c e9       	ldi	r20, 0x9C	; 156
     fce:	53 e4       	ldi	r21, 0x43	; 67
     fd0:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__subsf3>
     fd4:	0e 94 cd 11 	call	0x239a	; 0x239a <__fixsfsi>
     fd8:	70 93 36 04 	sts	0x0436, r23	; 0x800436 <accelZ+0x1>
     fdc:	60 93 35 04 	sts	0x0435, r22	; 0x800435 <accelZ>
     fe0:	10 93 1d 03 	sts	0x031D, r17	; 0x80031d <watchdogGyro+0x1>
     fe4:	00 93 1c 03 	sts	0x031C, r16	; 0x80031c <watchdogGyro>
     fe8:	db ce       	rjmp	.-586    	; 0xda0 <gyroTaak+0x10>

00000fea <__vector_17>:
	// writeString(" ");writeInteger(op[1],16);
	// writeString(" ");writeInteger(op[2],16);
}

ISR(TIMER1_COMPA_vect)
{
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
	PORTB ^= (1 << PB6);
     ff8:	95 b1       	in	r25, 0x05	; 5
     ffa:	80 e4       	ldi	r24, 0x40	; 64
     ffc:	89 27       	eor	r24, r25
     ffe:	85 b9       	out	0x05, r24	; 5
    1000:	9f 91       	pop	r25
    1002:	8f 91       	pop	r24
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <pxPortInitialiseStack>:

#if defined (portUSE_WDTO)
        wdt_disable();											// disable Watchdog Timer

#elif defined( portUSE_TIMER0 )
        portTIMSK &= ~( _BV(OCIE0B)|_BV(OCIE0A)|_BV(TOIE0) );	// disable all Timer0 interrupts
    100e:	31 e1       	ldi	r19, 0x11	; 17
    1010:	fc 01       	movw	r30, r24
    1012:	30 83       	st	Z, r19
    1014:	31 97       	sbiw	r30, 0x01	; 1
    1016:	22 e2       	ldi	r18, 0x22	; 34
    1018:	20 83       	st	Z, r18
    101a:	31 97       	sbiw	r30, 0x01	; 1
    101c:	a3 e3       	ldi	r26, 0x33	; 51
    101e:	a0 83       	st	Z, r26
    1020:	31 97       	sbiw	r30, 0x01	; 1
    1022:	60 83       	st	Z, r22
    1024:	31 97       	sbiw	r30, 0x01	; 1
    1026:	70 83       	st	Z, r23
    1028:	31 97       	sbiw	r30, 0x01	; 1
    102a:	10 82       	st	Z, r1
    102c:	31 97       	sbiw	r30, 0x01	; 1
    102e:	10 82       	st	Z, r1
    1030:	31 97       	sbiw	r30, 0x01	; 1
    1032:	60 e8       	ldi	r22, 0x80	; 128
    1034:	60 83       	st	Z, r22
    1036:	31 97       	sbiw	r30, 0x01	; 1
    1038:	10 82       	st	Z, r1
    103a:	31 97       	sbiw	r30, 0x01	; 1
    103c:	10 82       	st	Z, r1
    103e:	31 97       	sbiw	r30, 0x01	; 1
    1040:	10 82       	st	Z, r1
    1042:	31 97       	sbiw	r30, 0x01	; 1
    1044:	62 e0       	ldi	r22, 0x02	; 2
    1046:	60 83       	st	Z, r22
    1048:	31 97       	sbiw	r30, 0x01	; 1
    104a:	63 e0       	ldi	r22, 0x03	; 3
    104c:	60 83       	st	Z, r22
    104e:	31 97       	sbiw	r30, 0x01	; 1
    1050:	64 e0       	ldi	r22, 0x04	; 4
    1052:	60 83       	st	Z, r22
    1054:	31 97       	sbiw	r30, 0x01	; 1
    1056:	65 e0       	ldi	r22, 0x05	; 5
    1058:	60 83       	st	Z, r22
    105a:	31 97       	sbiw	r30, 0x01	; 1
    105c:	66 e0       	ldi	r22, 0x06	; 6
    105e:	60 83       	st	Z, r22
    1060:	31 97       	sbiw	r30, 0x01	; 1
    1062:	67 e0       	ldi	r22, 0x07	; 7
    1064:	60 83       	st	Z, r22
    1066:	31 97       	sbiw	r30, 0x01	; 1
    1068:	68 e0       	ldi	r22, 0x08	; 8
    106a:	60 83       	st	Z, r22
    106c:	31 97       	sbiw	r30, 0x01	; 1
    106e:	69 e0       	ldi	r22, 0x09	; 9
    1070:	60 83       	st	Z, r22
    1072:	31 97       	sbiw	r30, 0x01	; 1
    1074:	60 e1       	ldi	r22, 0x10	; 16
    1076:	60 83       	st	Z, r22
    1078:	31 97       	sbiw	r30, 0x01	; 1
    107a:	30 83       	st	Z, r19
    107c:	31 97       	sbiw	r30, 0x01	; 1
    107e:	32 e1       	ldi	r19, 0x12	; 18
    1080:	30 83       	st	Z, r19
    1082:	31 97       	sbiw	r30, 0x01	; 1
    1084:	33 e1       	ldi	r19, 0x13	; 19
    1086:	30 83       	st	Z, r19
    1088:	31 97       	sbiw	r30, 0x01	; 1
    108a:	34 e1       	ldi	r19, 0x14	; 20
    108c:	30 83       	st	Z, r19
    108e:	31 97       	sbiw	r30, 0x01	; 1
    1090:	35 e1       	ldi	r19, 0x15	; 21
    1092:	30 83       	st	Z, r19
    1094:	31 97       	sbiw	r30, 0x01	; 1
    1096:	36 e1       	ldi	r19, 0x16	; 22
    1098:	30 83       	st	Z, r19
    109a:	31 97       	sbiw	r30, 0x01	; 1
    109c:	37 e1       	ldi	r19, 0x17	; 23
    109e:	30 83       	st	Z, r19
    10a0:	31 97       	sbiw	r30, 0x01	; 1
    10a2:	38 e1       	ldi	r19, 0x18	; 24
    10a4:	30 83       	st	Z, r19
    10a6:	31 97       	sbiw	r30, 0x01	; 1
    10a8:	39 e1       	ldi	r19, 0x19	; 25
    10aa:	30 83       	st	Z, r19
    10ac:	31 97       	sbiw	r30, 0x01	; 1
    10ae:	30 e2       	ldi	r19, 0x20	; 32
    10b0:	30 83       	st	Z, r19
    10b2:	31 97       	sbiw	r30, 0x01	; 1
    10b4:	31 e2       	ldi	r19, 0x21	; 33
    10b6:	30 83       	st	Z, r19
    10b8:	31 97       	sbiw	r30, 0x01	; 1
    10ba:	20 83       	st	Z, r18
    10bc:	31 97       	sbiw	r30, 0x01	; 1
    10be:	23 e2       	ldi	r18, 0x23	; 35
    10c0:	20 83       	st	Z, r18
    10c2:	31 97       	sbiw	r30, 0x01	; 1
    10c4:	40 83       	st	Z, r20
    10c6:	31 97       	sbiw	r30, 0x01	; 1
    10c8:	50 83       	st	Z, r21
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	26 e2       	ldi	r18, 0x26	; 38
    10ce:	20 83       	st	Z, r18
    10d0:	31 97       	sbiw	r30, 0x01	; 1
    10d2:	27 e2       	ldi	r18, 0x27	; 39
    10d4:	20 83       	st	Z, r18
    10d6:	31 97       	sbiw	r30, 0x01	; 1
    10d8:	28 e2       	ldi	r18, 0x28	; 40
    10da:	20 83       	st	Z, r18
    10dc:	31 97       	sbiw	r30, 0x01	; 1
    10de:	29 e2       	ldi	r18, 0x29	; 41
    10e0:	20 83       	st	Z, r18
    10e2:	31 97       	sbiw	r30, 0x01	; 1
    10e4:	20 e3       	ldi	r18, 0x30	; 48
    10e6:	20 83       	st	Z, r18
    10e8:	31 97       	sbiw	r30, 0x01	; 1
    10ea:	21 e3       	ldi	r18, 0x31	; 49
    10ec:	20 83       	st	Z, r18
    10ee:	89 97       	sbiw	r24, 0x29	; 41
    10f0:	08 95       	ret

000010f2 <xPortStartScheduler>:
    10f2:	88 ec       	ldi	r24, 0xC8	; 200
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <portTickRateHz+0x1>
    10fa:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <portTickRateHz>
    10fe:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <ticksRemainingInSec+0x1>
    1102:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <ticksRemainingInSec>
    1106:	8d e4       	ldi	r24, 0x4D	; 77
    1108:	87 bd       	out	0x27, r24	; 39
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	84 bd       	out	0x24, r24	; 36
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	85 bd       	out	0x25, r24	; 37
    1112:	ee e6       	ldi	r30, 0x6E	; 110
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	82 60       	ori	r24, 0x02	; 2
    111a:	80 83       	st	Z, r24
    111c:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <pxCurrentTCB>
    1120:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1124:	cd 91       	ld	r28, X+
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	dd 91       	ld	r29, X+
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	bf 91       	pop	r27
    1136:	af 91       	pop	r26
    1138:	9f 91       	pop	r25
    113a:	8f 91       	pop	r24
    113c:	7f 91       	pop	r23
    113e:	6f 91       	pop	r22
    1140:	5f 91       	pop	r21
    1142:	4f 91       	pop	r20
    1144:	3f 91       	pop	r19
    1146:	2f 91       	pop	r18
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
    1150:	df 90       	pop	r13
    1152:	cf 90       	pop	r12
    1154:	bf 90       	pop	r11
    1156:	af 90       	pop	r10
    1158:	9f 90       	pop	r9
    115a:	8f 90       	pop	r8
    115c:	7f 90       	pop	r7
    115e:	6f 90       	pop	r6
    1160:	5f 90       	pop	r5
    1162:	4f 90       	pop	r4
    1164:	3f 90       	pop	r3
    1166:	2f 90       	pop	r2
    1168:	1f 90       	pop	r1
    116a:	0f 90       	pop	r0
    116c:	0c be       	out	0x3c, r0	; 60
    116e:	0f 90       	pop	r0
    1170:	0b be       	out	0x3b, r0	; 59
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	08 95       	ret
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	08 95       	ret

0000117e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    117e:	0f 92       	push	r0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	0f 92       	push	r0
    1186:	0b b6       	in	r0, 0x3b	; 59
    1188:	0f 92       	push	r0
    118a:	0c b6       	in	r0, 0x3c	; 60
    118c:	0f 92       	push	r0
    118e:	1f 92       	push	r1
    1190:	11 24       	eor	r1, r1
    1192:	2f 92       	push	r2
    1194:	3f 92       	push	r3
    1196:	4f 92       	push	r4
    1198:	5f 92       	push	r5
    119a:	6f 92       	push	r6
    119c:	7f 92       	push	r7
    119e:	8f 92       	push	r8
    11a0:	9f 92       	push	r9
    11a2:	af 92       	push	r10
    11a4:	bf 92       	push	r11
    11a6:	cf 92       	push	r12
    11a8:	df 92       	push	r13
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	2f 93       	push	r18
    11b4:	3f 93       	push	r19
    11b6:	4f 93       	push	r20
    11b8:	5f 93       	push	r21
    11ba:	6f 93       	push	r22
    11bc:	7f 93       	push	r23
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	af 93       	push	r26
    11c4:	bf 93       	push	r27
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
    11ce:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <pxCurrentTCB>
    11d2:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    11d6:	0d b6       	in	r0, 0x3d	; 61
    11d8:	0d 92       	st	X+, r0
    11da:	0e b6       	in	r0, 0x3e	; 62
    11dc:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    11de:	17 d7       	rcall	.+3630   	; 0x200e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    11e0:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <pxCurrentTCB>
    11e4:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    11e8:	cd 91       	ld	r28, X+
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	dd 91       	ld	r29, X+
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
    1218:	bf 90       	pop	r11
    121a:	af 90       	pop	r10
    121c:	9f 90       	pop	r9
    121e:	8f 90       	pop	r8
    1220:	7f 90       	pop	r7
    1222:	6f 90       	pop	r6
    1224:	5f 90       	pop	r5
    1226:	4f 90       	pop	r4
    1228:	3f 90       	pop	r3
    122a:	2f 90       	pop	r2
    122c:	1f 90       	pop	r1
    122e:	0f 90       	pop	r0
    1230:	0c be       	out	0x3c, r0	; 60
    1232:	0f 90       	pop	r0
    1234:	0b be       	out	0x3b, r0	; 59
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    123c:	08 95       	ret

0000123e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    123e:	0f 92       	push	r0
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	0f 92       	push	r0
    1246:	0b b6       	in	r0, 0x3b	; 59
    1248:	0f 92       	push	r0
    124a:	0c b6       	in	r0, 0x3c	; 60
    124c:	0f 92       	push	r0
    124e:	1f 92       	push	r1
    1250:	11 24       	eor	r1, r1
    1252:	2f 92       	push	r2
    1254:	3f 92       	push	r3
    1256:	4f 92       	push	r4
    1258:	5f 92       	push	r5
    125a:	6f 92       	push	r6
    125c:	7f 92       	push	r7
    125e:	8f 92       	push	r8
    1260:	9f 92       	push	r9
    1262:	af 92       	push	r10
    1264:	bf 92       	push	r11
    1266:	cf 92       	push	r12
    1268:	df 92       	push	r13
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	2f 93       	push	r18
    1274:	3f 93       	push	r19
    1276:	4f 93       	push	r20
    1278:	5f 93       	push	r21
    127a:	6f 93       	push	r22
    127c:	7f 93       	push	r23
    127e:	8f 93       	push	r24
    1280:	9f 93       	push	r25
    1282:	af 93       	push	r26
    1284:	bf 93       	push	r27
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	ef 93       	push	r30
    128c:	ff 93       	push	r31
    128e:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <pxCurrentTCB>
    1292:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1296:	0d b6       	in	r0, 0x3d	; 61
    1298:	0d 92       	st	X+, r0
    129a:	0e b6       	in	r0, 0x3e	; 62
    129c:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    129e:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
    12a0:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <ticksRemainingInSec>
    12a4:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <ticksRemainingInSec+0x1>
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <ticksRemainingInSec+0x1>
    12ae:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <ticksRemainingInSec>
    12b2:	89 2b       	or	r24, r25
    12b4:	49 f4       	brne	.+18     	; 0x12c8 <vPortYieldFromTick+0x8a>
	{
		system_tick();
    12b6:	32 d8       	rcall	.-3996   	; 0x31c <system_tick>
		ticksRemainingInSec = portTickRateHz;
    12b8:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <portTickRateHz>
    12bc:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <portTickRateHz+0x1>
    12c0:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <ticksRemainingInSec+0x1>
    12c4:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <ticksRemainingInSec>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
    12c8:	6c d5       	rcall	.+2776   	; 0x1da2 <xTaskIncrementTick>
    12ca:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    12cc:	a0 d6       	rcall	.+3392   	; 0x200e <vTaskSwitchContext>
    12ce:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <pxCurrentTCB>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
    12d2:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    12d6:	cd 91       	ld	r28, X+
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	dd 91       	ld	r29, X+
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	ff 91       	pop	r31
    12e0:	ef 91       	pop	r30
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	bf 91       	pop	r27
    12e8:	af 91       	pop	r26
    12ea:	9f 91       	pop	r25
    12ec:	8f 91       	pop	r24
    12ee:	7f 91       	pop	r23
    12f0:	6f 91       	pop	r22
    12f2:	5f 91       	pop	r21
    12f4:	4f 91       	pop	r20
    12f6:	3f 91       	pop	r19
    12f8:	2f 91       	pop	r18
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	bf 90       	pop	r11
    1308:	af 90       	pop	r10
    130a:	9f 90       	pop	r9
    130c:	8f 90       	pop	r8
    130e:	7f 90       	pop	r7
    1310:	6f 90       	pop	r6
    1312:	5f 90       	pop	r5
    1314:	4f 90       	pop	r4
    1316:	3f 90       	pop	r3
    1318:	2f 90       	pop	r2
    131a:	1f 90       	pop	r1
    131c:	0f 90       	pop	r0
    131e:	0c be       	out	0x3c, r0	; 60
    1320:	0f 90       	pop	r0
    1322:	0b be       	out	0x3b, r0	; 59
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	08 95       	ret

0000132c <__vector_21>:

	__asm__ __volatile__ ( "ret" );
    132c:	88 df       	rcall	.-240    	; 0x123e <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    132e:	18 95       	reti

00001330 <prvCopyDataToQueue>:
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
	}
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ec 01       	movw	r28, r24
    133a:	04 2f       	mov	r16, r20
    133c:	1a 8d       	ldd	r17, Y+26	; 0x1a
    133e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1340:	41 11       	cpse	r20, r1
    1342:	0b c0       	rjmp	.+22     	; 0x135a <prvCopyDataToQueue+0x2a>
    1344:	88 81       	ld	r24, Y
    1346:	99 81       	ldd	r25, Y+1	; 0x01
    1348:	89 2b       	or	r24, r25
    134a:	09 f0       	breq	.+2      	; 0x134e <prvCopyDataToQueue+0x1e>
    134c:	41 c0       	rjmp	.+130    	; 0x13d0 <prvCopyDataToQueue+0xa0>
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	7e d7       	rcall	.+3836   	; 0x2250 <xTaskPriorityDisinherit>
    1354:	1b 82       	std	Y+3, r1	; 0x03
    1356:	1a 82       	std	Y+2, r1	; 0x02
    1358:	42 c0       	rjmp	.+132    	; 0x13de <prvCopyDataToQueue+0xae>
    135a:	01 11       	cpse	r16, r1
    135c:	17 c0       	rjmp	.+46     	; 0x138c <prvCopyDataToQueue+0x5c>
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	0e 94 53 14 	call	0x28a6	; 0x28a6 <memcpy>
    1368:	2c 8d       	ldd	r18, Y+28	; 0x1c
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	82 0f       	add	r24, r18
    1370:	91 1d       	adc	r25, r1
    1372:	9d 83       	std	Y+5, r25	; 0x05
    1374:	8c 83       	std	Y+4, r24	; 0x04
    1376:	2a 81       	ldd	r18, Y+2	; 0x02
    1378:	3b 81       	ldd	r19, Y+3	; 0x03
    137a:	82 17       	cp	r24, r18
    137c:	93 07       	cpc	r25, r19
    137e:	50 f1       	brcs	.+84     	; 0x13d4 <prvCopyDataToQueue+0xa4>
    1380:	88 81       	ld	r24, Y
    1382:	99 81       	ldd	r25, Y+1	; 0x01
    1384:	9d 83       	std	Y+5, r25	; 0x05
    1386:	8c 83       	std	Y+4, r24	; 0x04
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	29 c0       	rjmp	.+82     	; 0x13de <prvCopyDataToQueue+0xae>
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	8e 81       	ldd	r24, Y+6	; 0x06
    1390:	9f 81       	ldd	r25, Y+7	; 0x07
    1392:	0e 94 53 14 	call	0x28a6	; 0x28a6 <memcpy>
    1396:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	91 95       	neg	r25
    139c:	81 95       	neg	r24
    139e:	91 09       	sbc	r25, r1
    13a0:	2e 81       	ldd	r18, Y+6	; 0x06
    13a2:	3f 81       	ldd	r19, Y+7	; 0x07
    13a4:	28 0f       	add	r18, r24
    13a6:	39 1f       	adc	r19, r25
    13a8:	3f 83       	std	Y+7, r19	; 0x07
    13aa:	2e 83       	std	Y+6, r18	; 0x06
    13ac:	48 81       	ld	r20, Y
    13ae:	59 81       	ldd	r21, Y+1	; 0x01
    13b0:	24 17       	cp	r18, r20
    13b2:	35 07       	cpc	r19, r21
    13b4:	30 f4       	brcc	.+12     	; 0x13c2 <prvCopyDataToQueue+0x92>
    13b6:	2a 81       	ldd	r18, Y+2	; 0x02
    13b8:	3b 81       	ldd	r19, Y+3	; 0x03
    13ba:	82 0f       	add	r24, r18
    13bc:	93 1f       	adc	r25, r19
    13be:	9f 83       	std	Y+7, r25	; 0x07
    13c0:	8e 83       	std	Y+6, r24	; 0x06
    13c2:	02 30       	cpi	r16, 0x02	; 2
    13c4:	49 f4       	brne	.+18     	; 0x13d8 <prvCopyDataToQueue+0xa8>
    13c6:	11 23       	and	r17, r17
    13c8:	49 f0       	breq	.+18     	; 0x13dc <prvCopyDataToQueue+0xac>
    13ca:	11 50       	subi	r17, 0x01	; 1
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <prvCopyDataToQueue+0xae>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <prvCopyDataToQueue+0xae>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <prvCopyDataToQueue+0xae>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	01 c0       	rjmp	.+2      	; 0x13de <prvCopyDataToQueue+0xae>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	1f 5f       	subi	r17, 0xFF	; 255
    13e0:	1a 8f       	std	Y+26, r17	; 0x1a
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	08 95       	ret

000013ec <prvUnlockQueue>:
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	8c 01       	movw	r16, r24
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	0f 92       	push	r0
    13fe:	fc 01       	movw	r30, r24
    1400:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1402:	1c 16       	cp	r1, r28
    1404:	9c f4       	brge	.+38     	; 0x142c <prvUnlockQueue+0x40>
    1406:	81 89       	ldd	r24, Z+17	; 0x11
    1408:	81 11       	cpse	r24, r1
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <prvUnlockQueue+0x2c>
    140c:	0f c0       	rjmp	.+30     	; 0x142c <prvUnlockQueue+0x40>
    140e:	f8 01       	movw	r30, r16
    1410:	81 89       	ldd	r24, Z+17	; 0x11
    1412:	81 11       	cpse	r24, r1
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <prvUnlockQueue+0x34>
    1416:	0a c0       	rjmp	.+20     	; 0x142c <prvUnlockQueue+0x40>
    1418:	78 01       	movw	r14, r16
    141a:	f1 e1       	ldi	r31, 0x11	; 17
    141c:	ef 0e       	add	r14, r31
    141e:	f1 1c       	adc	r15, r1
    1420:	c7 01       	movw	r24, r14
    1422:	87 d6       	rcall	.+3342   	; 0x2132 <xTaskRemoveFromEventList>
    1424:	81 11       	cpse	r24, r1
    1426:	10 d7       	rcall	.+3616   	; 0x2248 <vTaskMissedYield>
    1428:	c1 50       	subi	r28, 0x01	; 1
    142a:	89 f7       	brne	.-30     	; 0x140e <prvUnlockQueue+0x22>
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	f8 01       	movw	r30, r16
    1430:	86 8f       	std	Z+30, r24	; 0x1e
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	0f 92       	push	r0
    143c:	c5 8d       	ldd	r28, Z+29	; 0x1d
    143e:	1c 16       	cp	r1, r28
    1440:	9c f4       	brge	.+38     	; 0x1468 <prvUnlockQueue+0x7c>
    1442:	80 85       	ldd	r24, Z+8	; 0x08
    1444:	81 11       	cpse	r24, r1
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <prvUnlockQueue+0x68>
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <prvUnlockQueue+0x7c>
    144a:	f8 01       	movw	r30, r16
    144c:	80 85       	ldd	r24, Z+8	; 0x08
    144e:	81 11       	cpse	r24, r1
    1450:	05 c0       	rjmp	.+10     	; 0x145c <prvUnlockQueue+0x70>
    1452:	0a c0       	rjmp	.+20     	; 0x1468 <prvUnlockQueue+0x7c>
    1454:	78 01       	movw	r14, r16
    1456:	f8 e0       	ldi	r31, 0x08	; 8
    1458:	ef 0e       	add	r14, r31
    145a:	f1 1c       	adc	r15, r1
    145c:	c7 01       	movw	r24, r14
    145e:	69 d6       	rcall	.+3282   	; 0x2132 <xTaskRemoveFromEventList>
    1460:	81 11       	cpse	r24, r1
    1462:	f2 d6       	rcall	.+3556   	; 0x2248 <vTaskMissedYield>
    1464:	c1 50       	subi	r28, 0x01	; 1
    1466:	89 f7       	brne	.-30     	; 0x144a <prvUnlockQueue+0x5e>
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	f8 01       	movw	r30, r16
    146c:	85 8f       	std	Z+29, r24	; 0x1d
    146e:	0f 90       	pop	r0
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	ff 90       	pop	r15
    147a:	ef 90       	pop	r14
    147c:	08 95       	ret

0000147e <xQueueGenericReset>:
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	ec 01       	movw	r28, r24
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	0f 92       	push	r0
    148a:	48 81       	ld	r20, Y
    148c:	59 81       	ldd	r21, Y+1	; 0x01
    148e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1494:	72 9f       	mul	r23, r18
    1496:	c0 01       	movw	r24, r0
    1498:	73 9f       	mul	r23, r19
    149a:	90 0d       	add	r25, r0
    149c:	11 24       	eor	r1, r1
    149e:	fa 01       	movw	r30, r20
    14a0:	e8 0f       	add	r30, r24
    14a2:	f9 1f       	adc	r31, r25
    14a4:	fb 83       	std	Y+3, r31	; 0x03
    14a6:	ea 83       	std	Y+2, r30	; 0x02
    14a8:	1a 8e       	std	Y+26, r1	; 0x1a
    14aa:	5d 83       	std	Y+5, r21	; 0x05
    14ac:	4c 83       	std	Y+4, r20	; 0x04
    14ae:	82 1b       	sub	r24, r18
    14b0:	93 0b       	sbc	r25, r19
    14b2:	84 0f       	add	r24, r20
    14b4:	95 1f       	adc	r25, r21
    14b6:	9f 83       	std	Y+7, r25	; 0x07
    14b8:	8e 83       	std	Y+6, r24	; 0x06
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	8d 8f       	std	Y+29, r24	; 0x1d
    14be:	8e 8f       	std	Y+30, r24	; 0x1e
    14c0:	61 11       	cpse	r22, r1
    14c2:	0a c0       	rjmp	.+20     	; 0x14d8 <xQueueGenericReset+0x5a>
    14c4:	88 85       	ldd	r24, Y+8	; 0x08
    14c6:	88 23       	and	r24, r24
    14c8:	69 f0       	breq	.+26     	; 0x14e4 <xQueueGenericReset+0x66>
    14ca:	ce 01       	movw	r24, r28
    14cc:	08 96       	adiw	r24, 0x08	; 8
    14ce:	31 d6       	rcall	.+3170   	; 0x2132 <xTaskRemoveFromEventList>
    14d0:	88 23       	and	r24, r24
    14d2:	41 f0       	breq	.+16     	; 0x14e4 <xQueueGenericReset+0x66>
    14d4:	54 de       	rcall	.-856    	; 0x117e <vPortYield>
    14d6:	06 c0       	rjmp	.+12     	; 0x14e4 <xQueueGenericReset+0x66>
    14d8:	ce 01       	movw	r24, r28
    14da:	08 96       	adiw	r24, 0x08	; 8
    14dc:	7c d8       	rcall	.-3848   	; 0x5d6 <vListInitialise>
    14de:	ce 01       	movw	r24, r28
    14e0:	41 96       	adiw	r24, 0x11	; 17
    14e2:	79 d8       	rcall	.-3854   	; 0x5d6 <vListInitialise>
    14e4:	0f 90       	pop	r0
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <xQueueGenericCreate>:
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	08 2f       	mov	r16, r24
    14fa:	16 2f       	mov	r17, r22
    14fc:	66 23       	and	r22, r22
    14fe:	b9 f0       	breq	.+46     	; 0x152e <xQueueGenericCreate+0x3e>
    1500:	86 9f       	mul	r24, r22
    1502:	c0 01       	movw	r24, r0
    1504:	11 24       	eor	r1, r1
    1506:	4f 96       	adiw	r24, 0x1f	; 31
    1508:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    150c:	ec 01       	movw	r28, r24
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	39 f4       	brne	.+14     	; 0x1520 <xQueueGenericCreate+0x30>
    1512:	14 c0       	rjmp	.+40     	; 0x153c <xQueueGenericCreate+0x4c>
    1514:	0b 8f       	std	Y+27, r16	; 0x1b
    1516:	1c 8f       	std	Y+28, r17	; 0x1c
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	ce 01       	movw	r24, r28
    151c:	b0 df       	rcall	.-160    	; 0x147e <xQueueGenericReset>
    151e:	0e c0       	rjmp	.+28     	; 0x153c <xQueueGenericCreate+0x4c>
    1520:	4f 96       	adiw	r24, 0x1f	; 31
    1522:	99 83       	std	Y+1, r25	; 0x01
    1524:	88 83       	st	Y, r24
    1526:	f6 cf       	rjmp	.-20     	; 0x1514 <xQueueGenericCreate+0x24>
    1528:	d9 83       	std	Y+1, r29	; 0x01
    152a:	c8 83       	st	Y, r28
    152c:	f3 cf       	rjmp	.-26     	; 0x1514 <xQueueGenericCreate+0x24>
    152e:	8f e1       	ldi	r24, 0x1F	; 31
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    1536:	ec 01       	movw	r28, r24
    1538:	89 2b       	or	r24, r25
    153a:	b1 f7       	brne	.-20     	; 0x1528 <xQueueGenericCreate+0x38>
    153c:	ce 01       	movw	r24, r28
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	08 95       	ret

00001548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1548:	9f 92       	push	r9
    154a:	af 92       	push	r10
    154c:	bf 92       	push	r11
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	00 d0       	rcall	.+0      	; 0x1560 <xQueueGenericSend+0x18>
    1560:	1f 92       	push	r1
    1562:	1f 92       	push	r1
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	8c 01       	movw	r16, r24
    156a:	6b 01       	movw	r12, r22
    156c:	5d 83       	std	Y+5, r21	; 0x05
    156e:	4c 83       	std	Y+4, r20	; 0x04
    1570:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1572:	b1 2c       	mov	r11, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1574:	99 24       	eor	r9, r9
    1576:	93 94       	inc	r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1578:	7c 01       	movw	r14, r24
    157a:	88 e0       	ldi	r24, 0x08	; 8
    157c:	e8 0e       	add	r14, r24
    157e:	f1 1c       	adc	r15, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1586:	f8 01       	movw	r30, r16
    1588:	92 8d       	ldd	r25, Z+26	; 0x1a
    158a:	83 8d       	ldd	r24, Z+27	; 0x1b
    158c:	98 17       	cp	r25, r24
    158e:	18 f0       	brcs	.+6      	; 0x1596 <xQueueGenericSend+0x4e>
    1590:	f2 e0       	ldi	r31, 0x02	; 2
    1592:	af 12       	cpse	r10, r31
    1594:	15 c0       	rjmp	.+42     	; 0x15c0 <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1596:	4a 2d       	mov	r20, r10
    1598:	b6 01       	movw	r22, r12
    159a:	c8 01       	movw	r24, r16
    159c:	c9 de       	rcall	.-622    	; 0x1330 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    159e:	f8 01       	movw	r30, r16
    15a0:	91 89       	ldd	r25, Z+17	; 0x11
    15a2:	99 23       	and	r25, r25
    15a4:	39 f0       	breq	.+14     	; 0x15b4 <xQueueGenericSend+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    15a6:	c8 01       	movw	r24, r16
    15a8:	41 96       	adiw	r24, 0x11	; 17
    15aa:	c3 d5       	rcall	.+2950   	; 0x2132 <xTaskRemoveFromEventList>
    15ac:	88 23       	and	r24, r24
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    15ae:	21 f0       	breq	.+8      	; 0x15b8 <xQueueGenericSend+0x70>
    15b0:	e6 dd       	rcall	.-1076   	; 0x117e <vPortYield>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <xQueueGenericSend+0x70>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    15b4:	81 11       	cpse	r24, r1
    15b6:	e3 dd       	rcall	.-1082   	; 0x117e <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	45 c0       	rjmp	.+138    	; 0x164a <xQueueGenericSend+0x102>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	89 2b       	or	r24, r25
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <xQueueGenericSend+0x88>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	3d c0       	rjmp	.+122    	; 0x164a <xQueueGenericSend+0x102>
				}
				else if( xEntryTimeSet == pdFALSE )
    15d0:	b1 10       	cpse	r11, r1
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <xQueueGenericSend+0x94>
    15d4:	ce 01       	movw	r24, r28
    15d6:	01 96       	adiw	r24, 0x01	; 1
					xEntryTimeSet = pdTRUE;
    15d8:	f4 d5       	rcall	.+3048   	; 0x21c2 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    15da:	b9 2c       	mov	r11, r9
    15dc:	0f 90       	pop	r0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	da d3       	rcall	.+1972   	; 0x1d96 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	0f 92       	push	r0
    15e8:	f8 01       	movw	r30, r16
    15ea:	85 8d       	ldd	r24, Z+29	; 0x1d
    15ec:	8f 3f       	cpi	r24, 0xFF	; 255
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <xQueueGenericSend+0xaa>
    15f0:	15 8e       	std	Z+29, r1	; 0x1d
    15f2:	f8 01       	movw	r30, r16
    15f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    15f6:	8f 3f       	cpi	r24, 0xFF	; 255
    15f8:	09 f4       	brne	.+2      	; 0x15fc <xQueueGenericSend+0xb4>
    15fa:	16 8e       	std	Z+30, r1	; 0x1e
    15fc:	0f 90       	pop	r0

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	be 01       	movw	r22, r28
    1602:	6c 5f       	subi	r22, 0xFC	; 252
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	ce 01       	movw	r24, r28
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	e6 d5       	rcall	.+3020   	; 0x21d8 <xTaskCheckForTimeOut>
    160c:	81 11       	cpse	r24, r1
    160e:	19 c0       	rjmp	.+50     	; 0x1642 <xQueueGenericSend+0xfa>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1616:	f8 01       	movw	r30, r16
    1618:	92 8d       	ldd	r25, Z+26	; 0x1a
    161a:	83 8d       	ldd	r24, Z+27	; 0x1b
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    161c:	0f 90       	pop	r0
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    161e:	0f be       	out	0x3f, r0	; 63
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1620:	98 13       	cpse	r25, r24
    1622:	0b c0       	rjmp	.+22     	; 0x163a <xQueueGenericSend+0xf2>
    1624:	6c 81       	ldd	r22, Y+4	; 0x04
    1626:	7d 81       	ldd	r23, Y+5	; 0x05
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1628:	c7 01       	movw	r24, r14
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    162a:	72 d5       	rcall	.+2788   	; 0x2110 <vTaskPlaceOnEventList>
    162c:	c8 01       	movw	r24, r16
				{
					portYIELD_WITHIN_API();
    162e:	de de       	rcall	.-580    	; 0x13ec <prvUnlockQueue>
    1630:	72 d4       	rcall	.+2276   	; 0x1f16 <xTaskResumeAll>
    1632:	81 11       	cpse	r24, r1
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1634:	a5 cf       	rjmp	.-182    	; 0x1580 <xQueueGenericSend+0x38>
    1636:	a3 dd       	rcall	.-1210   	; 0x117e <vPortYield>
    1638:	a3 cf       	rjmp	.-186    	; 0x1580 <xQueueGenericSend+0x38>
				( void ) xTaskResumeAll();
    163a:	c8 01       	movw	r24, r16
    163c:	d7 de       	rcall	.-594    	; 0x13ec <prvUnlockQueue>
    163e:	6b d4       	rcall	.+2262   	; 0x1f16 <xTaskResumeAll>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1640:	9f cf       	rjmp	.-194    	; 0x1580 <xQueueGenericSend+0x38>
    1642:	c8 01       	movw	r24, r16
    1644:	d3 de       	rcall	.-602    	; 0x13ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1646:	67 d4       	rcall	.+2254   	; 0x1f16 <xTaskResumeAll>
    1648:	80 e0       	ldi	r24, 0x00	; 0

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    164a:	0f 90       	pop	r0
		}
	}
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	ff 90       	pop	r15
    165e:	ef 90       	pop	r14
    1660:	df 90       	pop	r13
    1662:	cf 90       	pop	r12
    1664:	bf 90       	pop	r11
    1666:	af 90       	pop	r10
    1668:	9f 90       	pop	r9
    166a:	08 95       	ret

0000166c <__vector_26>:
    166c:	1f 92       	push	r1
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    166e:	0f 92       	push	r0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	0b b6       	in	r0, 0x3b	; 59
    1678:	0f 92       	push	r0
    167a:	2f 93       	push	r18
    167c:	8f 93       	push	r24
    167e:	9f 93       	push	r25
    1680:	af 93       	push	r26
    1682:	bf 93       	push	r27
    1684:	ef 93       	push	r30
    1686:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	0f 92       	push	r0
	{
	    count = buffer->count;
    168e:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <xSerialPort+0xd>
    1692:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    169a:	89 2b       	or	r24, r25
    169c:	31 f4       	brne	.+12     	; 0x16aa <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    169e:	e1 ec       	ldi	r30, 0xC1	; 193
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8f 7d       	andi	r24, 0xDF	; 223
    16a6:	80 83       	st	Z, r24
    16a8:	1c c0       	rjmp	.+56     	; 0x16e2 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    16aa:	e4 e5       	ldi	r30, 0x54	; 84
    16ac:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    16ae:	a4 81       	ldd	r26, Z+4	; 0x04
    16b0:	b5 81       	ldd	r27, Z+5	; 0x05
    16b2:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    16b4:	b5 83       	std	Z+5, r27	; 0x05
    16b6:	a4 83       	std	Z+4, r26	; 0x04
    16b8:	80 85       	ldd	r24, Z+8	; 0x08
    16ba:	91 85       	ldd	r25, Z+9	; 0x09
    16bc:	a8 17       	cp	r26, r24
    16be:	b9 07       	cpc	r27, r25
    16c0:	21 f4       	brne	.+8      	; 0x16ca <__vector_26+0x5e>
	  buffer->out = buffer->start;
    16c2:	86 81       	ldd	r24, Z+6	; 0x06
    16c4:	97 81       	ldd	r25, Z+7	; 0x07
    16c6:	95 83       	std	Z+5, r25	; 0x05
    16c8:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	0f 92       	push	r0
	{
	    buffer->count--;
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    16de:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	0b be       	out	0x3b, r0	; 59
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_37>:
//}
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	0b b6       	in	r0, 0x3b	; 59
    170a:	0f 92       	push	r0
    170c:	2f 93       	push	r18
    170e:	8f 93       	push	r24
    1710:	9f 93       	push	r25
    1712:	af 93       	push	r26
    1714:	bf 93       	push	r27
    1716:	ef 93       	push	r30
    1718:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	0f 92       	push	r0
	{
	    count = buffer->count;
    1720:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <xSerial1Port+0xd>
    1724:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    1728:	0f 90       	pop	r0
    172a:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    172c:	89 2b       	or	r24, r25
    172e:	31 f4       	brne	.+12     	; 0x173c <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    1730:	e9 ec       	ldi	r30, 0xC9	; 201
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8f 7d       	andi	r24, 0xDF	; 223
    1738:	80 83       	st	Z, r24
    173a:	1c c0       	rjmp	.+56     	; 0x1774 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    173c:	ea eb       	ldi	r30, 0xBA	; 186
    173e:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    1740:	a4 81       	ldd	r26, Z+4	; 0x04
    1742:	b5 81       	ldd	r27, Z+5	; 0x05
    1744:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1746:	b5 83       	std	Z+5, r27	; 0x05
    1748:	a4 83       	std	Z+4, r26	; 0x04
    174a:	80 85       	ldd	r24, Z+8	; 0x08
    174c:	91 85       	ldd	r25, Z+9	; 0x09
    174e:	a8 17       	cp	r26, r24
    1750:	b9 07       	cpc	r27, r25
    1752:	21 f4       	brne	.+8      	; 0x175c <__vector_37+0x5e>
	  buffer->out = buffer->start;
    1754:	86 81       	ldd	r24, Z+6	; 0x06
    1756:	97 81       	ldd	r25, Z+7	; 0x07
    1758:	95 83       	std	Z+5, r25	; 0x05
    175a:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	0f 92       	push	r0
	{
	    buffer->count--;
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	91 83       	std	Z+1, r25	; 0x01
    176a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    1770:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    1774:	ff 91       	pop	r31
    1776:	ef 91       	pop	r30
    1778:	bf 91       	pop	r27
    177a:	af 91       	pop	r26
    177c:	9f 91       	pop	r25
    177e:	8f 91       	pop	r24
    1780:	2f 91       	pop	r18
    1782:	0f 90       	pop	r0
    1784:	0b be       	out	0x3b, r0	; 59
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	0f 90       	pop	r0
    178c:	1f 90       	pop	r1
    178e:	18 95       	reti

00001790 <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    1790:	1f 92       	push	r1
    1792:	0f 92       	push	r0
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	0f 92       	push	r0
    1798:	11 24       	eor	r1, r1
    179a:	0b b6       	in	r0, 0x3b	; 59
    179c:	0f 92       	push	r0
    179e:	2f 93       	push	r18
    17a0:	3f 93       	push	r19
    17a2:	4f 93       	push	r20
    17a4:	8f 93       	push	r24
    17a6:	9f 93       	push	r25
    17a8:	af 93       	push	r26
    17aa:	bf 93       	push	r27
    17ac:	ef 93       	push	r30
    17ae:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    17b0:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    17b4:	8c 71       	andi	r24, 0x1C	; 28
    17b6:	71 f0       	breq	.+28     	; 0x17d4 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    17b8:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    17bc:	88 23       	and	r24, r24
    17be:	0c f0       	brlt	.+2      	; 0x17c2 <__vector_51+0x32>
    17c0:	36 c0       	rjmp	.+108    	; 0x182e <__vector_51+0x9e>
    17c2:	a6 ed       	ldi	r26, 0xD6	; 214
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e0 ed       	ldi	r30, 0xD0	; 208
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	8c 91       	ld	r24, X
    17cc:	80 81       	ld	r24, Z
    17ce:	88 23       	and	r24, r24
    17d0:	e4 f3       	brlt	.-8      	; 0x17ca <__vector_51+0x3a>
    17d2:	2d c0       	rjmp	.+90     	; 0x182e <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    17d4:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	0f 92       	push	r0
	{
	    count = buffer->count;
    17de:	e9 e6       	ldi	r30, 0x69	; 105
    17e0:	f4 e0       	ldi	r31, 0x04	; 4
    17e2:	21 81       	ldd	r18, Z+1	; 0x01
    17e4:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    17e6:	0f 90       	pop	r0
    17e8:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    17ea:	83 85       	ldd	r24, Z+11	; 0x0b
    17ec:	94 85       	ldd	r25, Z+12	; 0x0c
    17ee:	28 17       	cp	r18, r24
    17f0:	39 07       	cpc	r19, r25
    17f2:	e9 f0       	breq	.+58     	; 0x182e <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    17f4:	ea e6       	ldi	r30, 0x6A	; 106
    17f6:	f4 e0       	ldi	r31, 0x04	; 4

	*buffer->in = data;
    17f8:	a2 81       	ldd	r26, Z+2	; 0x02
    17fa:	b3 81       	ldd	r27, Z+3	; 0x03
    17fc:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	93 83       	std	Z+3, r25	; 0x03
    1806:	82 83       	std	Z+2, r24	; 0x02
    1808:	20 85       	ldd	r18, Z+8	; 0x08
    180a:	31 85       	ldd	r19, Z+9	; 0x09
    180c:	82 17       	cp	r24, r18
    180e:	93 07       	cpc	r25, r19
    1810:	21 f4       	brne	.+8      	; 0x181a <__vector_51+0x8a>
	  buffer->in = buffer->start;
    1812:	86 81       	ldd	r24, Z+6	; 0x06
    1814:	97 81       	ldd	r25, Z+7	; 0x07
    1816:	93 83       	std	Z+3, r25	; 0x03
    1818:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
	{
	    buffer->count++;
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	bf 91       	pop	r27
    1834:	af 91       	pop	r26
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	4f 91       	pop	r20
    183c:	3f 91       	pop	r19
    183e:	2f 91       	pop	r18
    1840:	0f 90       	pop	r0
    1842:	0b be       	out	0x3b, r0	; 59
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	0b b6       	in	r0, 0x3b	; 59
    185a:	0f 92       	push	r0
    185c:	2f 93       	push	r18
    185e:	8f 93       	push	r24
    1860:	9f 93       	push	r25
    1862:	af 93       	push	r26
    1864:	bf 93       	push	r27
    1866:	ef 93       	push	r30
    1868:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	0f 92       	push	r0
	{
	    count = buffer->count;
    1870:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <xSerial2Port+0xd>
    1874:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    187c:	89 2b       	or	r24, r25
    187e:	31 f4       	brne	.+12     	; 0x188c <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    1880:	e1 ed       	ldi	r30, 0xD1	; 209
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8f 7d       	andi	r24, 0xDF	; 223
    1888:	80 83       	st	Z, r24
    188a:	1c c0       	rjmp	.+56     	; 0x18c4 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    188c:	e6 e7       	ldi	r30, 0x76	; 118
    188e:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    1890:	a4 81       	ldd	r26, Z+4	; 0x04
    1892:	b5 81       	ldd	r27, Z+5	; 0x05
    1894:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1896:	b5 83       	std	Z+5, r27	; 0x05
    1898:	a4 83       	std	Z+4, r26	; 0x04
    189a:	80 85       	ldd	r24, Z+8	; 0x08
    189c:	91 85       	ldd	r25, Z+9	; 0x09
    189e:	a8 17       	cp	r26, r24
    18a0:	b9 07       	cpc	r27, r25
    18a2:	21 f4       	brne	.+8      	; 0x18ac <__vector_52+0x5e>
	  buffer->out = buffer->start;
    18a4:	86 81       	ldd	r24, Z+6	; 0x06
    18a6:	97 81       	ldd	r25, Z+7	; 0x07
    18a8:	95 83       	std	Z+5, r25	; 0x05
    18aa:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	0f 92       	push	r0
	{
	    buffer->count--;
    18b2:	80 81       	ld	r24, Z
    18b4:	91 81       	ldd	r25, Z+1	; 0x01
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    18bc:	0f 90       	pop	r0
    18be:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    18c0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    18c4:	ff 91       	pop	r31
    18c6:	ef 91       	pop	r30
    18c8:	bf 91       	pop	r27
    18ca:	af 91       	pop	r26
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	2f 91       	pop	r18
    18d2:	0f 90       	pop	r0
    18d4:	0b be       	out	0x3b, r0	; 59
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	0f 90       	pop	r0
    18dc:	1f 90       	pop	r1
    18de:	18 95       	reti

000018e0 <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    18e0:	1f 92       	push	r1
    18e2:	0f 92       	push	r0
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	0f 92       	push	r0
    18e8:	11 24       	eor	r1, r1
    18ea:	0b b6       	in	r0, 0x3b	; 59
    18ec:	0f 92       	push	r0
    18ee:	2f 93       	push	r18
    18f0:	3f 93       	push	r19
    18f2:	4f 93       	push	r20
    18f4:	8f 93       	push	r24
    18f6:	9f 93       	push	r25
    18f8:	af 93       	push	r26
    18fa:	bf 93       	push	r27
    18fc:	ef 93       	push	r30
    18fe:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    1900:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1904:	8c 71       	andi	r24, 0x1C	; 28
    1906:	71 f0       	breq	.+28     	; 0x1924 <__vector_54+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    1908:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    190c:	88 23       	and	r24, r24
    190e:	0c f0       	brlt	.+2      	; 0x1912 <__vector_54+0x32>
    1910:	36 c0       	rjmp	.+108    	; 0x197e <__vector_54+0x9e>
    1912:	a6 e3       	ldi	r26, 0x36	; 54
    1914:	b1 e0       	ldi	r27, 0x01	; 1
    1916:	e0 e3       	ldi	r30, 0x30	; 48
    1918:	f1 e0       	ldi	r31, 0x01	; 1
    191a:	8c 91       	ld	r24, X
    191c:	80 81       	ld	r24, Z
    191e:	88 23       	and	r24, r24
    1920:	e4 f3       	brlt	.-8      	; 0x191a <__vector_54+0x3a>
    1922:	2d c0       	rjmp	.+90     	; 0x197e <__vector_54+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    1924:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	0f 92       	push	r0
	{
	    count = buffer->count;
    192e:	eb e8       	ldi	r30, 0x8B	; 139
    1930:	f4 e0       	ldi	r31, 0x04	; 4
    1932:	21 81       	ldd	r18, Z+1	; 0x01
    1934:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    1936:	0f 90       	pop	r0
    1938:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    193a:	83 85       	ldd	r24, Z+11	; 0x0b
    193c:	94 85       	ldd	r25, Z+12	; 0x0c
    193e:	28 17       	cp	r18, r24
    1940:	39 07       	cpc	r19, r25
    1942:	e9 f0       	breq	.+58     	; 0x197e <__vector_54+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1944:	ec e8       	ldi	r30, 0x8C	; 140
    1946:	f4 e0       	ldi	r31, 0x04	; 4

	*buffer->in = data;
    1948:	a2 81       	ldd	r26, Z+2	; 0x02
    194a:	b3 81       	ldd	r27, Z+3	; 0x03
    194c:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    194e:	82 81       	ldd	r24, Z+2	; 0x02
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	93 83       	std	Z+3, r25	; 0x03
    1956:	82 83       	std	Z+2, r24	; 0x02
    1958:	20 85       	ldd	r18, Z+8	; 0x08
    195a:	31 85       	ldd	r19, Z+9	; 0x09
    195c:	82 17       	cp	r24, r18
    195e:	93 07       	cpc	r25, r19
    1960:	21 f4       	brne	.+8      	; 0x196a <__vector_54+0x8a>
	  buffer->in = buffer->start;
    1962:	86 81       	ldd	r24, Z+6	; 0x06
    1964:	97 81       	ldd	r25, Z+7	; 0x07
    1966:	93 83       	std	Z+3, r25	; 0x03
    1968:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	0f 92       	push	r0
	{
	    buffer->count++;
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    197e:	ff 91       	pop	r31
    1980:	ef 91       	pop	r30
    1982:	bf 91       	pop	r27
    1984:	af 91       	pop	r26
    1986:	9f 91       	pop	r25
    1988:	8f 91       	pop	r24
    198a:	4f 91       	pop	r20
    198c:	3f 91       	pop	r19
    198e:	2f 91       	pop	r18
    1990:	0f 90       	pop	r0
    1992:	0b be       	out	0x3b, r0	; 59
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	0b b6       	in	r0, 0x3b	; 59
    19aa:	0f 92       	push	r0
    19ac:	2f 93       	push	r18
    19ae:	8f 93       	push	r24
    19b0:	9f 93       	push	r25
    19b2:	af 93       	push	r26
    19b4:	bf 93       	push	r27
    19b6:	ef 93       	push	r30
    19b8:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	0f 92       	push	r0
	{
	    count = buffer->count;
    19c0:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <xSerial3Port+0xd>
    19c4:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    19c8:	0f 90       	pop	r0
    19ca:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    19cc:	89 2b       	or	r24, r25
    19ce:	31 f4       	brne	.+12     	; 0x19dc <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    19d0:	e1 e3       	ldi	r30, 0x31	; 49
    19d2:	f1 e0       	ldi	r31, 0x01	; 1
    19d4:	80 81       	ld	r24, Z
    19d6:	8f 7d       	andi	r24, 0xDF	; 223
    19d8:	80 83       	st	Z, r24
    19da:	1c c0       	rjmp	.+56     	; 0x1a14 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    19dc:	e8 e9       	ldi	r30, 0x98	; 152
    19de:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    19e0:	a4 81       	ldd	r26, Z+4	; 0x04
    19e2:	b5 81       	ldd	r27, Z+5	; 0x05
    19e4:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    19e6:	b5 83       	std	Z+5, r27	; 0x05
    19e8:	a4 83       	std	Z+4, r26	; 0x04
    19ea:	80 85       	ldd	r24, Z+8	; 0x08
    19ec:	91 85       	ldd	r25, Z+9	; 0x09
    19ee:	a8 17       	cp	r26, r24
    19f0:	b9 07       	cpc	r27, r25
    19f2:	21 f4       	brne	.+8      	; 0x19fc <__vector_55+0x5e>
	  buffer->out = buffer->start;
    19f4:	86 81       	ldd	r24, Z+6	; 0x06
    19f6:	97 81       	ldd	r25, Z+7	; 0x07
    19f8:	95 83       	std	Z+5, r25	; 0x05
    19fa:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	0f 92       	push	r0
	{
	    buffer->count--;
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	91 83       	std	Z+1, r25	; 0x01
    1a0a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    1a10:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    1a14:	ff 91       	pop	r31
    1a16:	ef 91       	pop	r30
    1a18:	bf 91       	pop	r27
    1a1a:	af 91       	pop	r26
    1a1c:	9f 91       	pop	r25
    1a1e:	8f 91       	pop	r24
    1a20:	2f 91       	pop	r18
    1a22:	0f 90       	pop	r0
    1a24:	0b be       	out	0x3b, r0	; 59
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	0f 90       	pop	r0
    1a2c:	1f 90       	pop	r1
    1a2e:	18 95       	reti

00001a30 <prvResetNextTaskUnblockTime>:
    1a30:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <pxDelayedTaskList>
    1a34:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <pxDelayedTaskList+0x1>
    1a38:	80 81       	ld	r24, Z
    1a3a:	81 11       	cpse	r24, r1
    1a3c:	07 c0       	rjmp	.+14     	; 0x1a4c <prvResetNextTaskUnblockTime+0x1c>
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
    1a40:	9f ef       	ldi	r25, 0xFF	; 255
    1a42:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <xNextTaskUnblockTime+0x1>
    1a46:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <xNextTaskUnblockTime>
    1a4a:	08 95       	ret
    1a4c:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <pxDelayedTaskList>
    1a50:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <pxDelayedTaskList+0x1>
    1a54:	05 80       	ldd	r0, Z+5	; 0x05
    1a56:	f6 81       	ldd	r31, Z+6	; 0x06
    1a58:	e0 2d       	mov	r30, r0
    1a5a:	06 80       	ldd	r0, Z+6	; 0x06
    1a5c:	f7 81       	ldd	r31, Z+7	; 0x07
    1a5e:	e0 2d       	mov	r30, r0
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <xNextTaskUnblockTime+0x1>
    1a68:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <xNextTaskUnblockTime>
    1a6c:	08 95       	ret

00001a6e <prvAddCurrentTaskToDelayedList>:
    1a6e:	ff 92       	push	r15
    1a70:	0f 93       	push	r16
    1a72:	1f 93       	push	r17
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	ec 01       	movw	r28, r24
    1a7a:	f6 2e       	mov	r15, r22
    1a7c:	00 91 bb 02 	lds	r16, 0x02BB	; 0x8002bb <xTickCount>
    1a80:	10 91 bc 02 	lds	r17, 0x02BC	; 0x8002bc <xTickCount+0x1>
    1a84:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <pxCurrentTCB>
    1a88:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1a8c:	02 96       	adiw	r24, 0x02	; 2
    1a8e:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1a92:	cf 3f       	cpi	r28, 0xFF	; 255
    1a94:	8f ef       	ldi	r24, 0xFF	; 255
    1a96:	d8 07       	cpc	r29, r24
    1a98:	69 f4       	brne	.+26     	; 0x1ab4 <prvAddCurrentTaskToDelayedList+0x46>
    1a9a:	ff 20       	and	r15, r15
    1a9c:	59 f0       	breq	.+22     	; 0x1ab4 <prvAddCurrentTaskToDelayedList+0x46>
    1a9e:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <pxCurrentTCB>
    1aa2:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1aa6:	6e 5f       	subi	r22, 0xFE	; 254
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	8e eb       	ldi	r24, 0xBE	; 190
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    1ab2:	2f c0       	rjmp	.+94     	; 0x1b12 <prvAddCurrentTaskToDelayedList+0xa4>
    1ab4:	c0 0f       	add	r28, r16
    1ab6:	d1 1f       	adc	r29, r17
    1ab8:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <pxCurrentTCB>
    1abc:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1ac0:	d3 83       	std	Z+3, r29	; 0x03
    1ac2:	c2 83       	std	Z+2, r28	; 0x02
    1ac4:	c0 17       	cp	r28, r16
    1ac6:	d1 07       	cpc	r29, r17
    1ac8:	68 f4       	brcc	.+26     	; 0x1ae4 <prvAddCurrentTaskToDelayedList+0x76>
    1aca:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <pxCurrentTCB>
    1ace:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1ad2:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <pxOverflowDelayedTaskList>
    1ad6:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <pxOverflowDelayedTaskList+0x1>
    1ada:	6e 5f       	subi	r22, 0xFE	; 254
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ade:	0e 94 1e 03 	call	0x63c	; 0x63c <vListInsert>
    1ae2:	17 c0       	rjmp	.+46     	; 0x1b12 <prvAddCurrentTaskToDelayedList+0xa4>
    1ae4:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <pxCurrentTCB>
    1ae8:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1aec:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <pxDelayedTaskList>
    1af0:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <pxDelayedTaskList+0x1>
    1af4:	6e 5f       	subi	r22, 0xFE	; 254
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	0e 94 1e 03 	call	0x63c	; 0x63c <vListInsert>
    1afc:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <xNextTaskUnblockTime>
    1b00:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <xNextTaskUnblockTime+0x1>
    1b04:	c8 17       	cp	r28, r24
    1b06:	d9 07       	cpc	r29, r25
    1b08:	20 f4       	brcc	.+8      	; 0x1b12 <prvAddCurrentTaskToDelayedList+0xa4>
    1b0a:	d0 93 b4 02 	sts	0x02B4, r29	; 0x8002b4 <xNextTaskUnblockTime+0x1>
    1b0e:	c0 93 b3 02 	sts	0x02B3, r28	; 0x8002b3 <xNextTaskUnblockTime>
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	08 95       	ret

00001b1e <xTaskCreate>:
    1b1e:	4f 92       	push	r4
    1b20:	5f 92       	push	r5
    1b22:	6f 92       	push	r6
    1b24:	7f 92       	push	r7
    1b26:	8f 92       	push	r8
    1b28:	9f 92       	push	r9
    1b2a:	af 92       	push	r10
    1b2c:	bf 92       	push	r11
    1b2e:	cf 92       	push	r12
    1b30:	df 92       	push	r13
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	4c 01       	movw	r8, r24
    1b3e:	6b 01       	movw	r12, r22
    1b40:	5a 01       	movw	r10, r20
    1b42:	29 01       	movw	r4, r18
    1b44:	ca 01       	movw	r24, r20
    1b46:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    1b4a:	3c 01       	movw	r6, r24
    1b4c:	89 2b       	or	r24, r25
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <xTaskCreate+0x34>
    1b50:	e9 c0       	rjmp	.+466    	; 0x1d24 <xTaskCreate+0x206>
    1b52:	88 e2       	ldi	r24, 0x28	; 40
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    1b5a:	ec 01       	movw	r28, r24
    1b5c:	89 2b       	or	r24, r25
    1b5e:	a9 f0       	breq	.+42     	; 0x1b8a <xTaskCreate+0x6c>
    1b60:	78 8e       	std	Y+24, r7	; 0x18
    1b62:	6f 8a       	std	Y+23, r6	; 0x17
    1b64:	a5 01       	movw	r20, r10
    1b66:	65 ea       	ldi	r22, 0xA5	; 165
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	c3 01       	movw	r24, r6
    1b6c:	a5 d6       	rcall	.+3402   	; 0x28b8 <memset>
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	a8 1a       	sub	r10, r24
    1b72:	b1 08       	sbc	r11, r1
    1b74:	8f 89       	ldd	r24, Y+23	; 0x17
    1b76:	98 8d       	ldd	r25, Y+24	; 0x18
    1b78:	a8 0e       	add	r10, r24
    1b7a:	b9 1e       	adc	r11, r25
    1b7c:	d6 01       	movw	r26, r12
    1b7e:	8c 91       	ld	r24, X
    1b80:	89 8f       	std	Y+25, r24	; 0x19
    1b82:	8c 91       	ld	r24, X
    1b84:	81 11       	cpse	r24, r1
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <xTaskCreate+0x74>
    1b88:	18 c0       	rjmp	.+48     	; 0x1bba <xTaskCreate+0x9c>
    1b8a:	c3 01       	movw	r24, r6
    1b8c:	0e 94 bc 01 	call	0x378	; 0x378 <vPortFree>
    1b90:	c9 c0       	rjmp	.+402    	; 0x1d24 <xTaskCreate+0x206>
    1b92:	ae 01       	movw	r20, r28
    1b94:	46 5e       	subi	r20, 0xE6	; 230
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	f6 01       	movw	r30, r12
    1b9a:	31 96       	adiw	r30, 0x01	; 1
    1b9c:	b8 e0       	ldi	r27, 0x08	; 8
    1b9e:	cb 0e       	add	r12, r27
    1ba0:	d1 1c       	adc	r13, r1
    1ba2:	cf 01       	movw	r24, r30
    1ba4:	21 91       	ld	r18, Z+
    1ba6:	da 01       	movw	r26, r20
    1ba8:	2d 93       	st	X+, r18
    1baa:	ad 01       	movw	r20, r26
    1bac:	dc 01       	movw	r26, r24
    1bae:	8c 91       	ld	r24, X
    1bb0:	88 23       	and	r24, r24
    1bb2:	19 f0       	breq	.+6      	; 0x1bba <xTaskCreate+0x9c>
    1bb4:	ec 15       	cp	r30, r12
    1bb6:	fd 05       	cpc	r31, r13
    1bb8:	a1 f7       	brne	.-24     	; 0x1ba2 <xTaskCreate+0x84>
    1bba:	18 a2       	std	Y+32, r1	; 0x20
    1bbc:	04 30       	cpi	r16, 0x04	; 4
    1bbe:	08 f0       	brcs	.+2      	; 0x1bc2 <xTaskCreate+0xa4>
    1bc0:	03 e0       	ldi	r16, 0x03	; 3
    1bc2:	0e 8b       	std	Y+22, r16	; 0x16
    1bc4:	09 a3       	std	Y+33, r16	; 0x21
    1bc6:	1a a2       	std	Y+34, r1	; 0x22
    1bc8:	6e 01       	movw	r12, r28
    1bca:	b2 e0       	ldi	r27, 0x02	; 2
    1bcc:	cb 0e       	add	r12, r27
    1bce:	d1 1c       	adc	r13, r1
    1bd0:	c6 01       	movw	r24, r12
    1bd2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialiseItem>
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	0c 96       	adiw	r24, 0x0c	; 12
    1bda:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialiseItem>
    1bde:	d9 87       	std	Y+9, r29	; 0x09
    1be0:	c8 87       	std	Y+8, r28	; 0x08
    1be2:	84 e0       	ldi	r24, 0x04	; 4
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	80 1b       	sub	r24, r16
    1be8:	91 09       	sbc	r25, r1
    1bea:	9d 87       	std	Y+13, r25	; 0x0d
    1bec:	8c 87       	std	Y+12, r24	; 0x0c
    1bee:	db 8b       	std	Y+19, r29	; 0x13
    1bf0:	ca 8b       	std	Y+18, r28	; 0x12
    1bf2:	1b a2       	std	Y+35, r1	; 0x23
    1bf4:	1c a2       	std	Y+36, r1	; 0x24
    1bf6:	1d a2       	std	Y+37, r1	; 0x25
    1bf8:	1e a2       	std	Y+38, r1	; 0x26
    1bfa:	1f a2       	std	Y+39, r1	; 0x27
    1bfc:	a2 01       	movw	r20, r4
    1bfe:	b4 01       	movw	r22, r8
    1c00:	c5 01       	movw	r24, r10
    1c02:	05 da       	rcall	.-3062   	; 0x100e <pxPortInitialiseStack>
    1c04:	99 83       	std	Y+1, r25	; 0x01
    1c06:	88 83       	st	Y, r24
    1c08:	e1 14       	cp	r14, r1
    1c0a:	f1 04       	cpc	r15, r1
    1c0c:	19 f0       	breq	.+6      	; 0x1c14 <xTaskCreate+0xf6>
    1c0e:	f7 01       	movw	r30, r14
    1c10:	d1 83       	std	Z+1, r29	; 0x01
    1c12:	c0 83       	st	Z, r28
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	0f 92       	push	r0
    1c1a:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <uxCurrentNumberOfTasks>
    1c1e:	8f 5f       	subi	r24, 0xFF	; 255
    1c20:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <uxCurrentNumberOfTasks>
    1c24:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <pxCurrentTCB>
    1c28:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1c2c:	89 2b       	or	r24, r25
    1c2e:	d1 f5       	brne	.+116    	; 0x1ca4 <xTaskCreate+0x186>
    1c30:	d0 93 15 03 	sts	0x0315, r29	; 0x800315 <pxCurrentTCB+0x1>
    1c34:	c0 93 14 03 	sts	0x0314, r28	; 0x800314 <pxCurrentTCB>
    1c38:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <uxCurrentNumberOfTasks>
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <xTaskCreate+0x124>
    1c40:	41 c0       	rjmp	.+130    	; 0x1cc4 <xTaskCreate+0x1a6>
    1c42:	80 ef       	ldi	r24, 0xF0	; 240
    1c44:	92 e0       	ldi	r25, 0x02	; 2
    1c46:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1c4a:	89 ef       	ldi	r24, 0xF9	; 249
    1c4c:	92 e0       	ldi	r25, 0x02	; 2
    1c4e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1c5a:	8b e0       	ldi	r24, 0x0B	; 11
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1c62:	87 ee       	ldi	r24, 0xE7	; 231
    1c64:	92 e0       	ldi	r25, 0x02	; 2
    1c66:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1c6a:	8e ed       	ldi	r24, 0xDE	; 222
    1c6c:	92 e0       	ldi	r25, 0x02	; 2
    1c6e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1c72:	81 ed       	ldi	r24, 0xD1	; 209
    1c74:	92 e0       	ldi	r25, 0x02	; 2
    1c76:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1c7a:	88 ec       	ldi	r24, 0xC8	; 200
    1c7c:	92 e0       	ldi	r25, 0x02	; 2
    1c7e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1c82:	8e eb       	ldi	r24, 0xBE	; 190
    1c84:	92 e0       	ldi	r25, 0x02	; 2
    1c86:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1c8a:	87 ee       	ldi	r24, 0xE7	; 231
    1c8c:	92 e0       	ldi	r25, 0x02	; 2
    1c8e:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <pxDelayedTaskList+0x1>
    1c92:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <pxDelayedTaskList>
    1c96:	8e ed       	ldi	r24, 0xDE	; 222
    1c98:	92 e0       	ldi	r25, 0x02	; 2
    1c9a:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <pxOverflowDelayedTaskList+0x1>
    1c9e:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <pxOverflowDelayedTaskList>
    1ca2:	10 c0       	rjmp	.+32     	; 0x1cc4 <xTaskCreate+0x1a6>
    1ca4:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <xSchedulerRunning>
    1ca8:	81 11       	cpse	r24, r1
    1caa:	0c c0       	rjmp	.+24     	; 0x1cc4 <xTaskCreate+0x1a6>
    1cac:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <pxCurrentTCB>
    1cb0:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1cb4:	96 89       	ldd	r25, Z+22	; 0x16
    1cb6:	8e 89       	ldd	r24, Y+22	; 0x16
    1cb8:	89 17       	cp	r24, r25
    1cba:	20 f0       	brcs	.+8      	; 0x1cc4 <xTaskCreate+0x1a6>
    1cbc:	d0 93 15 03 	sts	0x0315, r29	; 0x800315 <pxCurrentTCB+0x1>
    1cc0:	c0 93 14 03 	sts	0x0314, r28	; 0x800314 <pxCurrentTCB>
    1cc4:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <uxTaskNumber>
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <uxTaskNumber>
    1cce:	8e 89       	ldd	r24, Y+22	; 0x16
    1cd0:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <uxTopReadyPriority>
    1cd4:	98 17       	cp	r25, r24
    1cd6:	10 f4       	brcc	.+4      	; 0x1cdc <xTaskCreate+0x1be>
    1cd8:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <uxTopReadyPriority>
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9c 01       	movw	r18, r24
    1ce0:	22 0f       	add	r18, r18
    1ce2:	33 1f       	adc	r19, r19
    1ce4:	22 0f       	add	r18, r18
    1ce6:	33 1f       	adc	r19, r19
    1ce8:	22 0f       	add	r18, r18
    1cea:	33 1f       	adc	r19, r19
    1cec:	82 0f       	add	r24, r18
    1cee:	93 1f       	adc	r25, r19
    1cf0:	b6 01       	movw	r22, r12
    1cf2:	80 51       	subi	r24, 0x10	; 16
    1cf4:	9d 4f       	sbci	r25, 0xFD	; 253
    1cf6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    1cfa:	0f 90       	pop	r0
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <xSchedulerRunning>
    1d02:	88 23       	and	r24, r24
    1d04:	59 f0       	breq	.+22     	; 0x1d1c <xTaskCreate+0x1fe>
    1d06:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <pxCurrentTCB>
    1d0a:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1d0e:	96 89       	ldd	r25, Z+22	; 0x16
    1d10:	8e 89       	ldd	r24, Y+22	; 0x16
    1d12:	98 17       	cp	r25, r24
    1d14:	28 f4       	brcc	.+10     	; 0x1d20 <xTaskCreate+0x202>
    1d16:	33 da       	rcall	.-2970   	; 0x117e <vPortYield>
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	05 c0       	rjmp	.+10     	; 0x1d26 <xTaskCreate+0x208>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	03 c0       	rjmp	.+6      	; 0x1d26 <xTaskCreate+0x208>
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <xTaskCreate+0x208>
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
    1d34:	bf 90       	pop	r11
    1d36:	af 90       	pop	r10
    1d38:	9f 90       	pop	r9
    1d3a:	8f 90       	pop	r8
    1d3c:	7f 90       	pop	r7
    1d3e:	6f 90       	pop	r6
    1d40:	5f 90       	pop	r5
    1d42:	4f 90       	pop	r4
    1d44:	08 95       	ret

00001d46 <vTaskStartScheduler>:
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	0f 93       	push	r16
    1d4c:	0f 2e       	mov	r0, r31
    1d4e:	f1 eb       	ldi	r31, 0xB1	; 177
    1d50:	ef 2e       	mov	r14, r31
    1d52:	f2 e0       	ldi	r31, 0x02	; 2
    1d54:	ff 2e       	mov	r15, r31
    1d56:	f0 2d       	mov	r31, r0
    1d58:	00 e0       	ldi	r16, 0x00	; 0
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	45 e5       	ldi	r20, 0x55	; 85
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	62 e8       	ldi	r22, 0x82	; 130
    1d64:	72 e0       	ldi	r23, 0x02	; 2
    1d66:	83 e3       	ldi	r24, 0x33	; 51
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	d9 de       	rcall	.-590    	; 0x1b1e <xTaskCreate>
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	79 f4       	brne	.+30     	; 0x1d8e <vTaskStartScheduler+0x48>
    1d70:	f8 94       	cli
    1d72:	8f ef       	ldi	r24, 0xFF	; 255
    1d74:	9f ef       	ldi	r25, 0xFF	; 255
    1d76:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <xNextTaskUnblockTime+0x1>
    1d7a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <xNextTaskUnblockTime>
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <xSchedulerRunning>
    1d84:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <xTickCount+0x1>
    1d88:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <xTickCount>
    1d8c:	b2 d9       	rcall	.-3228   	; 0x10f2 <xPortStartScheduler>
    1d8e:	0f 91       	pop	r16
    1d90:	ff 90       	pop	r15
    1d92:	ef 90       	pop	r14
    1d94:	08 95       	ret

00001d96 <vTaskSuspendAll>:
    1d96:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <uxSchedulerSuspended>
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <uxSchedulerSuspended>
    1da0:	08 95       	ret

00001da2 <xTaskIncrementTick>:
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <uxSchedulerSuspended>
    1db6:	81 11       	cpse	r24, r1
    1db8:	98 c0       	rjmp	.+304    	; 0x1eea <xTaskIncrementTick+0x148>
    1dba:	e0 90 bb 02 	lds	r14, 0x02BB	; 0x8002bb <xTickCount>
    1dbe:	f0 90 bc 02 	lds	r15, 0x02BC	; 0x8002bc <xTickCount+0x1>
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	e8 1a       	sub	r14, r24
    1dc6:	f8 0a       	sbc	r15, r24
    1dc8:	f0 92 bc 02 	sts	0x02BC, r15	; 0x8002bc <xTickCount+0x1>
    1dcc:	e0 92 bb 02 	sts	0x02BB, r14	; 0x8002bb <xTickCount>
    1dd0:	e1 14       	cp	r14, r1
    1dd2:	f1 04       	cpc	r15, r1
    1dd4:	b1 f4       	brne	.+44     	; 0x1e02 <xTaskIncrementTick+0x60>
    1dd6:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <pxDelayedTaskList>
    1dda:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <pxDelayedTaskList+0x1>
    1dde:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <pxOverflowDelayedTaskList>
    1de2:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <pxOverflowDelayedTaskList+0x1>
    1de6:	30 93 dd 02 	sts	0x02DD, r19	; 0x8002dd <pxDelayedTaskList+0x1>
    1dea:	20 93 dc 02 	sts	0x02DC, r18	; 0x8002dc <pxDelayedTaskList>
    1dee:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <pxOverflowDelayedTaskList+0x1>
    1df2:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <pxOverflowDelayedTaskList>
    1df6:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <xNumOfOverflows>
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <xNumOfOverflows>
    1e00:	17 de       	rcall	.-978    	; 0x1a30 <prvResetNextTaskUnblockTime>
    1e02:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <xNextTaskUnblockTime>
    1e06:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <xNextTaskUnblockTime+0x1>
    1e0a:	e8 16       	cp	r14, r24
    1e0c:	f9 06       	cpc	r15, r25
    1e0e:	10 f4       	brcc	.+4      	; 0x1e14 <xTaskIncrementTick+0x72>
    1e10:	d1 2c       	mov	r13, r1
    1e12:	53 c0       	rjmp	.+166    	; 0x1eba <xTaskIncrementTick+0x118>
    1e14:	d1 2c       	mov	r13, r1
    1e16:	cc 24       	eor	r12, r12
    1e18:	c3 94       	inc	r12
    1e1a:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <pxDelayedTaskList>
    1e1e:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <pxDelayedTaskList+0x1>
    1e22:	80 81       	ld	r24, Z
    1e24:	81 11       	cpse	r24, r1
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <xTaskIncrementTick+0x94>
    1e28:	8f ef       	ldi	r24, 0xFF	; 255
    1e2a:	9f ef       	ldi	r25, 0xFF	; 255
    1e2c:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <xNextTaskUnblockTime+0x1>
    1e30:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <xNextTaskUnblockTime>
    1e34:	42 c0       	rjmp	.+132    	; 0x1eba <xTaskIncrementTick+0x118>
    1e36:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <pxDelayedTaskList>
    1e3a:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <pxDelayedTaskList+0x1>
    1e3e:	05 80       	ldd	r0, Z+5	; 0x05
    1e40:	f6 81       	ldd	r31, Z+6	; 0x06
    1e42:	e0 2d       	mov	r30, r0
    1e44:	c6 81       	ldd	r28, Z+6	; 0x06
    1e46:	d7 81       	ldd	r29, Z+7	; 0x07
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	e8 16       	cp	r14, r24
    1e4e:	f9 06       	cpc	r15, r25
    1e50:	28 f4       	brcc	.+10     	; 0x1e5c <xTaskIncrementTick+0xba>
    1e52:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <xNextTaskUnblockTime+0x1>
    1e56:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <xNextTaskUnblockTime>
    1e5a:	2f c0       	rjmp	.+94     	; 0x1eba <xTaskIncrementTick+0x118>
    1e5c:	8e 01       	movw	r16, r28
    1e5e:	0e 5f       	subi	r16, 0xFE	; 254
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
    1e62:	c8 01       	movw	r24, r16
    1e64:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1e68:	8c 89       	ldd	r24, Y+20	; 0x14
    1e6a:	9d 89       	ldd	r25, Y+21	; 0x15
    1e6c:	89 2b       	or	r24, r25
    1e6e:	21 f0       	breq	.+8      	; 0x1e78 <xTaskIncrementTick+0xd6>
    1e70:	ce 01       	movw	r24, r28
    1e72:	0c 96       	adiw	r24, 0x0c	; 12
    1e74:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1e78:	8e 89       	ldd	r24, Y+22	; 0x16
    1e7a:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <uxTopReadyPriority>
    1e7e:	98 17       	cp	r25, r24
    1e80:	10 f4       	brcc	.+4      	; 0x1e86 <xTaskIncrementTick+0xe4>
    1e82:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <uxTopReadyPriority>
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9c 01       	movw	r18, r24
    1e8a:	22 0f       	add	r18, r18
    1e8c:	33 1f       	adc	r19, r19
    1e8e:	22 0f       	add	r18, r18
    1e90:	33 1f       	adc	r19, r19
    1e92:	22 0f       	add	r18, r18
    1e94:	33 1f       	adc	r19, r19
    1e96:	82 0f       	add	r24, r18
    1e98:	93 1f       	adc	r25, r19
    1e9a:	b8 01       	movw	r22, r16
    1e9c:	80 51       	subi	r24, 0x10	; 16
    1e9e:	9d 4f       	sbci	r25, 0xFD	; 253
    1ea0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    1ea4:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <pxCurrentTCB>
    1ea8:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1eac:	9e 89       	ldd	r25, Y+22	; 0x16
    1eae:	86 89       	ldd	r24, Z+22	; 0x16
    1eb0:	98 17       	cp	r25, r24
    1eb2:	08 f4       	brcc	.+2      	; 0x1eb6 <xTaskIncrementTick+0x114>
    1eb4:	b2 cf       	rjmp	.-156    	; 0x1e1a <xTaskIncrementTick+0x78>
    1eb6:	dc 2c       	mov	r13, r12
    1eb8:	b0 cf       	rjmp	.-160    	; 0x1e1a <xTaskIncrementTick+0x78>
    1eba:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <pxCurrentTCB>
    1ebe:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1ec2:	86 89       	ldd	r24, Z+22	; 0x16
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	ee 0f       	add	r30, r30
    1eca:	ff 1f       	adc	r31, r31
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	8e 0f       	add	r24, r30
    1ed6:	9f 1f       	adc	r25, r31
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e0 51       	subi	r30, 0x10	; 16
    1edc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ede:	80 81       	ld	r24, Z
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	48 f0       	brcs	.+18     	; 0x1ef6 <xTaskIncrementTick+0x154>
    1ee4:	dd 24       	eor	r13, r13
    1ee6:	d3 94       	inc	r13
    1ee8:	06 c0       	rjmp	.+12     	; 0x1ef6 <xTaskIncrementTick+0x154>
    1eea:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <uxPendedTicks>
    1eee:	8f 5f       	subi	r24, 0xFF	; 255
    1ef0:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <uxPendedTicks>
    1ef4:	d1 2c       	mov	r13, r1
    1ef6:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <xYieldPending>
    1efa:	88 23       	and	r24, r24
    1efc:	11 f0       	breq	.+4      	; 0x1f02 <xTaskIncrementTick+0x160>
    1efe:	dd 24       	eor	r13, r13
    1f00:	d3 94       	inc	r13
    1f02:	8d 2d       	mov	r24, r13
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
    1f0c:	ff 90       	pop	r15
    1f0e:	ef 90       	pop	r14
    1f10:	df 90       	pop	r13
    1f12:	cf 90       	pop	r12
    1f14:	08 95       	ret

00001f16 <xTaskResumeAll>:
    1f16:	df 92       	push	r13
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	0f 92       	push	r0
    1f2a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <uxSchedulerSuspended>
    1f2e:	81 50       	subi	r24, 0x01	; 1
    1f30:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <uxSchedulerSuspended>
    1f34:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <uxSchedulerSuspended>
    1f38:	81 11       	cpse	r24, r1
    1f3a:	5c c0       	rjmp	.+184    	; 0x1ff4 <xTaskResumeAll+0xde>
    1f3c:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <uxCurrentNumberOfTasks>
    1f40:	81 11       	cpse	r24, r1
    1f42:	33 c0       	rjmp	.+102    	; 0x1faa <xTaskResumeAll+0x94>
    1f44:	5a c0       	rjmp	.+180    	; 0x1ffa <xTaskResumeAll+0xe4>
    1f46:	d7 01       	movw	r26, r14
    1f48:	15 96       	adiw	r26, 0x05	; 5
    1f4a:	ed 91       	ld	r30, X+
    1f4c:	fc 91       	ld	r31, X
    1f4e:	16 97       	sbiw	r26, 0x06	; 6
    1f50:	c6 81       	ldd	r28, Z+6	; 0x06
    1f52:	d7 81       	ldd	r29, Z+7	; 0x07
    1f54:	ce 01       	movw	r24, r28
    1f56:	0c 96       	adiw	r24, 0x0c	; 12
    1f58:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1f5c:	8e 01       	movw	r16, r28
    1f5e:	0e 5f       	subi	r16, 0xFE	; 254
    1f60:	1f 4f       	sbci	r17, 0xFF	; 255
    1f62:	c8 01       	movw	r24, r16
    1f64:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1f68:	8e 89       	ldd	r24, Y+22	; 0x16
    1f6a:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <uxTopReadyPriority>
    1f6e:	98 17       	cp	r25, r24
    1f70:	10 f4       	brcc	.+4      	; 0x1f76 <xTaskResumeAll+0x60>
    1f72:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <uxTopReadyPriority>
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9c 01       	movw	r18, r24
    1f7a:	22 0f       	add	r18, r18
    1f7c:	33 1f       	adc	r19, r19
    1f7e:	22 0f       	add	r18, r18
    1f80:	33 1f       	adc	r19, r19
    1f82:	22 0f       	add	r18, r18
    1f84:	33 1f       	adc	r19, r19
    1f86:	82 0f       	add	r24, r18
    1f88:	93 1f       	adc	r25, r19
    1f8a:	b8 01       	movw	r22, r16
    1f8c:	80 51       	subi	r24, 0x10	; 16
    1f8e:	9d 4f       	sbci	r25, 0xFD	; 253
    1f90:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    1f94:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <pxCurrentTCB>
    1f98:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    1f9c:	9e 89       	ldd	r25, Y+22	; 0x16
    1f9e:	86 89       	ldd	r24, Z+22	; 0x16
    1fa0:	98 17       	cp	r25, r24
    1fa2:	68 f0       	brcs	.+26     	; 0x1fbe <xTaskResumeAll+0xa8>
    1fa4:	d0 92 b7 02 	sts	0x02B7, r13	; 0x8002b7 <xYieldPending>
    1fa8:	0a c0       	rjmp	.+20     	; 0x1fbe <xTaskResumeAll+0xa8>
    1faa:	c0 e0       	ldi	r28, 0x00	; 0
    1fac:	d0 e0       	ldi	r29, 0x00	; 0
    1fae:	0f 2e       	mov	r0, r31
    1fb0:	f1 ed       	ldi	r31, 0xD1	; 209
    1fb2:	ef 2e       	mov	r14, r31
    1fb4:	f2 e0       	ldi	r31, 0x02	; 2
    1fb6:	ff 2e       	mov	r15, r31
    1fb8:	f0 2d       	mov	r31, r0
    1fba:	dd 24       	eor	r13, r13
    1fbc:	d3 94       	inc	r13
    1fbe:	f7 01       	movw	r30, r14
    1fc0:	80 81       	ld	r24, Z
    1fc2:	81 11       	cpse	r24, r1
    1fc4:	c0 cf       	rjmp	.-128    	; 0x1f46 <xTaskResumeAll+0x30>
    1fc6:	cd 2b       	or	r28, r29
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <xTaskResumeAll+0xb6>
    1fca:	32 dd       	rcall	.-1436   	; 0x1a30 <prvResetNextTaskUnblockTime>
    1fcc:	c0 91 b8 02 	lds	r28, 0x02B8	; 0x8002b8 <uxPendedTicks>
    1fd0:	cc 23       	and	r28, r28
    1fd2:	49 f0       	breq	.+18     	; 0x1fe6 <xTaskResumeAll+0xd0>
    1fd4:	d1 e0       	ldi	r29, 0x01	; 1
    1fd6:	e5 de       	rcall	.-566    	; 0x1da2 <xTaskIncrementTick>
    1fd8:	81 11       	cpse	r24, r1
    1fda:	d0 93 b7 02 	sts	0x02B7, r29	; 0x8002b7 <xYieldPending>
    1fde:	c1 50       	subi	r28, 0x01	; 1
    1fe0:	d1 f7       	brne	.-12     	; 0x1fd6 <xTaskResumeAll+0xc0>
    1fe2:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <uxPendedTicks>
    1fe6:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <xYieldPending>
    1fea:	88 23       	and	r24, r24
    1fec:	29 f0       	breq	.+10     	; 0x1ff8 <xTaskResumeAll+0xe2>
    1fee:	c7 d8       	rcall	.-3698   	; 0x117e <vPortYield>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	03 c0       	rjmp	.+6      	; 0x1ffa <xTaskResumeAll+0xe4>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <xTaskResumeAll+0xe4>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	df 90       	pop	r13
    200c:	08 95       	ret

0000200e <vTaskSwitchContext>:
    200e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <uxSchedulerSuspended>
    2012:	88 23       	and	r24, r24
    2014:	21 f0       	breq	.+8      	; 0x201e <vTaskSwitchContext+0x10>
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <xYieldPending>
    201c:	08 95       	ret
    201e:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <xYieldPending>
    2022:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <pxCurrentTCB>
    2026:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    202a:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <pxCurrentTCB>
    202e:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    2032:	2d 91       	ld	r18, X+
    2034:	3c 91       	ld	r19, X
    2036:	87 89       	ldd	r24, Z+23	; 0x17
    2038:	90 8d       	ldd	r25, Z+24	; 0x18
    203a:	82 17       	cp	r24, r18
    203c:	93 07       	cpc	r25, r19
    203e:	60 f0       	brcs	.+24     	; 0x2058 <vTaskSwitchContext+0x4a>
    2040:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <pxCurrentTCB>
    2044:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    2048:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <pxCurrentTCB>
    204c:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    2050:	67 5e       	subi	r22, 0xE7	; 231
    2052:	7f 4f       	sbci	r23, 0xFF	; 255
    2054:	0e 94 ee 01 	call	0x3dc	; 0x3dc <vApplicationStackOverflowHook>
    2058:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <uxTopReadyPriority>
    205c:	82 2f       	mov	r24, r18
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	fc 01       	movw	r30, r24
    2062:	ee 0f       	add	r30, r30
    2064:	ff 1f       	adc	r31, r31
    2066:	ee 0f       	add	r30, r30
    2068:	ff 1f       	adc	r31, r31
    206a:	ee 0f       	add	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	e8 0f       	add	r30, r24
    2070:	f9 1f       	adc	r31, r25
    2072:	e0 51       	subi	r30, 0x10	; 16
    2074:	fd 4f       	sbci	r31, 0xFD	; 253
    2076:	30 81       	ld	r19, Z
    2078:	31 11       	cpse	r19, r1
    207a:	11 c0       	rjmp	.+34     	; 0x209e <vTaskSwitchContext+0x90>
    207c:	21 50       	subi	r18, 0x01	; 1
    207e:	82 2f       	mov	r24, r18
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	fc 01       	movw	r30, r24
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	ee 0f       	add	r30, r30
    208e:	ff 1f       	adc	r31, r31
    2090:	e8 0f       	add	r30, r24
    2092:	f9 1f       	adc	r31, r25
    2094:	e0 51       	subi	r30, 0x10	; 16
    2096:	fd 4f       	sbci	r31, 0xFD	; 253
    2098:	30 81       	ld	r19, Z
    209a:	33 23       	and	r19, r19
    209c:	79 f3       	breq	.-34     	; 0x207c <vTaskSwitchContext+0x6e>
    209e:	ac 01       	movw	r20, r24
    20a0:	44 0f       	add	r20, r20
    20a2:	55 1f       	adc	r21, r21
    20a4:	44 0f       	add	r20, r20
    20a6:	55 1f       	adc	r21, r21
    20a8:	44 0f       	add	r20, r20
    20aa:	55 1f       	adc	r21, r21
    20ac:	48 0f       	add	r20, r24
    20ae:	59 1f       	adc	r21, r25
    20b0:	da 01       	movw	r26, r20
    20b2:	a0 51       	subi	r26, 0x10	; 16
    20b4:	bd 4f       	sbci	r27, 0xFD	; 253
    20b6:	11 96       	adiw	r26, 0x01	; 1
    20b8:	ed 91       	ld	r30, X+
    20ba:	fc 91       	ld	r31, X
    20bc:	12 97       	sbiw	r26, 0x02	; 2
    20be:	02 80       	ldd	r0, Z+2	; 0x02
    20c0:	f3 81       	ldd	r31, Z+3	; 0x03
    20c2:	e0 2d       	mov	r30, r0
    20c4:	12 96       	adiw	r26, 0x02	; 2
    20c6:	fc 93       	st	X, r31
    20c8:	ee 93       	st	-X, r30
    20ca:	11 97       	sbiw	r26, 0x01	; 1
    20cc:	4d 50       	subi	r20, 0x0D	; 13
    20ce:	5d 4f       	sbci	r21, 0xFD	; 253
    20d0:	e4 17       	cp	r30, r20
    20d2:	f5 07       	cpc	r31, r21
    20d4:	29 f4       	brne	.+10     	; 0x20e0 <vTaskSwitchContext+0xd2>
    20d6:	42 81       	ldd	r20, Z+2	; 0x02
    20d8:	53 81       	ldd	r21, Z+3	; 0x03
    20da:	fd 01       	movw	r30, r26
    20dc:	52 83       	std	Z+2, r21	; 0x02
    20de:	41 83       	std	Z+1, r20	; 0x01
    20e0:	fc 01       	movw	r30, r24
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	ee 0f       	add	r30, r30
    20e8:	ff 1f       	adc	r31, r31
    20ea:	ee 0f       	add	r30, r30
    20ec:	ff 1f       	adc	r31, r31
    20ee:	8e 0f       	add	r24, r30
    20f0:	9f 1f       	adc	r25, r31
    20f2:	fc 01       	movw	r30, r24
    20f4:	e0 51       	subi	r30, 0x10	; 16
    20f6:	fd 4f       	sbci	r31, 0xFD	; 253
    20f8:	01 80       	ldd	r0, Z+1	; 0x01
    20fa:	f2 81       	ldd	r31, Z+2	; 0x02
    20fc:	e0 2d       	mov	r30, r0
    20fe:	86 81       	ldd	r24, Z+6	; 0x06
    2100:	97 81       	ldd	r25, Z+7	; 0x07
    2102:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <pxCurrentTCB+0x1>
    2106:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <pxCurrentTCB>
    210a:	20 93 ba 02 	sts	0x02BA, r18	; 0x8002ba <uxTopReadyPriority>
    210e:	08 95       	ret

00002110 <vTaskPlaceOnEventList>:
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	eb 01       	movw	r28, r22
    2116:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <pxCurrentTCB>
    211a:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    211e:	64 5f       	subi	r22, 0xF4	; 244
    2120:	7f 4f       	sbci	r23, 0xFF	; 255
    2122:	0e 94 1e 03 	call	0x63c	; 0x63c <vListInsert>
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	ce 01       	movw	r24, r28
    212a:	a1 dc       	rcall	.-1726   	; 0x1a6e <prvAddCurrentTaskToDelayedList>
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <xTaskRemoveFromEventList>:
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	dc 01       	movw	r26, r24
    213c:	15 96       	adiw	r26, 0x05	; 5
    213e:	ed 91       	ld	r30, X+
    2140:	fc 91       	ld	r31, X
    2142:	16 97       	sbiw	r26, 0x06	; 6
    2144:	c6 81       	ldd	r28, Z+6	; 0x06
    2146:	d7 81       	ldd	r29, Z+7	; 0x07
    2148:	8e 01       	movw	r16, r28
    214a:	04 5f       	subi	r16, 0xF4	; 244
    214c:	1f 4f       	sbci	r17, 0xFF	; 255
    214e:	c8 01       	movw	r24, r16
    2150:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    2154:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <uxSchedulerSuspended>
    2158:	81 11       	cpse	r24, r1
    215a:	1c c0       	rjmp	.+56     	; 0x2194 <xTaskRemoveFromEventList+0x62>
    215c:	0a 50       	subi	r16, 0x0A	; 10
    215e:	11 09       	sbc	r17, r1
    2160:	c8 01       	movw	r24, r16
    2162:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    2166:	8e 89       	ldd	r24, Y+22	; 0x16
    2168:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <uxTopReadyPriority>
    216c:	98 17       	cp	r25, r24
    216e:	10 f4       	brcc	.+4      	; 0x2174 <xTaskRemoveFromEventList+0x42>
    2170:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <uxTopReadyPriority>
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9c 01       	movw	r18, r24
    2178:	22 0f       	add	r18, r18
    217a:	33 1f       	adc	r19, r19
    217c:	22 0f       	add	r18, r18
    217e:	33 1f       	adc	r19, r19
    2180:	22 0f       	add	r18, r18
    2182:	33 1f       	adc	r19, r19
    2184:	82 0f       	add	r24, r18
    2186:	93 1f       	adc	r25, r19
    2188:	b8 01       	movw	r22, r16
    218a:	80 51       	subi	r24, 0x10	; 16
    218c:	9d 4f       	sbci	r25, 0xFD	; 253
    218e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    2192:	05 c0       	rjmp	.+10     	; 0x219e <xTaskRemoveFromEventList+0x6c>
    2194:	b8 01       	movw	r22, r16
    2196:	81 ed       	ldi	r24, 0xD1	; 209
    2198:	92 e0       	ldi	r25, 0x02	; 2
    219a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    219e:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <pxCurrentTCB>
    21a2:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <pxCurrentTCB+0x1>
    21a6:	9e 89       	ldd	r25, Y+22	; 0x16
    21a8:	86 89       	ldd	r24, Z+22	; 0x16
    21aa:	89 17       	cp	r24, r25
    21ac:	20 f4       	brcc	.+8      	; 0x21b6 <xTaskRemoveFromEventList+0x84>
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <xYieldPending>
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <xTaskRemoveFromEventList+0x86>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	08 95       	ret

000021c2 <vTaskSetTimeOutState>:
    21c2:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <xNumOfOverflows>
    21c6:	fc 01       	movw	r30, r24
    21c8:	20 83       	st	Z, r18
    21ca:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <xTickCount>
    21ce:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <xTickCount+0x1>
    21d2:	32 83       	std	Z+2, r19	; 0x02
    21d4:	21 83       	std	Z+1, r18	; 0x01
    21d6:	08 95       	ret

000021d8 <xTaskCheckForTimeOut>:
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	0f 92       	push	r0
    21de:	40 91 bb 02 	lds	r20, 0x02BB	; 0x8002bb <xTickCount>
    21e2:	50 91 bc 02 	lds	r21, 0x02BC	; 0x8002bc <xTickCount+0x1>
    21e6:	db 01       	movw	r26, r22
    21e8:	2d 91       	ld	r18, X+
    21ea:	3c 91       	ld	r19, X
    21ec:	2f 3f       	cpi	r18, 0xFF	; 255
    21ee:	bf ef       	ldi	r27, 0xFF	; 255
    21f0:	3b 07       	cpc	r19, r27
    21f2:	11 f1       	breq	.+68     	; 0x2238 <__stack+0x39>
    21f4:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <xNumOfOverflows>
    21f8:	dc 01       	movw	r26, r24
    21fa:	fc 91       	ld	r31, X
    21fc:	fe 17       	cp	r31, r30
    21fe:	39 f0       	breq	.+14     	; 0x220e <__stack+0xf>
    2200:	11 96       	adiw	r26, 0x01	; 1
    2202:	ed 91       	ld	r30, X+
    2204:	fc 91       	ld	r31, X
    2206:	12 97       	sbiw	r26, 0x02	; 2
    2208:	4e 17       	cp	r20, r30
    220a:	5f 07       	cpc	r21, r31
    220c:	b8 f4       	brcc	.+46     	; 0x223c <__stack+0x3d>
    220e:	dc 01       	movw	r26, r24
    2210:	11 96       	adiw	r26, 0x01	; 1
    2212:	ed 91       	ld	r30, X+
    2214:	fc 91       	ld	r31, X
    2216:	12 97       	sbiw	r26, 0x02	; 2
    2218:	da 01       	movw	r26, r20
    221a:	ae 1b       	sub	r26, r30
    221c:	bf 0b       	sbc	r27, r31
    221e:	a2 17       	cp	r26, r18
    2220:	b3 07       	cpc	r27, r19
    2222:	70 f4       	brcc	.+28     	; 0x2240 <__stack+0x41>
    2224:	db 01       	movw	r26, r22
    2226:	e4 1b       	sub	r30, r20
    2228:	f5 0b       	sbc	r31, r21
    222a:	2e 0f       	add	r18, r30
    222c:	3f 1f       	adc	r19, r31
    222e:	2d 93       	st	X+, r18
    2230:	3c 93       	st	X, r19
    2232:	c7 df       	rcall	.-114    	; 0x21c2 <vTaskSetTimeOutState>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	05 c0       	rjmp	.+10     	; 0x2242 <__stack+0x43>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	03 c0       	rjmp	.+6      	; 0x2242 <__stack+0x43>
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	01 c0       	rjmp	.+2      	; 0x2242 <__stack+0x43>
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	0f 90       	pop	r0
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	08 95       	ret

00002248 <vTaskMissedYield>:
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <xYieldPending>
    224e:	08 95       	ret

00002250 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	fc 01       	movw	r30, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    225a:	89 2b       	or	r24, r25
    225c:	79 f1       	breq	.+94     	; 0x22bc <xTaskPriorityDisinherit+0x6c>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    225e:	82 a1       	ldd	r24, Z+34	; 0x22
    2260:	81 50       	subi	r24, 0x01	; 1
    2262:	82 a3       	std	Z+34, r24	; 0x22

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2264:	26 89       	ldd	r18, Z+22	; 0x16
    2266:	91 a1       	ldd	r25, Z+33	; 0x21
    2268:	29 17       	cp	r18, r25
    226a:	51 f1       	breq	.+84     	; 0x22c0 <xTaskPriorityDisinherit+0x70>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    226c:	81 11       	cpse	r24, r1
    226e:	2a c0       	rjmp	.+84     	; 0x22c4 <xTaskPriorityDisinherit+0x74>
    2270:	ef 01       	movw	r28, r30
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2272:	8f 01       	movw	r16, r30
    2274:	0e 5f       	subi	r16, 0xFE	; 254
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	c8 01       	movw	r24, r16
    227a:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    227e:	89 a1       	ldd	r24, Y+33	; 0x21
    2280:	8e 8b       	std	Y+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2282:	24 e0       	ldi	r18, 0x04	; 4
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	28 1b       	sub	r18, r24
    2288:	31 09       	sbc	r19, r1
    228a:	3d 87       	std	Y+13, r19	; 0x0d
    228c:	2c 87       	std	Y+12, r18	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    228e:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <uxTopReadyPriority>
    2292:	98 17       	cp	r25, r24
    2294:	10 f4       	brcc	.+4      	; 0x229a <xTaskPriorityDisinherit+0x4a>
    2296:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <uxTopReadyPriority>
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9c 01       	movw	r18, r24
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	22 0f       	add	r18, r18
    22a4:	33 1f       	adc	r19, r19
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	82 0f       	add	r24, r18
    22ac:	93 1f       	adc	r25, r19
    22ae:	b8 01       	movw	r22, r16
    22b0:	80 51       	subi	r24, 0x10	; 16
    22b2:	9d 4f       	sbci	r25, 0xFD	; 253
    22b4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	05 c0       	rjmp	.+10     	; 0x22c6 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	03 c0       	rjmp	.+6      	; 0x22c6 <xTaskPriorityDisinherit+0x76>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	01 c0       	rjmp	.+2      	; 0x22c6 <xTaskPriorityDisinherit+0x76>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	08 95       	ret

000022d0 <__subsf3>:
    22d0:	50 58       	subi	r21, 0x80	; 128

000022d2 <__addsf3>:
    22d2:	bb 27       	eor	r27, r27
    22d4:	aa 27       	eor	r26, r26
    22d6:	0e d0       	rcall	.+28     	; 0x22f4 <__addsf3x>
    22d8:	e5 c0       	rjmp	.+458    	; 0x24a4 <__fp_round>
    22da:	d6 d0       	rcall	.+428    	; 0x2488 <__fp_pscA>
    22dc:	30 f0       	brcs	.+12     	; 0x22ea <__addsf3+0x18>
    22de:	db d0       	rcall	.+438    	; 0x2496 <__fp_pscB>
    22e0:	20 f0       	brcs	.+8      	; 0x22ea <__addsf3+0x18>
    22e2:	31 f4       	brne	.+12     	; 0x22f0 <__addsf3+0x1e>
    22e4:	9f 3f       	cpi	r25, 0xFF	; 255
    22e6:	11 f4       	brne	.+4      	; 0x22ec <__addsf3+0x1a>
    22e8:	1e f4       	brtc	.+6      	; 0x22f0 <__addsf3+0x1e>
    22ea:	cb c0       	rjmp	.+406    	; 0x2482 <__fp_nan>
    22ec:	0e f4       	brtc	.+2      	; 0x22f0 <__addsf3+0x1e>
    22ee:	e0 95       	com	r30
    22f0:	e7 fb       	bst	r30, 7
    22f2:	c1 c0       	rjmp	.+386    	; 0x2476 <__fp_inf>

000022f4 <__addsf3x>:
    22f4:	e9 2f       	mov	r30, r25
    22f6:	e7 d0       	rcall	.+462    	; 0x24c6 <__fp_split3>
    22f8:	80 f3       	brcs	.-32     	; 0x22da <__addsf3+0x8>
    22fa:	ba 17       	cp	r27, r26
    22fc:	62 07       	cpc	r22, r18
    22fe:	73 07       	cpc	r23, r19
    2300:	84 07       	cpc	r24, r20
    2302:	95 07       	cpc	r25, r21
    2304:	18 f0       	brcs	.+6      	; 0x230c <__addsf3x+0x18>
    2306:	71 f4       	brne	.+28     	; 0x2324 <__addsf3x+0x30>
    2308:	9e f5       	brtc	.+102    	; 0x2370 <__addsf3x+0x7c>
    230a:	ff c0       	rjmp	.+510    	; 0x250a <__fp_zero>
    230c:	0e f4       	brtc	.+2      	; 0x2310 <__addsf3x+0x1c>
    230e:	e0 95       	com	r30
    2310:	0b 2e       	mov	r0, r27
    2312:	ba 2f       	mov	r27, r26
    2314:	a0 2d       	mov	r26, r0
    2316:	0b 01       	movw	r0, r22
    2318:	b9 01       	movw	r22, r18
    231a:	90 01       	movw	r18, r0
    231c:	0c 01       	movw	r0, r24
    231e:	ca 01       	movw	r24, r20
    2320:	a0 01       	movw	r20, r0
    2322:	11 24       	eor	r1, r1
    2324:	ff 27       	eor	r31, r31
    2326:	59 1b       	sub	r21, r25
    2328:	99 f0       	breq	.+38     	; 0x2350 <__addsf3x+0x5c>
    232a:	59 3f       	cpi	r21, 0xF9	; 249
    232c:	50 f4       	brcc	.+20     	; 0x2342 <__addsf3x+0x4e>
    232e:	50 3e       	cpi	r21, 0xE0	; 224
    2330:	68 f1       	brcs	.+90     	; 0x238c <__addsf3x+0x98>
    2332:	1a 16       	cp	r1, r26
    2334:	f0 40       	sbci	r31, 0x00	; 0
    2336:	a2 2f       	mov	r26, r18
    2338:	23 2f       	mov	r18, r19
    233a:	34 2f       	mov	r19, r20
    233c:	44 27       	eor	r20, r20
    233e:	58 5f       	subi	r21, 0xF8	; 248
    2340:	f3 cf       	rjmp	.-26     	; 0x2328 <__addsf3x+0x34>
    2342:	46 95       	lsr	r20
    2344:	37 95       	ror	r19
    2346:	27 95       	ror	r18
    2348:	a7 95       	ror	r26
    234a:	f0 40       	sbci	r31, 0x00	; 0
    234c:	53 95       	inc	r21
    234e:	c9 f7       	brne	.-14     	; 0x2342 <__addsf3x+0x4e>
    2350:	7e f4       	brtc	.+30     	; 0x2370 <__addsf3x+0x7c>
    2352:	1f 16       	cp	r1, r31
    2354:	ba 0b       	sbc	r27, r26
    2356:	62 0b       	sbc	r22, r18
    2358:	73 0b       	sbc	r23, r19
    235a:	84 0b       	sbc	r24, r20
    235c:	ba f0       	brmi	.+46     	; 0x238c <__addsf3x+0x98>
    235e:	91 50       	subi	r25, 0x01	; 1
    2360:	a1 f0       	breq	.+40     	; 0x238a <__addsf3x+0x96>
    2362:	ff 0f       	add	r31, r31
    2364:	bb 1f       	adc	r27, r27
    2366:	66 1f       	adc	r22, r22
    2368:	77 1f       	adc	r23, r23
    236a:	88 1f       	adc	r24, r24
    236c:	c2 f7       	brpl	.-16     	; 0x235e <__addsf3x+0x6a>
    236e:	0e c0       	rjmp	.+28     	; 0x238c <__addsf3x+0x98>
    2370:	ba 0f       	add	r27, r26
    2372:	62 1f       	adc	r22, r18
    2374:	73 1f       	adc	r23, r19
    2376:	84 1f       	adc	r24, r20
    2378:	48 f4       	brcc	.+18     	; 0x238c <__addsf3x+0x98>
    237a:	87 95       	ror	r24
    237c:	77 95       	ror	r23
    237e:	67 95       	ror	r22
    2380:	b7 95       	ror	r27
    2382:	f7 95       	ror	r31
    2384:	9e 3f       	cpi	r25, 0xFE	; 254
    2386:	08 f0       	brcs	.+2      	; 0x238a <__addsf3x+0x96>
    2388:	b3 cf       	rjmp	.-154    	; 0x22f0 <__addsf3+0x1e>
    238a:	93 95       	inc	r25
    238c:	88 0f       	add	r24, r24
    238e:	08 f0       	brcs	.+2      	; 0x2392 <__addsf3x+0x9e>
    2390:	99 27       	eor	r25, r25
    2392:	ee 0f       	add	r30, r30
    2394:	97 95       	ror	r25
    2396:	87 95       	ror	r24
    2398:	08 95       	ret

0000239a <__fixsfsi>:
    239a:	04 d0       	rcall	.+8      	; 0x23a4 <__fixunssfsi>
    239c:	68 94       	set
    239e:	b1 11       	cpse	r27, r1
    23a0:	b5 c0       	rjmp	.+362    	; 0x250c <__fp_szero>
    23a2:	08 95       	ret

000023a4 <__fixunssfsi>:
    23a4:	98 d0       	rcall	.+304    	; 0x24d6 <__fp_splitA>
    23a6:	88 f0       	brcs	.+34     	; 0x23ca <__fixunssfsi+0x26>
    23a8:	9f 57       	subi	r25, 0x7F	; 127
    23aa:	90 f0       	brcs	.+36     	; 0x23d0 <__fixunssfsi+0x2c>
    23ac:	b9 2f       	mov	r27, r25
    23ae:	99 27       	eor	r25, r25
    23b0:	b7 51       	subi	r27, 0x17	; 23
    23b2:	a0 f0       	brcs	.+40     	; 0x23dc <__fixunssfsi+0x38>
    23b4:	d1 f0       	breq	.+52     	; 0x23ea <__fixunssfsi+0x46>
    23b6:	66 0f       	add	r22, r22
    23b8:	77 1f       	adc	r23, r23
    23ba:	88 1f       	adc	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	1a f0       	brmi	.+6      	; 0x23c6 <__fixunssfsi+0x22>
    23c0:	ba 95       	dec	r27
    23c2:	c9 f7       	brne	.-14     	; 0x23b6 <__fixunssfsi+0x12>
    23c4:	12 c0       	rjmp	.+36     	; 0x23ea <__fixunssfsi+0x46>
    23c6:	b1 30       	cpi	r27, 0x01	; 1
    23c8:	81 f0       	breq	.+32     	; 0x23ea <__fixunssfsi+0x46>
    23ca:	9f d0       	rcall	.+318    	; 0x250a <__fp_zero>
    23cc:	b1 e0       	ldi	r27, 0x01	; 1
    23ce:	08 95       	ret
    23d0:	9c c0       	rjmp	.+312    	; 0x250a <__fp_zero>
    23d2:	67 2f       	mov	r22, r23
    23d4:	78 2f       	mov	r23, r24
    23d6:	88 27       	eor	r24, r24
    23d8:	b8 5f       	subi	r27, 0xF8	; 248
    23da:	39 f0       	breq	.+14     	; 0x23ea <__fixunssfsi+0x46>
    23dc:	b9 3f       	cpi	r27, 0xF9	; 249
    23de:	cc f3       	brlt	.-14     	; 0x23d2 <__fixunssfsi+0x2e>
    23e0:	86 95       	lsr	r24
    23e2:	77 95       	ror	r23
    23e4:	67 95       	ror	r22
    23e6:	b3 95       	inc	r27
    23e8:	d9 f7       	brne	.-10     	; 0x23e0 <__fixunssfsi+0x3c>
    23ea:	3e f4       	brtc	.+14     	; 0x23fa <__fixunssfsi+0x56>
    23ec:	90 95       	com	r25
    23ee:	80 95       	com	r24
    23f0:	70 95       	com	r23
    23f2:	61 95       	neg	r22
    23f4:	7f 4f       	sbci	r23, 0xFF	; 255
    23f6:	8f 4f       	sbci	r24, 0xFF	; 255
    23f8:	9f 4f       	sbci	r25, 0xFF	; 255
    23fa:	08 95       	ret

000023fc <__floatunsisf>:
    23fc:	e8 94       	clt
    23fe:	09 c0       	rjmp	.+18     	; 0x2412 <__floatsisf+0x12>

00002400 <__floatsisf>:
    2400:	97 fb       	bst	r25, 7
    2402:	3e f4       	brtc	.+14     	; 0x2412 <__floatsisf+0x12>
    2404:	90 95       	com	r25
    2406:	80 95       	com	r24
    2408:	70 95       	com	r23
    240a:	61 95       	neg	r22
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	8f 4f       	sbci	r24, 0xFF	; 255
    2410:	9f 4f       	sbci	r25, 0xFF	; 255
    2412:	99 23       	and	r25, r25
    2414:	a9 f0       	breq	.+42     	; 0x2440 <__floatsisf+0x40>
    2416:	f9 2f       	mov	r31, r25
    2418:	96 e9       	ldi	r25, 0x96	; 150
    241a:	bb 27       	eor	r27, r27
    241c:	93 95       	inc	r25
    241e:	f6 95       	lsr	r31
    2420:	87 95       	ror	r24
    2422:	77 95       	ror	r23
    2424:	67 95       	ror	r22
    2426:	b7 95       	ror	r27
    2428:	f1 11       	cpse	r31, r1
    242a:	f8 cf       	rjmp	.-16     	; 0x241c <__floatsisf+0x1c>
    242c:	fa f4       	brpl	.+62     	; 0x246c <__floatsisf+0x6c>
    242e:	bb 0f       	add	r27, r27
    2430:	11 f4       	brne	.+4      	; 0x2436 <__floatsisf+0x36>
    2432:	60 ff       	sbrs	r22, 0
    2434:	1b c0       	rjmp	.+54     	; 0x246c <__floatsisf+0x6c>
    2436:	6f 5f       	subi	r22, 0xFF	; 255
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	8f 4f       	sbci	r24, 0xFF	; 255
    243c:	9f 4f       	sbci	r25, 0xFF	; 255
    243e:	16 c0       	rjmp	.+44     	; 0x246c <__floatsisf+0x6c>
    2440:	88 23       	and	r24, r24
    2442:	11 f0       	breq	.+4      	; 0x2448 <__floatsisf+0x48>
    2444:	96 e9       	ldi	r25, 0x96	; 150
    2446:	11 c0       	rjmp	.+34     	; 0x246a <__floatsisf+0x6a>
    2448:	77 23       	and	r23, r23
    244a:	21 f0       	breq	.+8      	; 0x2454 <__floatsisf+0x54>
    244c:	9e e8       	ldi	r25, 0x8E	; 142
    244e:	87 2f       	mov	r24, r23
    2450:	76 2f       	mov	r23, r22
    2452:	05 c0       	rjmp	.+10     	; 0x245e <__floatsisf+0x5e>
    2454:	66 23       	and	r22, r22
    2456:	71 f0       	breq	.+28     	; 0x2474 <__floatsisf+0x74>
    2458:	96 e8       	ldi	r25, 0x86	; 134
    245a:	86 2f       	mov	r24, r22
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	2a f0       	brmi	.+10     	; 0x246c <__floatsisf+0x6c>
    2462:	9a 95       	dec	r25
    2464:	66 0f       	add	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	88 1f       	adc	r24, r24
    246a:	da f7       	brpl	.-10     	; 0x2462 <__floatsisf+0x62>
    246c:	88 0f       	add	r24, r24
    246e:	96 95       	lsr	r25
    2470:	87 95       	ror	r24
    2472:	97 f9       	bld	r25, 7
    2474:	08 95       	ret

00002476 <__fp_inf>:
    2476:	97 f9       	bld	r25, 7
    2478:	9f 67       	ori	r25, 0x7F	; 127
    247a:	80 e8       	ldi	r24, 0x80	; 128
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	08 95       	ret

00002482 <__fp_nan>:
    2482:	9f ef       	ldi	r25, 0xFF	; 255
    2484:	80 ec       	ldi	r24, 0xC0	; 192
    2486:	08 95       	ret

00002488 <__fp_pscA>:
    2488:	00 24       	eor	r0, r0
    248a:	0a 94       	dec	r0
    248c:	16 16       	cp	r1, r22
    248e:	17 06       	cpc	r1, r23
    2490:	18 06       	cpc	r1, r24
    2492:	09 06       	cpc	r0, r25
    2494:	08 95       	ret

00002496 <__fp_pscB>:
    2496:	00 24       	eor	r0, r0
    2498:	0a 94       	dec	r0
    249a:	12 16       	cp	r1, r18
    249c:	13 06       	cpc	r1, r19
    249e:	14 06       	cpc	r1, r20
    24a0:	05 06       	cpc	r0, r21
    24a2:	08 95       	ret

000024a4 <__fp_round>:
    24a4:	09 2e       	mov	r0, r25
    24a6:	03 94       	inc	r0
    24a8:	00 0c       	add	r0, r0
    24aa:	11 f4       	brne	.+4      	; 0x24b0 <__fp_round+0xc>
    24ac:	88 23       	and	r24, r24
    24ae:	52 f0       	brmi	.+20     	; 0x24c4 <__fp_round+0x20>
    24b0:	bb 0f       	add	r27, r27
    24b2:	40 f4       	brcc	.+16     	; 0x24c4 <__fp_round+0x20>
    24b4:	bf 2b       	or	r27, r31
    24b6:	11 f4       	brne	.+4      	; 0x24bc <__fp_round+0x18>
    24b8:	60 ff       	sbrs	r22, 0
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <__fp_round+0x20>
    24bc:	6f 5f       	subi	r22, 0xFF	; 255
    24be:	7f 4f       	sbci	r23, 0xFF	; 255
    24c0:	8f 4f       	sbci	r24, 0xFF	; 255
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	08 95       	ret

000024c6 <__fp_split3>:
    24c6:	57 fd       	sbrc	r21, 7
    24c8:	90 58       	subi	r25, 0x80	; 128
    24ca:	44 0f       	add	r20, r20
    24cc:	55 1f       	adc	r21, r21
    24ce:	59 f0       	breq	.+22     	; 0x24e6 <__fp_splitA+0x10>
    24d0:	5f 3f       	cpi	r21, 0xFF	; 255
    24d2:	71 f0       	breq	.+28     	; 0x24f0 <__fp_splitA+0x1a>
    24d4:	47 95       	ror	r20

000024d6 <__fp_splitA>:
    24d6:	88 0f       	add	r24, r24
    24d8:	97 fb       	bst	r25, 7
    24da:	99 1f       	adc	r25, r25
    24dc:	61 f0       	breq	.+24     	; 0x24f6 <__fp_splitA+0x20>
    24de:	9f 3f       	cpi	r25, 0xFF	; 255
    24e0:	79 f0       	breq	.+30     	; 0x2500 <__fp_splitA+0x2a>
    24e2:	87 95       	ror	r24
    24e4:	08 95       	ret
    24e6:	12 16       	cp	r1, r18
    24e8:	13 06       	cpc	r1, r19
    24ea:	14 06       	cpc	r1, r20
    24ec:	55 1f       	adc	r21, r21
    24ee:	f2 cf       	rjmp	.-28     	; 0x24d4 <__fp_split3+0xe>
    24f0:	46 95       	lsr	r20
    24f2:	f1 df       	rcall	.-30     	; 0x24d6 <__fp_splitA>
    24f4:	08 c0       	rjmp	.+16     	; 0x2506 <__fp_splitA+0x30>
    24f6:	16 16       	cp	r1, r22
    24f8:	17 06       	cpc	r1, r23
    24fa:	18 06       	cpc	r1, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	f1 cf       	rjmp	.-30     	; 0x24e2 <__fp_splitA+0xc>
    2500:	86 95       	lsr	r24
    2502:	71 05       	cpc	r23, r1
    2504:	61 05       	cpc	r22, r1
    2506:	08 94       	sec
    2508:	08 95       	ret

0000250a <__fp_zero>:
    250a:	e8 94       	clt

0000250c <__fp_szero>:
    250c:	bb 27       	eor	r27, r27
    250e:	66 27       	eor	r22, r22
    2510:	77 27       	eor	r23, r23
    2512:	cb 01       	movw	r24, r22
    2514:	97 f9       	bld	r25, 7
    2516:	08 95       	ret

00002518 <__mulsf3>:
    2518:	0b d0       	rcall	.+22     	; 0x2530 <__mulsf3x>
    251a:	c4 cf       	rjmp	.-120    	; 0x24a4 <__fp_round>
    251c:	b5 df       	rcall	.-150    	; 0x2488 <__fp_pscA>
    251e:	28 f0       	brcs	.+10     	; 0x252a <__mulsf3+0x12>
    2520:	ba df       	rcall	.-140    	; 0x2496 <__fp_pscB>
    2522:	18 f0       	brcs	.+6      	; 0x252a <__mulsf3+0x12>
    2524:	95 23       	and	r25, r21
    2526:	09 f0       	breq	.+2      	; 0x252a <__mulsf3+0x12>
    2528:	a6 cf       	rjmp	.-180    	; 0x2476 <__fp_inf>
    252a:	ab cf       	rjmp	.-170    	; 0x2482 <__fp_nan>
    252c:	11 24       	eor	r1, r1
    252e:	ee cf       	rjmp	.-36     	; 0x250c <__fp_szero>

00002530 <__mulsf3x>:
    2530:	ca df       	rcall	.-108    	; 0x24c6 <__fp_split3>
    2532:	a0 f3       	brcs	.-24     	; 0x251c <__mulsf3+0x4>

00002534 <__mulsf3_pse>:
    2534:	95 9f       	mul	r25, r21
    2536:	d1 f3       	breq	.-12     	; 0x252c <__mulsf3+0x14>
    2538:	95 0f       	add	r25, r21
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	55 1f       	adc	r21, r21
    253e:	62 9f       	mul	r22, r18
    2540:	f0 01       	movw	r30, r0
    2542:	72 9f       	mul	r23, r18
    2544:	bb 27       	eor	r27, r27
    2546:	f0 0d       	add	r31, r0
    2548:	b1 1d       	adc	r27, r1
    254a:	63 9f       	mul	r22, r19
    254c:	aa 27       	eor	r26, r26
    254e:	f0 0d       	add	r31, r0
    2550:	b1 1d       	adc	r27, r1
    2552:	aa 1f       	adc	r26, r26
    2554:	64 9f       	mul	r22, r20
    2556:	66 27       	eor	r22, r22
    2558:	b0 0d       	add	r27, r0
    255a:	a1 1d       	adc	r26, r1
    255c:	66 1f       	adc	r22, r22
    255e:	82 9f       	mul	r24, r18
    2560:	22 27       	eor	r18, r18
    2562:	b0 0d       	add	r27, r0
    2564:	a1 1d       	adc	r26, r1
    2566:	62 1f       	adc	r22, r18
    2568:	73 9f       	mul	r23, r19
    256a:	b0 0d       	add	r27, r0
    256c:	a1 1d       	adc	r26, r1
    256e:	62 1f       	adc	r22, r18
    2570:	83 9f       	mul	r24, r19
    2572:	a0 0d       	add	r26, r0
    2574:	61 1d       	adc	r22, r1
    2576:	22 1f       	adc	r18, r18
    2578:	74 9f       	mul	r23, r20
    257a:	33 27       	eor	r19, r19
    257c:	a0 0d       	add	r26, r0
    257e:	61 1d       	adc	r22, r1
    2580:	23 1f       	adc	r18, r19
    2582:	84 9f       	mul	r24, r20
    2584:	60 0d       	add	r22, r0
    2586:	21 1d       	adc	r18, r1
    2588:	82 2f       	mov	r24, r18
    258a:	76 2f       	mov	r23, r22
    258c:	6a 2f       	mov	r22, r26
    258e:	11 24       	eor	r1, r1
    2590:	9f 57       	subi	r25, 0x7F	; 127
    2592:	50 40       	sbci	r21, 0x00	; 0
    2594:	8a f0       	brmi	.+34     	; 0x25b8 <__mulsf3_pse+0x84>
    2596:	e1 f0       	breq	.+56     	; 0x25d0 <__mulsf3_pse+0x9c>
    2598:	88 23       	and	r24, r24
    259a:	4a f0       	brmi	.+18     	; 0x25ae <__mulsf3_pse+0x7a>
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	bb 1f       	adc	r27, r27
    25a2:	66 1f       	adc	r22, r22
    25a4:	77 1f       	adc	r23, r23
    25a6:	88 1f       	adc	r24, r24
    25a8:	91 50       	subi	r25, 0x01	; 1
    25aa:	50 40       	sbci	r21, 0x00	; 0
    25ac:	a9 f7       	brne	.-22     	; 0x2598 <__mulsf3_pse+0x64>
    25ae:	9e 3f       	cpi	r25, 0xFE	; 254
    25b0:	51 05       	cpc	r21, r1
    25b2:	70 f0       	brcs	.+28     	; 0x25d0 <__mulsf3_pse+0x9c>
    25b4:	60 cf       	rjmp	.-320    	; 0x2476 <__fp_inf>
    25b6:	aa cf       	rjmp	.-172    	; 0x250c <__fp_szero>
    25b8:	5f 3f       	cpi	r21, 0xFF	; 255
    25ba:	ec f3       	brlt	.-6      	; 0x25b6 <__mulsf3_pse+0x82>
    25bc:	98 3e       	cpi	r25, 0xE8	; 232
    25be:	dc f3       	brlt	.-10     	; 0x25b6 <__mulsf3_pse+0x82>
    25c0:	86 95       	lsr	r24
    25c2:	77 95       	ror	r23
    25c4:	67 95       	ror	r22
    25c6:	b7 95       	ror	r27
    25c8:	f7 95       	ror	r31
    25ca:	e7 95       	ror	r30
    25cc:	9f 5f       	subi	r25, 0xFF	; 255
    25ce:	c1 f7       	brne	.-16     	; 0x25c0 <__mulsf3_pse+0x8c>
    25d0:	fe 2b       	or	r31, r30
    25d2:	88 0f       	add	r24, r24
    25d4:	91 1d       	adc	r25, r1
    25d6:	96 95       	lsr	r25
    25d8:	87 95       	ror	r24
    25da:	97 f9       	bld	r25, 7
    25dc:	08 95       	ret

000025de <__udivmodsi4>:
    25de:	a1 e2       	ldi	r26, 0x21	; 33
    25e0:	1a 2e       	mov	r1, r26
    25e2:	aa 1b       	sub	r26, r26
    25e4:	bb 1b       	sub	r27, r27
    25e6:	fd 01       	movw	r30, r26
    25e8:	0d c0       	rjmp	.+26     	; 0x2604 <__udivmodsi4_ep>

000025ea <__udivmodsi4_loop>:
    25ea:	aa 1f       	adc	r26, r26
    25ec:	bb 1f       	adc	r27, r27
    25ee:	ee 1f       	adc	r30, r30
    25f0:	ff 1f       	adc	r31, r31
    25f2:	a2 17       	cp	r26, r18
    25f4:	b3 07       	cpc	r27, r19
    25f6:	e4 07       	cpc	r30, r20
    25f8:	f5 07       	cpc	r31, r21
    25fa:	20 f0       	brcs	.+8      	; 0x2604 <__udivmodsi4_ep>
    25fc:	a2 1b       	sub	r26, r18
    25fe:	b3 0b       	sbc	r27, r19
    2600:	e4 0b       	sbc	r30, r20
    2602:	f5 0b       	sbc	r31, r21

00002604 <__udivmodsi4_ep>:
    2604:	66 1f       	adc	r22, r22
    2606:	77 1f       	adc	r23, r23
    2608:	88 1f       	adc	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	1a 94       	dec	r1
    260e:	69 f7       	brne	.-38     	; 0x25ea <__udivmodsi4_loop>
    2610:	60 95       	com	r22
    2612:	70 95       	com	r23
    2614:	80 95       	com	r24
    2616:	90 95       	com	r25
    2618:	9b 01       	movw	r18, r22
    261a:	ac 01       	movw	r20, r24
    261c:	bd 01       	movw	r22, r26
    261e:	cf 01       	movw	r24, r30
    2620:	08 95       	ret

00002622 <__tablejump2__>:
    2622:	ee 0f       	add	r30, r30
    2624:	ff 1f       	adc	r31, r31
    2626:	88 1f       	adc	r24, r24
    2628:	8b bf       	out	0x3b, r24	; 59
    262a:	07 90       	elpm	r0, Z+
    262c:	f6 91       	elpm	r31, Z
    262e:	e0 2d       	mov	r30, r0
    2630:	19 94       	eijmp

00002632 <__umulhisi3>:
    2632:	a2 9f       	mul	r26, r18
    2634:	b0 01       	movw	r22, r0
    2636:	b3 9f       	mul	r27, r19
    2638:	c0 01       	movw	r24, r0
    263a:	a3 9f       	mul	r26, r19
    263c:	70 0d       	add	r23, r0
    263e:	81 1d       	adc	r24, r1
    2640:	11 24       	eor	r1, r1
    2642:	91 1d       	adc	r25, r1
    2644:	b2 9f       	mul	r27, r18
    2646:	70 0d       	add	r23, r0
    2648:	81 1d       	adc	r24, r1
    264a:	11 24       	eor	r1, r1
    264c:	91 1d       	adc	r25, r1
    264e:	08 95       	ret

00002650 <__muluhisi3>:
    2650:	f0 df       	rcall	.-32     	; 0x2632 <__umulhisi3>
    2652:	a5 9f       	mul	r26, r21
    2654:	90 0d       	add	r25, r0
    2656:	b4 9f       	mul	r27, r20
    2658:	90 0d       	add	r25, r0
    265a:	a4 9f       	mul	r26, r20
    265c:	80 0d       	add	r24, r0
    265e:	91 1d       	adc	r25, r1
    2660:	11 24       	eor	r1, r1
    2662:	08 95       	ret

00002664 <malloc>:
    2664:	0f 93       	push	r16
    2666:	1f 93       	push	r17
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	82 30       	cpi	r24, 0x02	; 2
    266e:	91 05       	cpc	r25, r1
    2670:	10 f4       	brcc	.+4      	; 0x2676 <malloc+0x12>
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <__flp>
    267a:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <__flp+0x1>
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	a0 e0       	ldi	r26, 0x00	; 0
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	30 97       	sbiw	r30, 0x00	; 0
    2688:	19 f1       	breq	.+70     	; 0x26d0 <malloc+0x6c>
    268a:	40 81       	ld	r20, Z
    268c:	51 81       	ldd	r21, Z+1	; 0x01
    268e:	02 81       	ldd	r16, Z+2	; 0x02
    2690:	13 81       	ldd	r17, Z+3	; 0x03
    2692:	48 17       	cp	r20, r24
    2694:	59 07       	cpc	r21, r25
    2696:	c8 f0       	brcs	.+50     	; 0x26ca <malloc+0x66>
    2698:	84 17       	cp	r24, r20
    269a:	95 07       	cpc	r25, r21
    269c:	69 f4       	brne	.+26     	; 0x26b8 <malloc+0x54>
    269e:	10 97       	sbiw	r26, 0x00	; 0
    26a0:	31 f0       	breq	.+12     	; 0x26ae <malloc+0x4a>
    26a2:	12 96       	adiw	r26, 0x02	; 2
    26a4:	0c 93       	st	X, r16
    26a6:	12 97       	sbiw	r26, 0x02	; 2
    26a8:	13 96       	adiw	r26, 0x03	; 3
    26aa:	1c 93       	st	X, r17
    26ac:	27 c0       	rjmp	.+78     	; 0x26fc <malloc+0x98>
    26ae:	00 93 d1 04 	sts	0x04D1, r16	; 0x8004d1 <__flp>
    26b2:	10 93 d2 04 	sts	0x04D2, r17	; 0x8004d2 <__flp+0x1>
    26b6:	22 c0       	rjmp	.+68     	; 0x26fc <malloc+0x98>
    26b8:	21 15       	cp	r18, r1
    26ba:	31 05       	cpc	r19, r1
    26bc:	19 f0       	breq	.+6      	; 0x26c4 <malloc+0x60>
    26be:	42 17       	cp	r20, r18
    26c0:	53 07       	cpc	r21, r19
    26c2:	18 f4       	brcc	.+6      	; 0x26ca <malloc+0x66>
    26c4:	9a 01       	movw	r18, r20
    26c6:	bd 01       	movw	r22, r26
    26c8:	ef 01       	movw	r28, r30
    26ca:	df 01       	movw	r26, r30
    26cc:	f8 01       	movw	r30, r16
    26ce:	db cf       	rjmp	.-74     	; 0x2686 <malloc+0x22>
    26d0:	21 15       	cp	r18, r1
    26d2:	31 05       	cpc	r19, r1
    26d4:	f9 f0       	breq	.+62     	; 0x2714 <malloc+0xb0>
    26d6:	28 1b       	sub	r18, r24
    26d8:	39 0b       	sbc	r19, r25
    26da:	24 30       	cpi	r18, 0x04	; 4
    26dc:	31 05       	cpc	r19, r1
    26de:	80 f4       	brcc	.+32     	; 0x2700 <malloc+0x9c>
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	9b 81       	ldd	r25, Y+3	; 0x03
    26e4:	61 15       	cp	r22, r1
    26e6:	71 05       	cpc	r23, r1
    26e8:	21 f0       	breq	.+8      	; 0x26f2 <malloc+0x8e>
    26ea:	fb 01       	movw	r30, r22
    26ec:	93 83       	std	Z+3, r25	; 0x03
    26ee:	82 83       	std	Z+2, r24	; 0x02
    26f0:	04 c0       	rjmp	.+8      	; 0x26fa <malloc+0x96>
    26f2:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <__flp+0x1>
    26f6:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <__flp>
    26fa:	fe 01       	movw	r30, r28
    26fc:	32 96       	adiw	r30, 0x02	; 2
    26fe:	44 c0       	rjmp	.+136    	; 0x2788 <malloc+0x124>
    2700:	fe 01       	movw	r30, r28
    2702:	e2 0f       	add	r30, r18
    2704:	f3 1f       	adc	r31, r19
    2706:	81 93       	st	Z+, r24
    2708:	91 93       	st	Z+, r25
    270a:	22 50       	subi	r18, 0x02	; 2
    270c:	31 09       	sbc	r19, r1
    270e:	39 83       	std	Y+1, r19	; 0x01
    2710:	28 83       	st	Y, r18
    2712:	3a c0       	rjmp	.+116    	; 0x2788 <malloc+0x124>
    2714:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <__brkval>
    2718:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <__brkval+0x1>
    271c:	23 2b       	or	r18, r19
    271e:	41 f4       	brne	.+16     	; 0x2730 <malloc+0xcc>
    2720:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2724:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2728:	30 93 d0 04 	sts	0x04D0, r19	; 0x8004d0 <__brkval+0x1>
    272c:	20 93 cf 04 	sts	0x04CF, r18	; 0x8004cf <__brkval>
    2730:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2734:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2738:	21 15       	cp	r18, r1
    273a:	31 05       	cpc	r19, r1
    273c:	41 f4       	brne	.+16     	; 0x274e <malloc+0xea>
    273e:	2d b7       	in	r18, 0x3d	; 61
    2740:	3e b7       	in	r19, 0x3e	; 62
    2742:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2746:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    274a:	24 1b       	sub	r18, r20
    274c:	35 0b       	sbc	r19, r21
    274e:	e0 91 cf 04 	lds	r30, 0x04CF	; 0x8004cf <__brkval>
    2752:	f0 91 d0 04 	lds	r31, 0x04D0	; 0x8004d0 <__brkval+0x1>
    2756:	e2 17       	cp	r30, r18
    2758:	f3 07       	cpc	r31, r19
    275a:	a0 f4       	brcc	.+40     	; 0x2784 <malloc+0x120>
    275c:	2e 1b       	sub	r18, r30
    275e:	3f 0b       	sbc	r19, r31
    2760:	28 17       	cp	r18, r24
    2762:	39 07       	cpc	r19, r25
    2764:	78 f0       	brcs	.+30     	; 0x2784 <malloc+0x120>
    2766:	ac 01       	movw	r20, r24
    2768:	4e 5f       	subi	r20, 0xFE	; 254
    276a:	5f 4f       	sbci	r21, 0xFF	; 255
    276c:	24 17       	cp	r18, r20
    276e:	35 07       	cpc	r19, r21
    2770:	48 f0       	brcs	.+18     	; 0x2784 <malloc+0x120>
    2772:	4e 0f       	add	r20, r30
    2774:	5f 1f       	adc	r21, r31
    2776:	50 93 d0 04 	sts	0x04D0, r21	; 0x8004d0 <__brkval+0x1>
    277a:	40 93 cf 04 	sts	0x04CF, r20	; 0x8004cf <__brkval>
    277e:	81 93       	st	Z+, r24
    2780:	91 93       	st	Z+, r25
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <malloc+0x124>
    2784:	e0 e0       	ldi	r30, 0x00	; 0
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	cf 01       	movw	r24, r30
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	08 95       	ret

00002794 <free>:
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	09 f4       	brne	.+2      	; 0x279e <free+0xa>
    279c:	81 c0       	rjmp	.+258    	; 0x28a0 <free+0x10c>
    279e:	fc 01       	movw	r30, r24
    27a0:	32 97       	sbiw	r30, 0x02	; 2
    27a2:	13 82       	std	Z+3, r1	; 0x03
    27a4:	12 82       	std	Z+2, r1	; 0x02
    27a6:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <__flp>
    27aa:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <__flp+0x1>
    27ae:	10 97       	sbiw	r26, 0x00	; 0
    27b0:	81 f4       	brne	.+32     	; 0x27d2 <free+0x3e>
    27b2:	20 81       	ld	r18, Z
    27b4:	31 81       	ldd	r19, Z+1	; 0x01
    27b6:	82 0f       	add	r24, r18
    27b8:	93 1f       	adc	r25, r19
    27ba:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <__brkval>
    27be:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <__brkval+0x1>
    27c2:	28 17       	cp	r18, r24
    27c4:	39 07       	cpc	r19, r25
    27c6:	51 f5       	brne	.+84     	; 0x281c <free+0x88>
    27c8:	f0 93 d0 04 	sts	0x04D0, r31	; 0x8004d0 <__brkval+0x1>
    27cc:	e0 93 cf 04 	sts	0x04CF, r30	; 0x8004cf <__brkval>
    27d0:	67 c0       	rjmp	.+206    	; 0x28a0 <free+0x10c>
    27d2:	ed 01       	movw	r28, r26
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	ce 17       	cp	r28, r30
    27da:	df 07       	cpc	r29, r31
    27dc:	40 f4       	brcc	.+16     	; 0x27ee <free+0x5a>
    27de:	4a 81       	ldd	r20, Y+2	; 0x02
    27e0:	5b 81       	ldd	r21, Y+3	; 0x03
    27e2:	9e 01       	movw	r18, r28
    27e4:	41 15       	cp	r20, r1
    27e6:	51 05       	cpc	r21, r1
    27e8:	f1 f0       	breq	.+60     	; 0x2826 <free+0x92>
    27ea:	ea 01       	movw	r28, r20
    27ec:	f5 cf       	rjmp	.-22     	; 0x27d8 <free+0x44>
    27ee:	d3 83       	std	Z+3, r29	; 0x03
    27f0:	c2 83       	std	Z+2, r28	; 0x02
    27f2:	40 81       	ld	r20, Z
    27f4:	51 81       	ldd	r21, Z+1	; 0x01
    27f6:	84 0f       	add	r24, r20
    27f8:	95 1f       	adc	r25, r21
    27fa:	c8 17       	cp	r28, r24
    27fc:	d9 07       	cpc	r29, r25
    27fe:	59 f4       	brne	.+22     	; 0x2816 <free+0x82>
    2800:	88 81       	ld	r24, Y
    2802:	99 81       	ldd	r25, Y+1	; 0x01
    2804:	84 0f       	add	r24, r20
    2806:	95 1f       	adc	r25, r21
    2808:	02 96       	adiw	r24, 0x02	; 2
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	9b 81       	ldd	r25, Y+3	; 0x03
    2812:	93 83       	std	Z+3, r25	; 0x03
    2814:	82 83       	std	Z+2, r24	; 0x02
    2816:	21 15       	cp	r18, r1
    2818:	31 05       	cpc	r19, r1
    281a:	29 f4       	brne	.+10     	; 0x2826 <free+0x92>
    281c:	f0 93 d2 04 	sts	0x04D2, r31	; 0x8004d2 <__flp+0x1>
    2820:	e0 93 d1 04 	sts	0x04D1, r30	; 0x8004d1 <__flp>
    2824:	3d c0       	rjmp	.+122    	; 0x28a0 <free+0x10c>
    2826:	e9 01       	movw	r28, r18
    2828:	fb 83       	std	Y+3, r31	; 0x03
    282a:	ea 83       	std	Y+2, r30	; 0x02
    282c:	49 91       	ld	r20, Y+
    282e:	59 91       	ld	r21, Y+
    2830:	c4 0f       	add	r28, r20
    2832:	d5 1f       	adc	r29, r21
    2834:	ec 17       	cp	r30, r28
    2836:	fd 07       	cpc	r31, r29
    2838:	61 f4       	brne	.+24     	; 0x2852 <free+0xbe>
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	84 0f       	add	r24, r20
    2840:	95 1f       	adc	r25, r21
    2842:	02 96       	adiw	r24, 0x02	; 2
    2844:	e9 01       	movw	r28, r18
    2846:	99 83       	std	Y+1, r25	; 0x01
    2848:	88 83       	st	Y, r24
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	9b 83       	std	Y+3, r25	; 0x03
    2850:	8a 83       	std	Y+2, r24	; 0x02
    2852:	e0 e0       	ldi	r30, 0x00	; 0
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	12 96       	adiw	r26, 0x02	; 2
    2858:	8d 91       	ld	r24, X+
    285a:	9c 91       	ld	r25, X
    285c:	13 97       	sbiw	r26, 0x03	; 3
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	19 f0       	breq	.+6      	; 0x2868 <free+0xd4>
    2862:	fd 01       	movw	r30, r26
    2864:	dc 01       	movw	r26, r24
    2866:	f7 cf       	rjmp	.-18     	; 0x2856 <free+0xc2>
    2868:	8d 91       	ld	r24, X+
    286a:	9c 91       	ld	r25, X
    286c:	11 97       	sbiw	r26, 0x01	; 1
    286e:	9d 01       	movw	r18, r26
    2870:	2e 5f       	subi	r18, 0xFE	; 254
    2872:	3f 4f       	sbci	r19, 0xFF	; 255
    2874:	82 0f       	add	r24, r18
    2876:	93 1f       	adc	r25, r19
    2878:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <__brkval>
    287c:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <__brkval+0x1>
    2880:	28 17       	cp	r18, r24
    2882:	39 07       	cpc	r19, r25
    2884:	69 f4       	brne	.+26     	; 0x28a0 <free+0x10c>
    2886:	30 97       	sbiw	r30, 0x00	; 0
    2888:	29 f4       	brne	.+10     	; 0x2894 <free+0x100>
    288a:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <__flp+0x1>
    288e:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <__flp>
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <free+0x104>
    2894:	13 82       	std	Z+3, r1	; 0x03
    2896:	12 82       	std	Z+2, r1	; 0x02
    2898:	b0 93 d0 04 	sts	0x04D0, r27	; 0x8004d0 <__brkval+0x1>
    289c:	a0 93 cf 04 	sts	0x04CF, r26	; 0x8004cf <__brkval>
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	08 95       	ret

000028a6 <memcpy>:
    28a6:	fb 01       	movw	r30, r22
    28a8:	dc 01       	movw	r26, r24
    28aa:	02 c0       	rjmp	.+4      	; 0x28b0 <memcpy+0xa>
    28ac:	01 90       	ld	r0, Z+
    28ae:	0d 92       	st	X+, r0
    28b0:	41 50       	subi	r20, 0x01	; 1
    28b2:	50 40       	sbci	r21, 0x00	; 0
    28b4:	d8 f7       	brcc	.-10     	; 0x28ac <memcpy+0x6>
    28b6:	08 95       	ret

000028b8 <memset>:
    28b8:	dc 01       	movw	r26, r24
    28ba:	01 c0       	rjmp	.+2      	; 0x28be <memset+0x6>
    28bc:	6d 93       	st	X+, r22
    28be:	41 50       	subi	r20, 0x01	; 1
    28c0:	50 40       	sbci	r21, 0x00	; 0
    28c2:	e0 f7       	brcc	.-8      	; 0x28bc <memset+0x4>
    28c4:	08 95       	ret

000028c6 <__itoa_ncheck>:
    28c6:	bb 27       	eor	r27, r27
    28c8:	4a 30       	cpi	r20, 0x0A	; 10
    28ca:	31 f4       	brne	.+12     	; 0x28d8 <__itoa_ncheck+0x12>
    28cc:	99 23       	and	r25, r25
    28ce:	22 f4       	brpl	.+8      	; 0x28d8 <__itoa_ncheck+0x12>
    28d0:	bd e2       	ldi	r27, 0x2D	; 45
    28d2:	90 95       	com	r25
    28d4:	81 95       	neg	r24
    28d6:	9f 4f       	sbci	r25, 0xFF	; 255
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <__utoa_common>

000028da <__utoa_ncheck>:
    28da:	bb 27       	eor	r27, r27

000028dc <__utoa_common>:
    28dc:	fb 01       	movw	r30, r22
    28de:	55 27       	eor	r21, r21
    28e0:	aa 27       	eor	r26, r26
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	aa 1f       	adc	r26, r26
    28e8:	a4 17       	cp	r26, r20
    28ea:	10 f0       	brcs	.+4      	; 0x28f0 <__utoa_common+0x14>
    28ec:	a4 1b       	sub	r26, r20
    28ee:	83 95       	inc	r24
    28f0:	50 51       	subi	r21, 0x10	; 16
    28f2:	b9 f7       	brne	.-18     	; 0x28e2 <__utoa_common+0x6>
    28f4:	a0 5d       	subi	r26, 0xD0	; 208
    28f6:	aa 33       	cpi	r26, 0x3A	; 58
    28f8:	08 f0       	brcs	.+2      	; 0x28fc <__utoa_common+0x20>
    28fa:	a9 5d       	subi	r26, 0xD9	; 217
    28fc:	a1 93       	st	Z+, r26
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	79 f7       	brne	.-34     	; 0x28e0 <__utoa_common+0x4>
    2902:	b1 11       	cpse	r27, r1
    2904:	b1 93       	st	Z+, r27
    2906:	11 92       	st	Z+, r1
    2908:	cb 01       	movw	r24, r22
    290a:	00 c0       	rjmp	.+0      	; 0x290c <strrev>

0000290c <strrev>:
    290c:	dc 01       	movw	r26, r24
    290e:	fc 01       	movw	r30, r24
    2910:	67 2f       	mov	r22, r23
    2912:	71 91       	ld	r23, Z+
    2914:	77 23       	and	r23, r23
    2916:	e1 f7       	brne	.-8      	; 0x2910 <strrev+0x4>
    2918:	32 97       	sbiw	r30, 0x02	; 2
    291a:	04 c0       	rjmp	.+8      	; 0x2924 <strrev+0x18>
    291c:	7c 91       	ld	r23, X
    291e:	6d 93       	st	X+, r22
    2920:	70 83       	st	Z, r23
    2922:	62 91       	ld	r22, -Z
    2924:	ae 17       	cp	r26, r30
    2926:	bf 07       	cpc	r27, r31
    2928:	c8 f3       	brcs	.-14     	; 0x291c <strrev+0x10>
    292a:	08 95       	ret

0000292c <_exit>:
    292c:	f8 94       	cli

0000292e <__stop_program>:
    292e:	ff cf       	rjmp	.-2      	; 0x292e <__stop_program>
