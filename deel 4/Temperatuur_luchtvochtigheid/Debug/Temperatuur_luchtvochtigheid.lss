
Temperatuur_luchtvochtigheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800200  000029ae  00002a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000263  008002a0  008002a0  00002ae2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002ae2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e8  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007feb  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ed6  00000000  00000000  0000b127  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004b02  00000000  00000000  0000cffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001558  00000000  00000000  00011b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020ac  00000000  00000000  00013058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007736  00000000  00000000  00015104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c0  00000000  00000000  0001c83a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c1       	rjmp	.+728    	; 0x2da <__ctors_end>
       2:	00 00       	nop
       4:	8a c1       	rjmp	.+788    	; 0x31a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c1       	rjmp	.+784    	; 0x31a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c1       	rjmp	.+780    	; 0x31a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c1       	rjmp	.+776    	; 0x31a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c1       	rjmp	.+772    	; 0x31a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c1       	rjmp	.+768    	; 0x31a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c1       	rjmp	.+764    	; 0x31a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c1       	rjmp	.+760    	; 0x31a <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c4       	rjmp	.+2268   	; 0x902 <__vector_9>
      26:	00 00       	nop
      28:	78 c1       	rjmp	.+752    	; 0x31a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c1       	rjmp	.+748    	; 0x31a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c1       	rjmp	.+744    	; 0x31a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c1       	rjmp	.+740    	; 0x31a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c1       	rjmp	.+736    	; 0x31a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c1       	rjmp	.+732    	; 0x31a <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c1       	rjmp	.+728    	; 0x31a <__bad_interrupt>
      42:	00 00       	nop
      44:	2f c7       	rjmp	.+3678   	; 0xea4 <__vector_17>
      46:	00 00       	nop
      48:	68 c1       	rjmp	.+720    	; 0x31a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	66 c1       	rjmp	.+716    	; 0x31a <__bad_interrupt>
      4e:	00 00       	nop
      50:	64 c1       	rjmp	.+712    	; 0x31a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__vector_21>
      58:	60 c1       	rjmp	.+704    	; 0x31a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c1       	rjmp	.+700    	; 0x31a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c1       	rjmp	.+696    	; 0x31a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c1       	rjmp	.+692    	; 0x31a <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__vector_26>
      6c:	56 c1       	rjmp	.+684    	; 0x31a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c1       	rjmp	.+680    	; 0x31a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c1       	rjmp	.+676    	; 0x31a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c1       	rjmp	.+672    	; 0x31a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c1       	rjmp	.+668    	; 0x31a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c1       	rjmp	.+664    	; 0x31a <__bad_interrupt>
      82:	00 00       	nop
      84:	4a c1       	rjmp	.+660    	; 0x31a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c1       	rjmp	.+656    	; 0x31a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c4       	rjmp	.+2490   	; 0xa48 <__vector_35>
      8e:	00 00       	nop
      90:	68 c3       	rjmp	.+1744   	; 0x762 <__vector_36>
      92:	00 00       	nop
      94:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_37>
      98:	40 c1       	rjmp	.+640    	; 0x31a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ac c1       	rjmp	.+856    	; 0x3f6 <__vector_39>
      9e:	00 00       	nop
      a0:	3c c1       	rjmp	.+632    	; 0x31a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3a c1       	rjmp	.+628    	; 0x31a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	38 c1       	rjmp	.+624    	; 0x31a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	36 c1       	rjmp	.+620    	; 0x31a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	34 c1       	rjmp	.+616    	; 0x31a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	32 c1       	rjmp	.+612    	; 0x31a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	30 c1       	rjmp	.+608    	; 0x31a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2e c1       	rjmp	.+604    	; 0x31a <__bad_interrupt>
      be:	00 00       	nop
      c0:	2c c1       	rjmp	.+600    	; 0x31a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2a c1       	rjmp	.+596    	; 0x31a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	28 c1       	rjmp	.+592    	; 0x31a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__vector_51>
      d0:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__vector_52>
      d4:	22 c1       	rjmp	.+580    	; 0x31a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__vector_54>
      dc:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__vector_55>
      e0:	1c c1       	rjmp	.+568    	; 0x31a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1a 02       	muls	r17, r26
      e6:	d5 02       	muls	r29, r21
      e8:	d5 02       	muls	r29, r21
      ea:	d5 02       	muls	r29, r21
      ec:	d5 02       	muls	r29, r21
      ee:	d5 02       	muls	r29, r21
      f0:	d5 02       	muls	r29, r21
      f2:	d5 02       	muls	r29, r21
      f4:	1a 02       	muls	r17, r26
      f6:	d5 02       	muls	r29, r21
      f8:	d5 02       	muls	r29, r21
      fa:	d5 02       	muls	r29, r21
      fc:	d5 02       	muls	r29, r21
      fe:	d5 02       	muls	r29, r21
     100:	d5 02       	muls	r29, r21
     102:	d5 02       	muls	r29, r21
     104:	1c 02       	muls	r17, r28
     106:	d5 02       	muls	r29, r21
     108:	d5 02       	muls	r29, r21
     10a:	d5 02       	muls	r29, r21
     10c:	d5 02       	muls	r29, r21
     10e:	d5 02       	muls	r29, r21
     110:	d5 02       	muls	r29, r21
     112:	d5 02       	muls	r29, r21
     114:	39 02       	muls	r19, r25
     116:	d5 02       	muls	r29, r21
     118:	d5 02       	muls	r29, r21
     11a:	d5 02       	muls	r29, r21
     11c:	d5 02       	muls	r29, r21
     11e:	d5 02       	muls	r29, r21
     120:	d5 02       	muls	r29, r21
     122:	d5 02       	muls	r29, r21
     124:	1c 02       	muls	r17, r28
     126:	d5 02       	muls	r29, r21
     128:	d5 02       	muls	r29, r21
     12a:	d5 02       	muls	r29, r21
     12c:	d5 02       	muls	r29, r21
     12e:	d5 02       	muls	r29, r21
     130:	d5 02       	muls	r29, r21
     132:	d5 02       	muls	r29, r21
     134:	39 02       	muls	r19, r25
     136:	d5 02       	muls	r29, r21
     138:	d5 02       	muls	r29, r21
     13a:	d5 02       	muls	r29, r21
     13c:	d5 02       	muls	r29, r21
     13e:	d5 02       	muls	r29, r21
     140:	d5 02       	muls	r29, r21
     142:	d5 02       	muls	r29, r21
     144:	d1 02       	muls	r29, r17
     146:	d5 02       	muls	r29, r21
     148:	d5 02       	muls	r29, r21
     14a:	d5 02       	muls	r29, r21
     14c:	d5 02       	muls	r29, r21
     14e:	d5 02       	muls	r29, r21
     150:	d5 02       	muls	r29, r21
     152:	d5 02       	muls	r29, r21
     154:	4d 02       	muls	r20, r29
     156:	d5 02       	muls	r29, r21
     158:	d5 02       	muls	r29, r21
     15a:	d5 02       	muls	r29, r21
     15c:	d5 02       	muls	r29, r21
     15e:	d5 02       	muls	r29, r21
     160:	d5 02       	muls	r29, r21
     162:	d5 02       	muls	r29, r21
     164:	70 02       	muls	r23, r16
     166:	d5 02       	muls	r29, r21
     168:	d5 02       	muls	r29, r21
     16a:	d5 02       	muls	r29, r21
     16c:	d5 02       	muls	r29, r21
     16e:	d5 02       	muls	r29, r21
     170:	d5 02       	muls	r29, r21
     172:	d5 02       	muls	r29, r21
     174:	41 02       	muls	r20, r17
     176:	d5 02       	muls	r29, r21
     178:	d5 02       	muls	r29, r21
     17a:	d5 02       	muls	r29, r21
     17c:	d5 02       	muls	r29, r21
     17e:	d5 02       	muls	r29, r21
     180:	d5 02       	muls	r29, r21
     182:	d5 02       	muls	r29, r21
     184:	5f 02       	muls	r21, r31
     186:	d5 02       	muls	r29, r21
     188:	d5 02       	muls	r29, r21
     18a:	d5 02       	muls	r29, r21
     18c:	d5 02       	muls	r29, r21
     18e:	d5 02       	muls	r29, r21
     190:	d5 02       	muls	r29, r21
     192:	d5 02       	muls	r29, r21
     194:	a7 02       	muls	r26, r23
     196:	d5 02       	muls	r29, r21
     198:	d5 02       	muls	r29, r21
     19a:	d5 02       	muls	r29, r21
     19c:	d5 02       	muls	r29, r21
     19e:	d5 02       	muls	r29, r21
     1a0:	d5 02       	muls	r29, r21
     1a2:	d5 02       	muls	r29, r21
     1a4:	a7 02       	muls	r26, r23
     1a6:	d5 02       	muls	r29, r21
     1a8:	d5 02       	muls	r29, r21
     1aa:	d5 02       	muls	r29, r21
     1ac:	d5 02       	muls	r29, r21
     1ae:	d5 02       	muls	r29, r21
     1b0:	d5 02       	muls	r29, r21
     1b2:	d5 02       	muls	r29, r21
     1b4:	a2 02       	muls	r26, r18
     1b6:	d5 02       	muls	r29, r21
     1b8:	d5 02       	muls	r29, r21
     1ba:	d5 02       	muls	r29, r21
     1bc:	d5 02       	muls	r29, r21
     1be:	d5 02       	muls	r29, r21
     1c0:	d5 02       	muls	r29, r21
     1c2:	d5 02       	muls	r29, r21
     1c4:	a2 02       	muls	r26, r18
     1c6:	d5 02       	muls	r29, r21
     1c8:	d5 02       	muls	r29, r21
     1ca:	d5 02       	muls	r29, r21
     1cc:	d5 02       	muls	r29, r21
     1ce:	d5 02       	muls	r29, r21
     1d0:	d5 02       	muls	r29, r21
     1d2:	d5 02       	muls	r29, r21
     1d4:	b2 02       	muls	r27, r18
     1d6:	d5 02       	muls	r29, r21
     1d8:	d5 02       	muls	r29, r21
     1da:	d5 02       	muls	r29, r21
     1dc:	d5 02       	muls	r29, r21
     1de:	d5 02       	muls	r29, r21
     1e0:	d5 02       	muls	r29, r21
     1e2:	d5 02       	muls	r29, r21
     1e4:	c7 02       	muls	r28, r23
     1e6:	d5 02       	muls	r29, r21
     1e8:	d5 02       	muls	r29, r21
     1ea:	d5 02       	muls	r29, r21
     1ec:	d5 02       	muls	r29, r21
     1ee:	d5 02       	muls	r29, r21
     1f0:	d5 02       	muls	r29, r21
     1f2:	d5 02       	muls	r29, r21
     1f4:	b2 02       	muls	r27, r18
     1f6:	d5 02       	muls	r29, r21
     1f8:	d5 02       	muls	r29, r21
     1fa:	d5 02       	muls	r29, r21
     1fc:	d5 02       	muls	r29, r21
     1fe:	d5 02       	muls	r29, r21
     200:	d5 02       	muls	r29, r21
     202:	d5 02       	muls	r29, r21
     204:	c7 02       	muls	r28, r23
     206:	d5 02       	muls	r29, r21
     208:	d5 02       	muls	r29, r21
     20a:	d5 02       	muls	r29, r21
     20c:	d5 02       	muls	r29, r21
     20e:	d5 02       	muls	r29, r21
     210:	d5 02       	muls	r29, r21
     212:	d5 02       	muls	r29, r21
     214:	cb 02       	muls	r28, r27
     216:	d5 02       	muls	r29, r21
     218:	d5 02       	muls	r29, r21
     21a:	d5 02       	muls	r29, r21
     21c:	d5 02       	muls	r29, r21
     21e:	d5 02       	muls	r29, r21
     220:	d5 02       	muls	r29, r21
     222:	d5 02       	muls	r29, r21
     224:	78 02       	muls	r23, r24
     226:	d5 02       	muls	r29, r21
     228:	d5 02       	muls	r29, r21
     22a:	d5 02       	muls	r29, r21
     22c:	d5 02       	muls	r29, r21
     22e:	d5 02       	muls	r29, r21
     230:	d5 02       	muls	r29, r21
     232:	d5 02       	muls	r29, r21
     234:	78 02       	muls	r23, r24
     236:	d5 02       	muls	r29, r21
     238:	d5 02       	muls	r29, r21
     23a:	d5 02       	muls	r29, r21
     23c:	d5 02       	muls	r29, r21
     23e:	d5 02       	muls	r29, r21
     240:	d5 02       	muls	r29, r21
     242:	d5 02       	muls	r29, r21
     244:	7a 02       	muls	r23, r26
     246:	d5 02       	muls	r29, r21
     248:	d5 02       	muls	r29, r21
     24a:	d5 02       	muls	r29, r21
     24c:	d5 02       	muls	r29, r21
     24e:	d5 02       	muls	r29, r21
     250:	d5 02       	muls	r29, r21
     252:	d5 02       	muls	r29, r21
     254:	8a 02       	muls	r24, r26
     256:	d5 02       	muls	r29, r21
     258:	d5 02       	muls	r29, r21
     25a:	d5 02       	muls	r29, r21
     25c:	d5 02       	muls	r29, r21
     25e:	d5 02       	muls	r29, r21
     260:	d5 02       	muls	r29, r21
     262:	d5 02       	muls	r29, r21
     264:	9e 02       	muls	r25, r30

00000266 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     266:	0e ed       	ldi	r16, 0xDE	; 222
     268:	12 e0       	ldi	r17, 0x02	; 2
     26a:	0f 2e       	mov	r0, r31
     26c:	f6 e0       	ldi	r31, 0x06	; 6
     26e:	ef 2e       	mov	r14, r31
     270:	f3 e0       	ldi	r31, 0x03	; 3
     272:	ff 2e       	mov	r15, r31
     274:	f0 2d       	mov	r31, r0
     276:	26 c0       	rjmp	.+76     	; 0x2c4 <prvIdleTask+0x5e>
     278:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <vTaskSuspendAll>
     27c:	d8 01       	movw	r26, r16
     27e:	cc 91       	ld	r28, X
     280:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>
     284:	cc 23       	and	r28, r28
     286:	f1 f0       	breq	.+60     	; 0x2c4 <prvIdleTask+0x5e>
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	0f 92       	push	r0
     28e:	d8 01       	movw	r26, r16
     290:	15 96       	adiw	r26, 0x05	; 5
     292:	ed 91       	ld	r30, X+
     294:	fc 91       	ld	r31, X
     296:	16 97       	sbiw	r26, 0x06	; 6
     298:	c6 81       	ldd	r28, Z+6	; 0x06
     29a:	d7 81       	ldd	r29, Z+7	; 0x07
     29c:	ce 01       	movw	r24, r28
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	fe d1       	rcall	.+1020   	; 0x69e <uxListRemove>
     2a2:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <uxCurrentNumberOfTasks>
     2a6:	81 50       	subi	r24, 0x01	; 1
     2a8:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <uxCurrentNumberOfTasks>
     2ac:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <uxDeletedTasksWaitingCleanUp>
     2b0:	81 50       	subi	r24, 0x01	; 1
     2b2:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <uxDeletedTasksWaitingCleanUp>
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	8f 89       	ldd	r24, Y+23	; 0x17
     2bc:	98 8d       	ldd	r25, Y+24	; 0x18
     2be:	5c d0       	rcall	.+184    	; 0x378 <vPortFree>
     2c0:	ce 01       	movw	r24, r28
     2c2:	5a d0       	rcall	.+180    	; 0x378 <vPortFree>
     2c4:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <uxDeletedTasksWaitingCleanUp>
     2c8:	81 11       	cpse	r24, r1
     2ca:	d6 cf       	rjmp	.-84     	; 0x278 <prvIdleTask+0x12>
     2cc:	f7 01       	movw	r30, r14
     2ce:	80 81       	ld	r24, Z
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <prvIdleTask+0x70>
     2d4:	92 d7       	rcall	.+3876   	; 0x11fa <vPortYield>
     2d6:	5f d0       	rcall	.+190    	; 0x396 <vApplicationIdleHook>
     2d8:	f5 cf       	rjmp	.-22     	; 0x2c4 <prvIdleTask+0x5e>

000002da <__ctors_end>:
     2da:	11 24       	eor	r1, r1
     2dc:	1f be       	out	0x3f, r1	; 63
     2de:	cf ef       	ldi	r28, 0xFF	; 255
     2e0:	d1 e2       	ldi	r29, 0x21	; 33
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	0c bf       	out	0x3c, r16	; 60

000002ea <__do_copy_data>:
     2ea:	12 e0       	ldi	r17, 0x02	; 2
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b2 e0       	ldi	r27, 0x02	; 2
     2f0:	ee ea       	ldi	r30, 0xAE	; 174
     2f2:	f9 e2       	ldi	r31, 0x29	; 41
     2f4:	00 e0       	ldi	r16, 0x00	; 0
     2f6:	0b bf       	out	0x3b, r16	; 59
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <__do_copy_data+0x14>
     2fa:	07 90       	elpm	r0, Z+
     2fc:	0d 92       	st	X+, r0
     2fe:	a0 3a       	cpi	r26, 0xA0	; 160
     300:	b1 07       	cpc	r27, r17
     302:	d9 f7       	brne	.-10     	; 0x2fa <__do_copy_data+0x10>

00000304 <__do_clear_bss>:
     304:	25 e0       	ldi	r18, 0x05	; 5
     306:	a0 ea       	ldi	r26, 0xA0	; 160
     308:	b2 e0       	ldi	r27, 0x02	; 2
     30a:	01 c0       	rjmp	.+2      	; 0x30e <.do_clear_bss_start>

0000030c <.do_clear_bss_loop>:
     30c:	1d 92       	st	X+, r1

0000030e <.do_clear_bss_start>:
     30e:	a3 30       	cpi	r26, 0x03	; 3
     310:	b2 07       	cpc	r27, r18
     312:	e1 f7       	brne	.-8      	; 0x30c <.do_clear_bss_loop>
     314:	06 d6       	rcall	.+3084   	; 0xf22 <main>
     316:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <_exit>

0000031a <__bad_interrupt>:
     31a:	72 ce       	rjmp	.-796    	; 0x0 <__vectors>

0000031c <system_tick>:
     31c:	8f 93       	push	r24
     31e:	8f b7       	in	r24, 0x3f	; 63
     320:	8f 93       	push	r24
     322:	f8 94       	cli
     324:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <__system_time>
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <__system_time>
     32e:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <__system_time+0x1>
     332:	8f 4f       	sbci	r24, 0xFF	; 255
     334:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <__system_time+0x1>
     338:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <__system_time+0x2>
     33c:	8f 4f       	sbci	r24, 0xFF	; 255
     33e:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <__system_time+0x2>
     342:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <__system_time+0x3>
     346:	8f 4f       	sbci	r24, 0xFF	; 255
     348:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <__system_time+0x3>
     34c:	8f 91       	pop	r24
     34e:	8f bf       	out	0x3f, r24	; 63
     350:	8f 91       	pop	r24
     352:	08 95       	ret

00000354 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     35a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     35e:	ce 01       	movw	r24, r28
     360:	0e 94 71 13 	call	0x26e2	; 0x26e2 <malloc>
     364:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     366:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     36a:	20 97       	sbiw	r28, 0x00	; 0
     36c:	09 f4       	brne	.+2      	; 0x370 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     36e:	2c d0       	rcall	.+88     	; 0x3c8 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     370:	ce 01       	movw	r24, r28
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
	if( pv )
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	41 f0       	breq	.+16     	; 0x390 <vPortFree+0x18>
     380:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     382:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <vTaskSuspendAll>
		{
			free( pv );
     386:	ce 01       	movw	r24, r28
     388:	0e 94 09 14 	call	0x2812	; 0x2812 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     38c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <xTaskResumeAll>
	}
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Mega with 2560
	DIDR0 = 0xFF;
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     39c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     3a0:	80 b7       	in	r24, 0x30	; 48
     3a2:	87 7f       	andi	r24, 0xF7	; 247
     3a4:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     3a6:	80 b7       	in	r24, 0x30	; 48
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     3ac:	83 b7       	in	r24, 0x33	; 51
     3ae:	81 7f       	andi	r24, 0xF1	; 241
     3b0:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	0f 92       	push	r0

	sleep_enable();
     3b8:	83 b7       	in	r24, 0x33	; 51
     3ba:	81 60       	ori	r24, 0x01	; 1
     3bc:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63

	sleep_cpu();		// good night.
     3c2:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     3c4:	13 be       	out	0x33, r1	; 51
     3c6:	08 95       	ret

000003c8 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Mega with 2560
	DDRB  |= _BV(DDB7);
     3c8:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     3ca:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3cc:	83 ed       	ldi	r24, 0xD3	; 211
     3ce:	90 e3       	ldi	r25, 0x30	; 48
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <vApplicationMallocFailedHook+0x8>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <vApplicationMallocFailedHook+0xe>
     3d6:	00 00       	nop

	for(;;)
	{
		_delay_ms(50);
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     3d8:	1f 9a       	sbi	0x03, 7	; 3
     3da:	f8 cf       	rjmp	.-16     	; 0x3cc <vApplicationMallocFailedHook+0x4>

000003dc <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
	DDRB  |= _BV(DDB7);
     3dc:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     3de:	2f 9a       	sbi	0x05, 7	; 5
     3e0:	2f e7       	ldi	r18, 0x7F	; 127
     3e2:	8a e1       	ldi	r24, 0x1A	; 26
     3e4:	96 e0       	ldi	r25, 0x06	; 6
     3e6:	21 50       	subi	r18, 0x01	; 1
     3e8:	80 40       	sbci	r24, 0x00	; 0
     3ea:	90 40       	sbci	r25, 0x00	; 0
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <vApplicationStackOverflowHook+0xa>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <vApplicationStackOverflowHook+0x14>
     3f0:	00 00       	nop

	for(;;)
	{
		_delay_ms(2000);
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
     3f2:	1f 9a       	sbi	0x03, 7	; 3
     3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <vApplicationStackOverflowHook+0x4>

000003f6 <__vector_39>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect) __attribute__((hot, flatten));
ISR(TWI_vect)
{
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	11 24       	eor	r1, r1
     400:	0b b6       	in	r0, 0x3b	; 59
     402:	0f 92       	push	r0
     404:	2f 93       	push	r18
     406:	3f 93       	push	r19
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
  static uint8_t I2C_bufPtr;

  switch (TWSR)
     414:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     418:	8e 2f       	mov	r24, r30
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	38 97       	sbiw	r30, 0x08	; 8
     420:	e1 3c       	cpi	r30, 0xC1	; 193
     422:	f1 05       	cpc	r31, r1
     424:	08 f0       	brcs	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	c1 c0       	rjmp	.+386    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     428:	88 27       	eor	r24, r24
     42a:	ee 58       	subi	r30, 0x8E	; 142
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	8f 4f       	sbci	r24, 0xFF	; 255
     430:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__tablejump2__>
  {

    case I2C_START:             // START has been transmitted
    case I2C_REP_START:         // Repeated START has been transmitted
		I2C_bufPtr = 0;         // Set buffer pointer to the TWI Address location
     434:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <__data_end>

// Master Transmitter

    case I2C_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case I2C_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
		if (I2C_bufPtr < I2C_msgSize)
     438:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     43c:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <I2C_msgSize>
     440:	e8 17       	cp	r30, r24
     442:	70 f4       	brcc	.+28     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			TWDR = I2C_buf[I2C_bufPtr++];
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	8e 0f       	add	r24, r30
     448:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	ec 55       	subi	r30, 0x5C	; 92
     450:	fd 4f       	sbci	r31, 0xFD	; 253
     452:	80 81       	ld	r24, Z
     454:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     458:	85 e8       	ldi	r24, 0x85	; 133
     45a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     45e:	ac c0       	rjmp	.+344    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				   (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
				   (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
				   (0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
		I2C_statusReg.lastTransOK = true;                 // Set status bits to completed successfully.
     460:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     464:	81 60       	ori	r24, 0x01	; 1
     466:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     46a:	84 e9       	ldi	r24, 0x94	; 148
     46c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     470:	a3 c0       	rjmp	.+326    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		}
		break;

    case I2C_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case I2C_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
	    I2C_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     472:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     476:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
	    // Reset TWI Interface and send START.
		TWCR = 	(1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     47a:	85 ee       	ldi	r24, 0xE5	; 229
     47c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				(1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
				(1<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|    		// Send Start.
				(0<<TWWC);
		break;
     480:	9b c0       	rjmp	.+310    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


// Master Receiver

    case I2C_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
		I2C_buf[I2C_bufPtr++] = TWDR;
     482:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	8e 0f       	add	r24, r30
     48a:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
     48e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	ec 55       	subi	r30, 0x5C	; 92
     496:	fd 4f       	sbci	r31, 0xFD	; 253
     498:	80 83       	st	Z, r24

    case I2C_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
		if (I2C_bufPtr < (I2C_msgSize-1) )                  // Detect the last byte to NACK it.
     49a:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__data_end>
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <I2C_msgSize>
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	28 17       	cp	r18, r24
     4aa:	39 07       	cpc	r19, r25
     4ac:	24 f4       	brge	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     4ae:	85 ec       	ldi	r24, 0xC5	; 197
     4b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     4b4:	81 c0       	rjmp	.+258    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				   (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
				   (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
				   (0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     4b6:	85 e8       	ldi	r24, 0x85	; 133
     4b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     4bc:	7d c0       	rjmp	.+250    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				   (0<<TWWC);                                 //
		}
		break;

    case I2C_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
		I2C_buf[I2C_bufPtr] = TWDR;
     4be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     4c2:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	ec 55       	subi	r30, 0x5C	; 92
     4ca:	fd 4f       	sbci	r31, 0xFD	; 253
     4cc:	80 83       	st	Z, r24
		I2C_statusReg.lastTransOK = true;                 // Set status bits to completed successfully.
     4ce:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     4d8:	84 ed       	ldi	r24, 0xD4	; 212
     4da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			   (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
			   (1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			   (0<<TWWC);                                 //
		break;
     4de:	6c c0       	rjmp	.+216    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>



    case I2C_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received
 	    I2C_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     4e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     4e4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
		// Reset TWI Interface and send STOP.
		TWCR = 	(1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     4e8:	85 ed       	ldi	r24, 0xD5	; 213
     4ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				(1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
				(1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|    		// Send stop.
				(0<<TWWC);
		break;
     4ee:	64 c0       	rjmp	.+200    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
// Slave Transmitter

	case I2C_STX_ADR_ACK:			// Own SLA+R has been received; ACK has been returned
	case I2C_STX_ADR_ACK_M_ARB_LOST:// Arbitration lost in SLA+R/W as Master; own SLA+R has
									// been received; ACK has been returned
	    I2C_bufPtr   = 0;	    	// Set buffer pointer to first data location
     4f0:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <__data_end>


	case I2C_STX_DATA_ACK:		// Data byte in TWDR has been transmitted; ACK has been received
	    TWDR = I2C_buf[I2C_bufPtr++];
     4f4:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	8e 0f       	add	r24, r30
     4fc:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	ec 55       	subi	r30, 0x5C	; 92
     504:	fd 4f       	sbci	r31, 0xFD	; 253
     506:	80 81       	ld	r24, Z
     508:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	    						// Enable TWI Interrupt and clear the flag to send byte
	    TWCR = 	(1<<TWEN) |
     50c:	85 ec       	ldi	r24, 0xC5	; 197
     50e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	    		(1<<TWIE)|(1<<TWINT)|
	    		(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|
	    		(0<<TWWC);
	    break;
     512:	52 c0       	rjmp	.+164    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


	case I2C_STX_DATA_NACK:  	// Data byte in TWDR has been transmitted; NACK has been received.
	    						// I.e. this could be the end of the transmission.
	    if (I2C_bufPtr == I2C_msgSize) 	    // Have we transmitted all expected data?
     514:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <__data_end>
     518:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <I2C_msgSize>
     51c:	98 13       	cpse	r25, r24
     51e:	06 c0       	rjmp	.+12     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
	    {
	        I2C_statusReg.lastTransOK = true; // Set status bits to completed successfully.
     520:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     524:	81 60       	ori	r24, 0x01	; 1
     526:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>
     52a:	04 c0       	rjmp	.+8      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
	    }
	    else
	    {
	        I2C_state = TWSR;     // Master has sent a NACK before all data where sent, Store I2C State as error message.
     52c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     530:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
	    }

	    // Put I2C Transceiver in passive mode.
	    // Enable I2C-interface and release I2C pins
	    TWCR = (1<<TWEN)|
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	           (0<<TWIE)|(0<<TWINT)|                // Disable Interrupt
	           (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|     // Do not acknowledge on any new requests.
	           (0<<TWWC);
	   break;
     53a:	3e c0       	rjmp	.+124    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


    case I2C_STX_DATA_ACK_LAST_BYTE: // Last data byte in TWDR has been transmitted TWEA = ; ACK has been received

    	// Enable TWI Interrupt and clear the flag to send byte
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     53c:	85 ec       	ldi	r24, 0xC5	; 197
     53e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Acknowledge on any new requests.
               (0<<TWWC);

	    break;
     542:	3a c0       	rjmp	.+116    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
// Slave Receiver

	case I2C_SRX_GEN_ACK:				// General call address has been received; ACK has been returned
	case I2C_SRX_GEN_ACK_M_ARB_LOST:	// Arbitration lost in SLA+R/W as Master; General call
										// address has been received; ACK has been returned
	    I2C_statusReg.genAddressCall = true;
     544:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     548:	84 60       	ori	r24, 0x04	; 4
     54a:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>

	case I2C_SRX_ADR_ACK:		// Own SLA+W has been received ACK has been returned
	case I2C_SRX_ADR_ACK_M_ARB_LOST:	// Arbitration lost in SLA+R/W as Master; own SLA+W
										// has been received; ACK has been returned

	    I2C_statusReg.RxDataInBuf = true; // Don't need to clear I2C_statusRegister.generalAddressCall due to that it is the default state.
     54e:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     552:	82 60       	ori	r24, 0x02	; 2
     554:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>

	    I2C_bufPtr   = 0;	    // Set buffer pointer to first data location
     558:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <__data_end>
	    // Reset the TWI Interrupt to wait for a new event.

	    // TWI Interface enabled
	    // Enable TWI Interrupt and clear the flag to send byte
	    // Expect ACK on this transmission
	    TWCR =  (1<<TWEN)|
     55c:	85 ec       	ldi	r24, 0xC5	; 197
     55e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	    		(1<<TWIE)|(1<<TWINT)|
	    		(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|
	    		(0<<TWWC);
		break;
     562:	2a c0       	rjmp	.+84     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

	case I2C_SRX_ADR_DATA_ACK:	// Previously addressed with own SLA+W; data has been received; ACK has been returned
	case I2C_SRX_GEN_DATA_ACK:	// Previously addressed with general call; data has been received; ACK has been returned

		I2C_buf[I2C_bufPtr++] = TWDR;
     564:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	8e 0f       	add	r24, r30
     56c:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
     570:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	ec 55       	subi	r30, 0x5C	; 92
     578:	fd 4f       	sbci	r31, 0xFD	; 253
     57a:	80 83       	st	Z, r24

		I2C_statusReg.lastTransOK = true;		// Set flag transmission successful.
     57c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     580:	81 60       	ori	r24, 0x01	; 1
     582:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>

		// Reset the TWI Interrupt to wait for a new event.
		TWCR = (1<<TWEN)|                          // TWI Interface enabled
     586:	85 ec       	ldi	r24, 0xC5	; 197
     588:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
		       (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
		       (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Send ACK after next reception
		       (0<<TWWC);
		break;
     58c:	15 c0       	rjmp	.+42     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

    case I2C_SRX_ADR_DATA_NACK: // Previously addressed with own SLA+W; data has been received; NOT ACK has been returned
    case I2C_SRX_GEN_DATA_NACK: // Previously addressed with general call; data has been received; NOT ACK has been returned

    	// NOT ACK back at the Master
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     58e:	85 e8       	ldi	r24, 0x85	; 133
     590:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Do not acknowledge on any new requests.
               (0<<TWWC);
		break;
     594:	11 c0       	rjmp	.+34     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

    case I2C_SRX_STOP_RESTART:  // A STOP condition or repeated START condition has been received while still addressed as Slave

    	I2C_checkBusyAfterStop = I2C_HOW_MANY_BUSY_CHECKS_AFTER_STOP; // do some busy checks before hitting the bus again.
     596:	84 e0       	ldi	r24, 0x04	; 4
     598:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <I2C_checkBusyAfterStop>

        // Put TWI Transceiver in passive mode.
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     59c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (0<<TWIE)|(0<<TWINT)|               // Disable Interrupt
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Do not acknowledge on any new requests.
               (0<<TWWC);
        break;
     5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


// ERRORS AND FAULT CONDITIONS

    case I2C_ARB_LOST:          						// Arbitration lost
		TWCR = (1<<TWEN)|                               // TWI Interface enabled
     5a2:	85 ee       	ldi	r24, 0xE5	; 229
     5a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			   (1<<TWIE)|(1<<TWINT)|                    // Enable TWI Interrupt and clear the flag
			   (1<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|         // Initiate a (RE)START condition.
			   (0<<TWWC);                               //
		break;
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

    case I2C_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    case I2C_NO_STATE:          // No relevant state information available TWINT = 0

    default:
		I2C_state = TWSR;                               // Store TWSR and automatically sets clears noErrors bit.
     5aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     5ae:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>

														// Reset TWI Interface
		TWCR = (1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     5b2:	85 ed       	ldi	r24, 0xD5	; 213
     5b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			 (1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
			 (1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|    		// Acknowledge on any new requests. Send stop.
			 (0<<TWWC);                               	//
      	break;
  }
}
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	0f 90       	pop	r0
     5d2:	1f 90       	pop	r1
     5d4:	18 95       	reti

000005d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     5d6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5d8:	03 96       	adiw	r24, 0x03	; 3
     5da:	92 83       	std	Z+2, r25	; 0x02
     5dc:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     5de:	2f ef       	ldi	r18, 0xFF	; 255
     5e0:	3f ef       	ldi	r19, 0xFF	; 255
     5e2:	34 83       	std	Z+4, r19	; 0x04
     5e4:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5e6:	96 83       	std	Z+6, r25	; 0x06
     5e8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ea:	90 87       	std	Z+8, r25	; 0x08
     5ec:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     5ee:	10 82       	st	Z, r1
     5f0:	08 95       	ret

000005f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     5f2:	fc 01       	movw	r30, r24
     5f4:	11 86       	std	Z+9, r1	; 0x09
     5f6:	10 86       	std	Z+8, r1	; 0x08
     5f8:	08 95       	ret

000005fa <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	9c 01       	movw	r18, r24
     600:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     602:	dc 01       	movw	r26, r24
     604:	11 96       	adiw	r26, 0x01	; 1
     606:	cd 91       	ld	r28, X+
     608:	dc 91       	ld	r29, X
     60a:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     60c:	d3 83       	std	Z+3, r29	; 0x03
     60e:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     610:	8c 81       	ldd	r24, Y+4	; 0x04
     612:	9d 81       	ldd	r25, Y+5	; 0x05
     614:	95 83       	std	Z+5, r25	; 0x05
     616:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     618:	8c 81       	ldd	r24, Y+4	; 0x04
     61a:	9d 81       	ldd	r25, Y+5	; 0x05
     61c:	dc 01       	movw	r26, r24
     61e:	13 96       	adiw	r26, 0x03	; 3
     620:	7c 93       	st	X, r23
     622:	6e 93       	st	-X, r22
     624:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     626:	7d 83       	std	Y+5, r23	; 0x05
     628:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     62a:	31 87       	std	Z+9, r19	; 0x09
     62c:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     62e:	f9 01       	movw	r30, r18
     630:	80 81       	ld	r24, Z
     632:	8f 5f       	subi	r24, 0xFF	; 255
     634:	80 83       	st	Z, r24
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     642:	48 81       	ld	r20, Y
     644:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     646:	4f 3f       	cpi	r20, 0xFF	; 255
     648:	2f ef       	ldi	r18, 0xFF	; 255
     64a:	52 07       	cpc	r21, r18
     64c:	21 f4       	brne	.+8      	; 0x656 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     64e:	fc 01       	movw	r30, r24
     650:	a7 81       	ldd	r26, Z+7	; 0x07
     652:	b0 85       	ldd	r27, Z+8	; 0x08
     654:	0d c0       	rjmp	.+26     	; 0x670 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     656:	dc 01       	movw	r26, r24
     658:	13 96       	adiw	r26, 0x03	; 3
     65a:	01 c0       	rjmp	.+2      	; 0x65e <vListInsert+0x22>
     65c:	df 01       	movw	r26, r30
     65e:	12 96       	adiw	r26, 0x02	; 2
     660:	ed 91       	ld	r30, X+
     662:	fc 91       	ld	r31, X
     664:	13 97       	sbiw	r26, 0x03	; 3
     666:	20 81       	ld	r18, Z
     668:	31 81       	ldd	r19, Z+1	; 0x01
     66a:	42 17       	cp	r20, r18
     66c:	53 07       	cpc	r21, r19
     66e:	b0 f7       	brcc	.-20     	; 0x65c <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	ed 91       	ld	r30, X+
     674:	fc 91       	ld	r31, X
     676:	13 97       	sbiw	r26, 0x03	; 3
     678:	fb 83       	std	Y+3, r31	; 0x03
     67a:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     67c:	d5 83       	std	Z+5, r29	; 0x05
     67e:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     680:	bd 83       	std	Y+5, r27	; 0x05
     682:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     684:	13 96       	adiw	r26, 0x03	; 3
     686:	dc 93       	st	X, r29
     688:	ce 93       	st	-X, r28
     68a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     68c:	99 87       	std	Y+9, r25	; 0x09
     68e:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     690:	fc 01       	movw	r30, r24
     692:	20 81       	ld	r18, Z
     694:	2f 5f       	subi	r18, 0xFF	; 255
     696:	20 83       	st	Z, r18
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     6a4:	a0 85       	ldd	r26, Z+8	; 0x08
     6a6:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6a8:	c2 81       	ldd	r28, Z+2	; 0x02
     6aa:	d3 81       	ldd	r29, Z+3	; 0x03
     6ac:	84 81       	ldd	r24, Z+4	; 0x04
     6ae:	95 81       	ldd	r25, Z+5	; 0x05
     6b0:	9d 83       	std	Y+5, r25	; 0x05
     6b2:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6b4:	c4 81       	ldd	r28, Z+4	; 0x04
     6b6:	d5 81       	ldd	r29, Z+5	; 0x05
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	9b 83       	std	Y+3, r25	; 0x03
     6be:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     6c0:	11 96       	adiw	r26, 0x01	; 1
     6c2:	8d 91       	ld	r24, X+
     6c4:	9c 91       	ld	r25, X
     6c6:	12 97       	sbiw	r26, 0x02	; 2
     6c8:	e8 17       	cp	r30, r24
     6ca:	f9 07       	cpc	r31, r25
     6cc:	31 f4       	brne	.+12     	; 0x6da <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     6ce:	84 81       	ldd	r24, Z+4	; 0x04
     6d0:	95 81       	ldd	r25, Z+5	; 0x05
     6d2:	12 96       	adiw	r26, 0x02	; 2
     6d4:	9c 93       	st	X, r25
     6d6:	8e 93       	st	-X, r24
     6d8:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     6da:	11 86       	std	Z+9, r1	; 0x09
     6dc:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     6de:	8c 91       	ld	r24, X
     6e0:	81 50       	subi	r24, 0x01	; 1
     6e2:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <watchdogTaak>:
void motorLinks()
{
	PORTC &= ~(1 << L_PLUS);
	PORTL &= ~(1 << R_MIN);
	PORTG |= (1 << R_PLUS);
	PORTD |= (1 << L_MIN);
     6ea:	8f e9       	ldi	r24, 0x9F	; 159
     6ec:	9f e0       	ldi	r25, 0x0F	; 15
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <watchdogTaak+0x4>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <watchdogTaak+0xa>
     6f4:	00 00       	nop
     6f6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <watchdogSonar>
     6fa:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <watchdogSonar+0x1>
     6fe:	89 2b       	or	r24, r25
     700:	a1 f3       	breq	.-24     	; 0x6ea <watchdogTaak>
     702:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <watchdogServo>
     706:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <watchdogServo+0x1>
     70a:	89 2b       	or	r24, r25
     70c:	71 f3       	breq	.-36     	; 0x6ea <watchdogTaak>
     70e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <watchdogGyro>
     712:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <watchdogGyro+0x1>
     716:	89 2b       	or	r24, r25
     718:	41 f3       	breq	.-48     	; 0x6ea <watchdogTaak>
     71a:	a8 95       	wdr
     71c:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <watchdogSonar+0x1>
     720:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <watchdogSonar>
     724:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <watchdogServo+0x1>
     728:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <watchdogServo>
     72c:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <watchdogGyro+0x1>
     730:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <watchdogGyro>
     734:	da cf       	rjmp	.-76     	; 0x6ea <watchdogTaak>

00000736 <UART_Init>:
     736:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     73a:	87 e6       	ldi	r24, 0x67	; 103
     73c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     740:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     744:	86 e0       	ldi	r24, 0x06	; 6
     746:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     74a:	88 e1       	ldi	r24, 0x18	; 24
     74c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     750:	08 95       	ret

00000752 <UART_Transmit>:
     752:	e8 ec       	ldi	r30, 0xC8	; 200
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	90 81       	ld	r25, Z
     758:	95 ff       	sbrs	r25, 5
     75a:	fd cf       	rjmp	.-6      	; 0x756 <UART_Transmit+0x4>
     75c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     760:	08 95       	ret

00000762 <__vector_36>:
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	0f 90       	pop	r0
     76e:	0f be       	out	0x3f, r0	; 63
     770:	0f 90       	pop	r0
     772:	1f 90       	pop	r1
     774:	18 95       	reti

00000776 <UART_Transmit_String>:
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	ec 01       	movw	r28, r24
     77c:	88 81       	ld	r24, Y
     77e:	88 23       	and	r24, r24
     780:	29 f0       	breq	.+10     	; 0x78c <UART_Transmit_String+0x16>
     782:	21 96       	adiw	r28, 0x01	; 1
     784:	e6 df       	rcall	.-52     	; 0x752 <UART_Transmit>
     786:	89 91       	ld	r24, Y+
     788:	81 11       	cpse	r24, r1
     78a:	fc cf       	rjmp	.-8      	; 0x784 <UART_Transmit_String+0xe>
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <UART_Transmit_Integer>:
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	61 97       	sbiw	r28, 0x11	; 17
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	4a e0       	ldi	r20, 0x0A	; 10
     7ac:	be 01       	movw	r22, r28
     7ae:	6f 5f       	subi	r22, 0xFF	; 255
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	0e 94 a2 14 	call	0x2944	; 0x2944 <__itoa_ncheck>
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	dd df       	rcall	.-70     	; 0x776 <UART_Transmit_String>
     7bc:	61 96       	adiw	r28, 0x11	; 17
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <servoTaak>:
     7ce:	0a e8       	ldi	r16, 0x8A	; 138
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	c1 e0       	ldi	r28, 0x01	; 1
     7d4:	d0 e0       	ldi	r29, 0x00	; 0
     7d6:	e1 2c       	mov	r14, r1
     7d8:	f1 2c       	mov	r15, r1
     7da:	f0 92 59 04 	sts	0x0459, r15	; 0x800459 <hoek+0x1>
     7de:	e0 92 58 04 	sts	0x0458, r14	; 0x800458 <hoek>
     7e2:	c7 01       	movw	r24, r14
     7e4:	99 27       	eor	r25, r25
     7e6:	9c 01       	movw	r18, r24
     7e8:	22 0f       	add	r18, r18
     7ea:	33 1f       	adc	r19, r19
     7ec:	22 0f       	add	r18, r18
     7ee:	33 1f       	adc	r19, r19
     7f0:	22 0f       	add	r18, r18
     7f2:	33 1f       	adc	r19, r19
     7f4:	82 1b       	sub	r24, r18
     7f6:	93 0b       	sbc	r25, r19
     7f8:	95 5b       	subi	r25, 0xB5	; 181
     7fa:	f8 01       	movw	r30, r16
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	80 83       	st	Z, r24
     800:	ff ef       	ldi	r31, 0xFF	; 255
     802:	24 e3       	ldi	r18, 0x34	; 52
     804:	8c e0       	ldi	r24, 0x0C	; 12
     806:	f1 50       	subi	r31, 0x01	; 1
     808:	20 40       	sbci	r18, 0x00	; 0
     80a:	80 40       	sbci	r24, 0x00	; 0
     80c:	e1 f7       	brne	.-8      	; 0x806 <servoTaak+0x38>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <servoTaak+0x42>
     810:	00 00       	nop
     812:	87 e0       	ldi	r24, 0x07	; 7
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	af df       	rcall	.-162    	; 0x776 <UART_Transmit_String>
     818:	60 91 58 04 	lds	r22, 0x0458	; 0x800458 <hoek>
     81c:	70 91 59 04 	lds	r23, 0x0459	; 0x800459 <hoek+0x1>
     820:	07 2e       	mov	r0, r23
     822:	00 0c       	add	r0, r0
     824:	88 0b       	sbc	r24, r24
     826:	99 0b       	sbc	r25, r25
     828:	b4 df       	rcall	.-152    	; 0x792 <UART_Transmit_Integer>
     82a:	80 e1       	ldi	r24, 0x10	; 16
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	a3 df       	rcall	.-186    	; 0x776 <UART_Transmit_String>
     830:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <afstand>
     834:	70 91 64 04 	lds	r23, 0x0464	; 0x800464 <afstand+0x1>
     838:	07 2e       	mov	r0, r23
     83a:	00 0c       	add	r0, r0
     83c:	88 0b       	sbc	r24, r24
     83e:	99 0b       	sbc	r25, r25
     840:	a8 df       	rcall	.-176    	; 0x792 <UART_Transmit_Integer>
     842:	8b e1       	ldi	r24, 0x1B	; 27
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	97 df       	rcall	.-210    	; 0x776 <UART_Transmit_String>
     848:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <gyroX>
     84c:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <gyroX+0x1>
     850:	07 2e       	mov	r0, r23
     852:	00 0c       	add	r0, r0
     854:	88 0b       	sbc	r24, r24
     856:	99 0b       	sbc	r25, r25
     858:	9c df       	rcall	.-200    	; 0x792 <UART_Transmit_Integer>
     85a:	85 e2       	ldi	r24, 0x25	; 37
     85c:	92 e0       	ldi	r25, 0x02	; 2
     85e:	8b df       	rcall	.-234    	; 0x776 <UART_Transmit_String>
     860:	60 91 69 04 	lds	r22, 0x0469	; 0x800469 <gyroY>
     864:	70 91 6a 04 	lds	r23, 0x046A	; 0x80046a <gyroY+0x1>
     868:	07 2e       	mov	r0, r23
     86a:	00 0c       	add	r0, r0
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	90 df       	rcall	.-224    	; 0x792 <UART_Transmit_Integer>
     872:	8a e2       	ldi	r24, 0x2A	; 42
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	7f df       	rcall	.-258    	; 0x776 <UART_Transmit_String>
     878:	60 91 50 04 	lds	r22, 0x0450	; 0x800450 <gyroZ>
     87c:	70 91 51 04 	lds	r23, 0x0451	; 0x800451 <gyroZ+0x1>
     880:	07 2e       	mov	r0, r23
     882:	00 0c       	add	r0, r0
     884:	88 0b       	sbc	r24, r24
     886:	99 0b       	sbc	r25, r25
     888:	84 df       	rcall	.-248    	; 0x792 <UART_Transmit_Integer>
     88a:	8f e2       	ldi	r24, 0x2F	; 47
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	73 df       	rcall	.-282    	; 0x776 <UART_Transmit_String>
     890:	60 91 30 03 	lds	r22, 0x0330	; 0x800330 <accelX>
     894:	70 91 31 03 	lds	r23, 0x0331	; 0x800331 <accelX+0x1>
     898:	07 2e       	mov	r0, r23
     89a:	00 0c       	add	r0, r0
     89c:	88 0b       	sbc	r24, r24
     89e:	99 0b       	sbc	r25, r25
     8a0:	78 df       	rcall	.-272    	; 0x792 <UART_Transmit_Integer>
     8a2:	85 e2       	ldi	r24, 0x25	; 37
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	67 df       	rcall	.-306    	; 0x776 <UART_Transmit_String>
     8a8:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <accelY>
     8ac:	70 91 2d 03 	lds	r23, 0x032D	; 0x80032d <accelY+0x1>
     8b0:	07 2e       	mov	r0, r23
     8b2:	00 0c       	add	r0, r0
     8b4:	88 0b       	sbc	r24, r24
     8b6:	99 0b       	sbc	r25, r25
     8b8:	6c df       	rcall	.-296    	; 0x792 <UART_Transmit_Integer>
     8ba:	8a e2       	ldi	r24, 0x2A	; 42
     8bc:	92 e0       	ldi	r25, 0x02	; 2
     8be:	5b df       	rcall	.-330    	; 0x776 <UART_Transmit_String>
     8c0:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <accelZ>
     8c4:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <accelZ+0x1>
     8c8:	07 2e       	mov	r0, r23
     8ca:	00 0c       	add	r0, r0
     8cc:	88 0b       	sbc	r24, r24
     8ce:	99 0b       	sbc	r25, r25
     8d0:	60 df       	rcall	.-320    	; 0x792 <UART_Transmit_Integer>
     8d2:	d0 93 5f 04 	sts	0x045F, r29	; 0x80045f <watchdogServo+0x1>
     8d6:	c0 93 5e 04 	sts	0x045E, r28	; 0x80045e <watchdogServo>
     8da:	9b e1       	ldi	r25, 0x1B	; 27
     8dc:	e9 0e       	add	r14, r25
     8de:	f1 1c       	adc	r15, r1
     8e0:	e8 ed       	ldi	r30, 0xD8	; 216
     8e2:	ee 16       	cp	r14, r30
     8e4:	f1 04       	cpc	r15, r1
     8e6:	09 f0       	breq	.+2      	; 0x8ea <servoTaak+0x11c>
     8e8:	78 cf       	rjmp	.-272    	; 0x7da <servoTaak+0xc>
     8ea:	75 cf       	rjmp	.-278    	; 0x7d6 <servoTaak+0x8>

000008ec <INT1_init>:
     8ec:	e8 e6       	ldi	r30, 0x68	; 104
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	81 60       	ori	r24, 0x01	; 1
     8f4:	80 83       	st	Z, r24
     8f6:	eb e6       	ldi	r30, 0x6B	; 107
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	82 60       	ori	r24, 0x02	; 2
     8fe:	80 83       	st	Z, r24
     900:	08 95       	ret

00000902 <__vector_9>:
     902:	1f 92       	push	r1
     904:	0f 92       	push	r0
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	0f 92       	push	r0
     90a:	11 24       	eor	r1, r1
     90c:	0b b6       	in	r0, 0x3b	; 59
     90e:	0f 92       	push	r0
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
     928:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <running>
     92c:	88 23       	and	r24, r24
     92e:	d1 f1       	breq	.+116    	; 0x9a4 <__vector_9+0xa2>
     930:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <up>
     934:	81 11       	cpse	r24, r1
     936:	10 c0       	rjmp	.+32     	; 0x958 <__vector_9+0x56>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <up>
     93e:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <timerCounter>
     942:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <timerCounter+0x1>
     946:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <timerCounter+0x2>
     94a:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <timerCounter+0x3>
     94e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     952:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     956:	26 c0       	rjmp	.+76     	; 0x9a4 <__vector_9+0xa2>
     958:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <up>
     95c:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <timerCounter>
     960:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <timerCounter+0x1>
     964:	40 91 c2 02 	lds	r20, 0x02C2	; 0x8002c2 <timerCounter+0x2>
     968:	50 91 c3 02 	lds	r21, 0x02C3	; 0x8002c3 <timerCounter+0x3>
     96c:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     970:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     974:	af ef       	ldi	r26, 0xFF	; 255
     976:	bf ef       	ldi	r27, 0xFF	; 255
     978:	0e 94 67 13 	call	0x26ce	; 0x26ce <__muluhisi3>
     97c:	6e 0f       	add	r22, r30
     97e:	7f 1f       	adc	r23, r31
     980:	81 1d       	adc	r24, r1
     982:	91 1d       	adc	r25, r1
     984:	24 e7       	ldi	r18, 0x74	; 116
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	0e 94 2e 13 	call	0x265c	; 0x265c <__udivmodsi4>
     990:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <result>
     994:	30 93 bd 02 	sts	0x02BD, r19	; 0x8002bd <result+0x1>
     998:	40 93 be 02 	sts	0x02BE, r20	; 0x8002be <result+0x2>
     99c:	50 93 bf 02 	sts	0x02BF, r21	; 0x8002bf <result+0x3>
     9a0:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <running>
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0b be       	out	0x3b, r0	; 59
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti

000009ca <pulse>:
     9ca:	28 98       	cbi	0x05, 0	; 5
     9cc:	85 e0       	ldi	r24, 0x05	; 5
     9ce:	8a 95       	dec	r24
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <pulse+0x4>
     9d2:	00 00       	nop
     9d4:	28 9a       	sbi	0x05, 0	; 5
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <running>
     9dc:	85 e3       	ldi	r24, 0x35	; 53
     9de:	8a 95       	dec	r24
     9e0:	f1 f7       	brne	.-4      	; 0x9de <pulse+0x14>
     9e2:	00 00       	nop
     9e4:	28 98       	cbi	0x05, 0	; 5
     9e6:	08 95       	ret

000009e8 <sonarTaak>:
     9e8:	c1 e0       	ldi	r28, 0x01	; 1
     9ea:	d0 e0       	ldi	r29, 0x00	; 0
     9ec:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <running>
     9f0:	81 11       	cpse	r24, r1
     9f2:	16 c0       	rjmp	.+44     	; 0xa20 <sonarTaak+0x38>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	80 e7       	ldi	r24, 0x70	; 112
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	21 50       	subi	r18, 0x01	; 1
     9fc:	80 40       	sbci	r24, 0x00	; 0
     9fe:	90 40       	sbci	r25, 0x00	; 0
     a00:	e1 f7       	brne	.-8      	; 0x9fa <sonarTaak+0x12>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <sonarTaak+0x1c>
     a04:	00 00       	nop
     a06:	e1 df       	rcall	.-62     	; 0x9ca <pulse>
     a08:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <result>
     a0c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <result+0x1>
     a10:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <result+0x2>
     a14:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <result+0x3>
     a18:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <afstand+0x1>
     a1c:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <afstand>
     a20:	d0 93 35 03 	sts	0x0335, r29	; 0x800335 <watchdogSonar+0x1>
     a24:	c0 93 34 03 	sts	0x0334, r28	; 0x800334 <watchdogSonar>
     a28:	e1 cf       	rjmp	.-62     	; 0x9ec <sonarTaak+0x4>

00000a2a <timer3_init>:
     a2a:	e1 e9       	ldi	r30, 0x91	; 145
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	82 60       	ori	r24, 0x02	; 2
     a32:	80 83       	st	Z, r24
     a34:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a38:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a3c:	e1 e7       	ldi	r30, 0x71	; 113
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	81 60       	ori	r24, 0x01	; 1
     a44:	80 83       	st	Z, r24
     a46:	08 95       	ret

00000a48 <__vector_35>:
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	0b b6       	in	r0, 0x3b	; 59
     a54:	0f 92       	push	r0
     a56:	2f 93       	push	r18
     a58:	3f 93       	push	r19
     a5a:	4f 93       	push	r20
     a5c:	5f 93       	push	r21
     a5e:	6f 93       	push	r22
     a60:	7f 93       	push	r23
     a62:	8f 93       	push	r24
     a64:	9f 93       	push	r25
     a66:	af 93       	push	r26
     a68:	bf 93       	push	r27
     a6a:	ef 93       	push	r30
     a6c:	ff 93       	push	r31
     a6e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <up>
     a72:	88 23       	and	r24, r24
     a74:	e9 f1       	breq	.+122    	; 0xaf0 <__vector_35+0xa8>
     a76:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <timerCounter>
     a7a:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <timerCounter+0x1>
     a7e:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <timerCounter+0x2>
     a82:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <timerCounter+0x3>
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	a1 1d       	adc	r26, r1
     a8a:	b1 1d       	adc	r27, r1
     a8c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <timerCounter>
     a90:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <timerCounter+0x1>
     a94:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <timerCounter+0x2>
     a98:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <timerCounter+0x3>
     a9c:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <timerCounter>
     aa0:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <timerCounter+0x1>
     aa4:	40 91 c2 02 	lds	r20, 0x02C2	; 0x8002c2 <timerCounter+0x2>
     aa8:	50 91 c3 02 	lds	r21, 0x02C3	; 0x8002c3 <timerCounter+0x3>
     aac:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     ab0:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     ab4:	af ef       	ldi	r26, 0xFF	; 255
     ab6:	bf ef       	ldi	r27, 0xFF	; 255
     ab8:	0e 94 67 13 	call	0x26ce	; 0x26ce <__muluhisi3>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	8e 0f       	add	r24, r30
     ac2:	9f 1f       	adc	r25, r31
     ac4:	a1 1d       	adc	r26, r1
     ac6:	b1 1d       	adc	r27, r1
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	94 4d       	sbci	r25, 0xD4	; 212
     acc:	a0 43       	sbci	r26, 0x30	; 48
     ace:	b1 05       	cpc	r27, r1
     ad0:	78 f0       	brcs	.+30     	; 0xaf0 <__vector_35+0xa8>
     ad2:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <up>
     ad6:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <running>
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	9f ef       	ldi	r25, 0xFF	; 255
     ade:	dc 01       	movw	r26, r24
     ae0:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <result>
     ae4:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <result+0x1>
     ae8:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <result+0x2>
     aec:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <result+0x3>
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	bf 91       	pop	r27
     af6:	af 91       	pop	r26
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	7f 91       	pop	r23
     afe:	6f 91       	pop	r22
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	0f 90       	pop	r0
     b0a:	0b be       	out	0x3b, r0	; 59
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <initServo>:
     b16:	26 9a       	sbi	0x04, 6	; 4
     b18:	82 e3       	ldi	r24, 0x32	; 50
     b1a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     b1e:	82 e1       	ldi	r24, 0x12	; 18
     b20:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     b24:	80 e2       	ldi	r24, 0x20	; 32
     b26:	9e e4       	ldi	r25, 0x4E	; 78
     b28:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     b2c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     b30:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     b34:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	9b e4       	ldi	r25, 0x4B	; 75
     b3c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     b40:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     b44:	ef e6       	ldi	r30, 0x6F	; 111
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	82 60       	ori	r24, 0x02	; 2
     b4c:	80 83       	st	Z, r24
     b4e:	08 95       	ret

00000b50 <init_master>:
     b50:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b54:	88 e4       	ldi	r24, 0x48	; 72
     b56:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b60:	08 95       	ret

00000b62 <ontvangen>:
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	ec eb       	ldi	r30, 0xBC	; 188
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	90 81       	ld	r25, Z
     b74:	90 62       	ori	r25, 0x20	; 32
     b76:	90 83       	st	Z, r25
     b78:	90 81       	ld	r25, Z
     b7a:	99 23       	and	r25, r25
     b7c:	ec f7       	brge	.-6      	; 0xb78 <ontvangen+0x16>
     b7e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b82:	88 0f       	add	r24, r24
     b84:	8f 5f       	subi	r24, 0xFF	; 255
     b86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b8a:	84 e8       	ldi	r24, 0x84	; 132
     b8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b90:	ec eb       	ldi	r30, 0xBC	; 188
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	88 23       	and	r24, r24
     b98:	ec f7       	brge	.-6      	; 0xb94 <ontvangen+0x32>
     b9a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ba2:	db 01       	movw	r26, r22
     ba4:	8c 93       	st	X, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	41 50       	subi	r20, 0x01	; 1
     bac:	51 09       	sbc	r21, r1
     bae:	ec eb       	ldi	r30, 0xBC	; 188
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	0f 2e       	mov	r0, r31
     bb4:	f4 ec       	ldi	r31, 0xC4	; 196
     bb6:	ff 2e       	mov	r15, r31
     bb8:	f0 2d       	mov	r31, r0
     bba:	0f 2e       	mov	r0, r31
     bbc:	f4 e8       	ldi	r31, 0x84	; 132
     bbe:	ef 2e       	mov	r14, r31
     bc0:	f0 2d       	mov	r31, r0
     bc2:	09 eb       	ldi	r16, 0xB9	; 185
     bc4:	10 e0       	ldi	r17, 0x00	; 0
     bc6:	cb eb       	ldi	r28, 0xBB	; 187
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
     bca:	29 2f       	mov	r18, r25
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	24 17       	cp	r18, r20
     bd0:	35 07       	cpc	r19, r21
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <ontvangen+0x76>
     bd4:	e0 82       	st	Z, r14
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <ontvangen+0x78>
     bd8:	f0 82       	st	Z, r15
     bda:	80 81       	ld	r24, Z
     bdc:	88 23       	and	r24, r24
     bde:	ec f7       	brge	.-6      	; 0xbda <ontvangen+0x78>
     be0:	d8 01       	movw	r26, r16
     be2:	8c 91       	ld	r24, X
     be4:	28 81       	ld	r18, Y
     be6:	db 01       	movw	r26, r22
     be8:	a9 0f       	add	r26, r25
     bea:	b1 1d       	adc	r27, r1
     bec:	2c 93       	st	X, r18
     bee:	9f 5f       	subi	r25, 0xFF	; 255
     bf0:	80 35       	cpi	r24, 0x50	; 80
     bf2:	59 f3       	breq	.-42     	; 0xbca <ontvangen+0x68>
     bf4:	84 e9       	ldi	r24, 0x94	; 148
     bf6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	08 95       	ret

00000c08 <verzenden>:
     c08:	ec eb       	ldi	r30, 0xBC	; 188
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	90 81       	ld	r25, Z
     c0e:	90 62       	ori	r25, 0x20	; 32
     c10:	90 83       	st	Z, r25
     c12:	90 81       	ld	r25, Z
     c14:	99 23       	and	r25, r25
     c16:	ec f7       	brge	.-6      	; 0xc12 <verzenden+0xa>
     c18:	88 0f       	add	r24, r24
     c1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c1e:	84 e8       	ldi	r24, 0x84	; 132
     c20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c24:	ec eb       	ldi	r30, 0xBC	; 188
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 23       	and	r24, r24
     c2c:	ec f7       	brge	.-6      	; 0xc28 <verzenden+0x20>
     c2e:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c32:	84 e8       	ldi	r24, 0x84	; 132
     c34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c38:	ec eb       	ldi	r30, 0xBC	; 188
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 23       	and	r24, r24
     c40:	ec f7       	brge	.-6      	; 0xc3c <verzenden+0x34>
     c42:	84 e9       	ldi	r24, 0x94	; 148
     c44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c48:	08 95       	ret

00000c4a <gyroTaak>:
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	1f 92       	push	r1
     c50:	1f 92       	push	r1
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	01 e0       	ldi	r16, 0x01	; 1
     c58:	10 e0       	ldi	r17, 0x00	; 0
     c5a:	6b e3       	ldi	r22, 0x3B	; 59
     c5c:	88 e6       	ldi	r24, 0x68	; 104
     c5e:	d4 df       	rcall	.-88     	; 0xc08 <verzenden>
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	be 01       	movw	r22, r28
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	88 e6       	ldi	r24, 0x68	; 104
     c6a:	7b df       	rcall	.-266    	; 0xb62 <ontvangen>
     c6c:	f9 80       	ldd	r15, Y+1	; 0x01
     c6e:	6c e3       	ldi	r22, 0x3C	; 60
     c70:	88 e6       	ldi	r24, 0x68	; 104
     c72:	ca df       	rcall	.-108    	; 0xc08 <verzenden>
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	be 01       	movw	r22, r28
     c78:	6f 5f       	subi	r22, 0xFF	; 255
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	88 e6       	ldi	r24, 0x68	; 104
     c7e:	71 df       	rcall	.-286    	; 0xb62 <ontvangen>
     c80:	6f 2d       	mov	r22, r15
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	76 2f       	mov	r23, r22
     c86:	66 27       	eor	r22, r22
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	68 2b       	or	r22, r24
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 3d 12 	call	0x247a	; 0x247a <__floatunsisf>
     c94:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <_gyroScale>
     c98:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <_gyroScale+0x1>
     c9c:	40 91 6d 04 	lds	r20, 0x046D	; 0x80046d <_gyroScale+0x2>
     ca0:	50 91 6e 04 	lds	r21, 0x046E	; 0x80046e <_gyroScale+0x3>
     ca4:	0e 94 cb 12 	call	0x2596	; 0x2596 <__mulsf3>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	4a e8       	ldi	r20, 0x8A	; 138
     cae:	52 e4       	ldi	r21, 0x42	; 66
     cb0:	0e 94 a7 11 	call	0x234e	; 0x234e <__subsf3>
     cb4:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fixsfsi>
     cb8:	70 93 37 03 	sts	0x0337, r23	; 0x800337 <gyroX+0x1>
     cbc:	60 93 36 03 	sts	0x0336, r22	; 0x800336 <gyroX>
     cc0:	6d e3       	ldi	r22, 0x3D	; 61
     cc2:	88 e6       	ldi	r24, 0x68	; 104
     cc4:	a1 df       	rcall	.-190    	; 0xc08 <verzenden>
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	be 01       	movw	r22, r28
     cca:	6f 5f       	subi	r22, 0xFF	; 255
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	88 e6       	ldi	r24, 0x68	; 104
     cd0:	48 df       	rcall	.-368    	; 0xb62 <ontvangen>
     cd2:	f9 80       	ldd	r15, Y+1	; 0x01
     cd4:	6e e3       	ldi	r22, 0x3E	; 62
     cd6:	88 e6       	ldi	r24, 0x68	; 104
     cd8:	97 df       	rcall	.-210    	; 0xc08 <verzenden>
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	be 01       	movw	r22, r28
     cde:	6f 5f       	subi	r22, 0xFF	; 255
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
     ce2:	88 e6       	ldi	r24, 0x68	; 104
     ce4:	3e df       	rcall	.-388    	; 0xb62 <ontvangen>
     ce6:	6f 2d       	mov	r22, r15
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	76 2f       	mov	r23, r22
     cec:	66 27       	eor	r22, r22
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	68 2b       	or	r22, r24
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 3d 12 	call	0x247a	; 0x247a <__floatunsisf>
     cfa:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <_gyroScale>
     cfe:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <_gyroScale+0x1>
     d02:	40 91 6d 04 	lds	r20, 0x046D	; 0x80046d <_gyroScale+0x2>
     d06:	50 91 6e 04 	lds	r21, 0x046E	; 0x80046e <_gyroScale+0x3>
     d0a:	0e 94 cb 12 	call	0x2596	; 0x2596 <__mulsf3>
     d0e:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fixsfsi>
     d12:	70 93 6a 04 	sts	0x046A, r23	; 0x80046a <gyroY+0x1>
     d16:	60 93 69 04 	sts	0x0469, r22	; 0x800469 <gyroY>
     d1a:	6f e3       	ldi	r22, 0x3F	; 63
     d1c:	88 e6       	ldi	r24, 0x68	; 104
     d1e:	74 df       	rcall	.-280    	; 0xc08 <verzenden>
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	be 01       	movw	r22, r28
     d24:	6f 5f       	subi	r22, 0xFF	; 255
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	88 e6       	ldi	r24, 0x68	; 104
     d2a:	1b df       	rcall	.-458    	; 0xb62 <ontvangen>
     d2c:	f9 80       	ldd	r15, Y+1	; 0x01
     d2e:	60 e4       	ldi	r22, 0x40	; 64
     d30:	88 e6       	ldi	r24, 0x68	; 104
     d32:	6a df       	rcall	.-300    	; 0xc08 <verzenden>
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	be 01       	movw	r22, r28
     d38:	6f 5f       	subi	r22, 0xFF	; 255
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	88 e6       	ldi	r24, 0x68	; 104
     d3e:	11 df       	rcall	.-478    	; 0xb62 <ontvangen>
     d40:	6f 2d       	mov	r22, r15
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	76 2f       	mov	r23, r22
     d46:	66 27       	eor	r22, r22
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	68 2b       	or	r22, r24
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 3d 12 	call	0x247a	; 0x247a <__floatunsisf>
     d54:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <_gyroScale>
     d58:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <_gyroScale+0x1>
     d5c:	40 91 6d 04 	lds	r20, 0x046D	; 0x80046d <_gyroScale+0x2>
     d60:	50 91 6e 04 	lds	r21, 0x046E	; 0x80046e <_gyroScale+0x3>
     d64:	0e 94 cb 12 	call	0x2596	; 0x2596 <__mulsf3>
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e8       	ldi	r20, 0x80	; 128
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	0e 94 a7 11 	call	0x234e	; 0x234e <__subsf3>
     d74:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fixsfsi>
     d78:	70 93 51 04 	sts	0x0451, r23	; 0x800451 <gyroZ+0x1>
     d7c:	60 93 50 04 	sts	0x0450, r22	; 0x800450 <gyroZ>
     d80:	63 e4       	ldi	r22, 0x43	; 67
     d82:	88 e6       	ldi	r24, 0x68	; 104
     d84:	41 df       	rcall	.-382    	; 0xc08 <verzenden>
     d86:	41 e0       	ldi	r20, 0x01	; 1
     d88:	be 01       	movw	r22, r28
     d8a:	6f 5f       	subi	r22, 0xFF	; 255
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	88 e6       	ldi	r24, 0x68	; 104
     d90:	e8 de       	rcall	.-560    	; 0xb62 <ontvangen>
     d92:	f9 80       	ldd	r15, Y+1	; 0x01
     d94:	64 e4       	ldi	r22, 0x44	; 68
     d96:	88 e6       	ldi	r24, 0x68	; 104
     d98:	37 df       	rcall	.-402    	; 0xc08 <verzenden>
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	be 01       	movw	r22, r28
     d9e:	6f 5f       	subi	r22, 0xFF	; 255
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	88 e6       	ldi	r24, 0x68	; 104
     da4:	de de       	rcall	.-580    	; 0xb62 <ontvangen>
     da6:	6f 2d       	mov	r22, r15
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	76 2f       	mov	r23, r22
     dac:	66 27       	eor	r22, r22
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	68 2b       	or	r22, r24
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 3d 12 	call	0x247a	; 0x247a <__floatunsisf>
     dba:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <_accelScale>
     dbe:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <_accelScale+0x1>
     dc2:	40 91 67 04 	lds	r20, 0x0467	; 0x800467 <_accelScale+0x2>
     dc6:	50 91 68 04 	lds	r21, 0x0468	; 0x800468 <_accelScale+0x3>
     dca:	0e 94 cb 12 	call	0x2596	; 0x2596 <__mulsf3>
     dce:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fixsfsi>
     dd2:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <accelX+0x1>
     dd6:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <accelX>
     dda:	65 e4       	ldi	r22, 0x45	; 69
     ddc:	88 e6       	ldi	r24, 0x68	; 104
     dde:	14 df       	rcall	.-472    	; 0xc08 <verzenden>
     de0:	41 e0       	ldi	r20, 0x01	; 1
     de2:	be 01       	movw	r22, r28
     de4:	6f 5f       	subi	r22, 0xFF	; 255
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	88 e6       	ldi	r24, 0x68	; 104
     dea:	bb de       	rcall	.-650    	; 0xb62 <ontvangen>
     dec:	f9 80       	ldd	r15, Y+1	; 0x01
     dee:	66 e4       	ldi	r22, 0x46	; 70
     df0:	88 e6       	ldi	r24, 0x68	; 104
     df2:	0a df       	rcall	.-492    	; 0xc08 <verzenden>
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	be 01       	movw	r22, r28
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	88 e6       	ldi	r24, 0x68	; 104
     dfe:	b1 de       	rcall	.-670    	; 0xb62 <ontvangen>
     e00:	6f 2d       	mov	r22, r15
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	76 2f       	mov	r23, r22
     e06:	66 27       	eor	r22, r22
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	68 2b       	or	r22, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 3d 12 	call	0x247a	; 0x247a <__floatunsisf>
     e14:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <_accelScale>
     e18:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <_accelScale+0x1>
     e1c:	40 91 67 04 	lds	r20, 0x0467	; 0x800467 <_accelScale+0x2>
     e20:	50 91 68 04 	lds	r21, 0x0468	; 0x800468 <_accelScale+0x3>
     e24:	0e 94 cb 12 	call	0x2596	; 0x2596 <__mulsf3>
     e28:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fixsfsi>
     e2c:	70 93 2d 03 	sts	0x032D, r23	; 0x80032d <accelY+0x1>
     e30:	60 93 2c 03 	sts	0x032C, r22	; 0x80032c <accelY>
     e34:	67 e4       	ldi	r22, 0x47	; 71
     e36:	88 e6       	ldi	r24, 0x68	; 104
     e38:	e7 de       	rcall	.-562    	; 0xc08 <verzenden>
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	be 01       	movw	r22, r28
     e3e:	6f 5f       	subi	r22, 0xFF	; 255
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	88 e6       	ldi	r24, 0x68	; 104
     e44:	8e de       	rcall	.-740    	; 0xb62 <ontvangen>
     e46:	f9 80       	ldd	r15, Y+1	; 0x01
     e48:	68 e4       	ldi	r22, 0x48	; 72
     e4a:	88 e6       	ldi	r24, 0x68	; 104
     e4c:	dd de       	rcall	.-582    	; 0xc08 <verzenden>
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	be 01       	movw	r22, r28
     e52:	6f 5f       	subi	r22, 0xFF	; 255
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	88 e6       	ldi	r24, 0x68	; 104
     e58:	84 de       	rcall	.-760    	; 0xb62 <ontvangen>
     e5a:	6f 2d       	mov	r22, r15
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	76 2f       	mov	r23, r22
     e60:	66 27       	eor	r22, r22
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	68 2b       	or	r22, r24
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 3d 12 	call	0x247a	; 0x247a <__floatunsisf>
     e6e:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <_accelScale>
     e72:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <_accelScale+0x1>
     e76:	40 91 67 04 	lds	r20, 0x0467	; 0x800467 <_accelScale+0x2>
     e7a:	50 91 68 04 	lds	r21, 0x0468	; 0x800468 <_accelScale+0x3>
     e7e:	0e 94 cb 12 	call	0x2596	; 0x2596 <__mulsf3>
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e8       	ldi	r19, 0x80	; 128
     e86:	4c e9       	ldi	r20, 0x9C	; 156
     e88:	53 e4       	ldi	r21, 0x43	; 67
     e8a:	0e 94 a7 11 	call	0x234e	; 0x234e <__subsf3>
     e8e:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fixsfsi>
     e92:	70 93 62 04 	sts	0x0462, r23	; 0x800462 <accelZ+0x1>
     e96:	60 93 61 04 	sts	0x0461, r22	; 0x800461 <accelZ>
     e9a:	10 93 33 03 	sts	0x0333, r17	; 0x800333 <watchdogGyro+0x1>
     e9e:	00 93 32 03 	sts	0x0332, r16	; 0x800332 <watchdogGyro>
     ea2:	db ce       	rjmp	.-586    	; 0xc5a <gyroTaak+0x10>

00000ea4 <__vector_17>:
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	95 b1       	in	r25, 0x05	; 5
     eb4:	80 e4       	ldi	r24, 0x40	; 64
     eb6:	89 27       	eor	r24, r25
     eb8:	85 b9       	out	0x05, r24	; 5
     eba:	9f 91       	pop	r25
     ebc:	8f 91       	pop	r24
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <motorStop>:
	PORTL |= (1 << L_EN);
}

void motorStop()
{
	PORTG &= ~(1 << R_PLUS);
     ec8:	a1 98       	cbi	0x14, 1	; 20
	PORTL &= ~(1 << R_MIN);
     eca:	eb e0       	ldi	r30, 0x0B	; 11
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	80 81       	ld	r24, Z
     ed0:	8f 77       	andi	r24, 0x7F	; 127
     ed2:	80 83       	st	Z, r24
	PORTC &= ~(1 << L_PLUS);
     ed4:	41 98       	cbi	0x08, 1	; 8
	PORTD &= ~(1 << L_MIN);
     ed6:	5f 98       	cbi	0x0b, 7	; 11
     ed8:	08 95       	ret

00000eda <motorEnable>:
	PORTD |= (1 << L_MIN);
}

void motorEnable()
{
	motorStop();
     eda:	f6 df       	rcall	.-20     	; 0xec8 <motorStop>
	PORTL |= (1 << R_EN);
     edc:	eb e0       	ldi	r30, 0x0B	; 11
     ede:	f1 e0       	ldi	r31, 0x01	; 1
     ee0:	80 81       	ld	r24, Z
     ee2:	88 60       	ori	r24, 0x08	; 8
     ee4:	80 83       	st	Z, r24
	PORTL |= (1 << L_EN);
     ee6:	80 81       	ld	r24, Z
     ee8:	80 62       	ori	r24, 0x20	; 32
     eea:	80 83       	st	Z, r24
     eec:	08 95       	ret

00000eee <initMotor>:

#define R_PLUS PG1
#define R_MIN PL7
#define R_EN PL3 -> pwm
*/
	DDRC |= (1 << L_PLUS);
     eee:	39 9a       	sbi	0x07, 1	; 7
	DDRD |= (1 << L_MIN);
     ef0:	57 9a       	sbi	0x0a, 7	; 10
	DDRL |= (1 << L_EN) | (1 << R_MIN) | (1 << R_EN);
     ef2:	ea e0       	ldi	r30, 0x0A	; 10
     ef4:	f1 e0       	ldi	r31, 0x01	; 1
     ef6:	80 81       	ld	r24, Z
     ef8:	88 6a       	ori	r24, 0xA8	; 168
     efa:	80 83       	st	Z, r24
	DDRG |= (1 << R_PLUS);
     efc:	99 9a       	sbi	0x13, 1	; 19

	TCCR5A = (1 << WGM51) | (1 << COM5A0) | (1 << COM5A1) |
     efe:	8e ec       	ldi	r24, 0xCE	; 206
     f00:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
	(1 << COM5C0) | (1 << COM5C1);
	TCCR5B = (1 << WGM53) | (1 << CS51);
     f04:	82 e1       	ldi	r24, 0x12	; 18
     f06:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	ICR5 = 20000;
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	9e e4       	ldi	r25, 0x4E	; 78
     f0e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     f12:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
	TCNT5 = 0;
     f16:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
     f1a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>

	motorEnable();
     f1e:	dd cf       	rjmp	.-70     	; 0xeda <motorEnable>
     f20:	08 95       	ret

00000f22 <main>:
//trigger = digital pin 53
//echo = digital pin 52
//servo = digital pin 12

int main() 
{
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
	sem = xSemaphoreCreateBinary();
     f28:	43 e0       	ldi	r20, 0x03	; 3
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	1f d3       	rcall	.+1598   	; 0x156e <xQueueGenericCreate>
     f30:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <sem+0x1>
     f34:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <sem>
	xSemaphoreGive(sem);
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	41 d3       	rcall	.+1666   	; 0x15c6 <xQueueGenericSend>
	DDRD|= 0x03;
     f44:	8a b1       	in	r24, 0x0a	; 10
     f46:	83 60       	ori	r24, 0x03	; 3
	DDRB |= (1 << TRIGGER);											// Trigger pin
     f48:	8a b9       	out	0x0a, r24	; 10
	initMotor();
     f4a:	20 9a       	sbi	0x04, 0	; 4
     f4c:	d0 df       	rcall	.-96     	; 0xeee <initMotor>
	motorCommand = xQueueCreate(10, sizeof(uint8_t));
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	0c d3       	rcall	.+1560   	; 0x156e <xQueueGenericCreate>
     f56:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <motorCommand+0x1>
	UART_Init();
     f5a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <motorCommand>
	INT1_init();
     f5e:	eb db       	rcall	.-2090   	; 0x736 <UART_Init>
	timer3_init();
     f60:	c5 dc       	rcall	.-1654   	; 0x8ec <INT1_init>
     f62:	63 dd       	rcall	.-1338   	; 0xa2a <timer3_init>
	initServo();
     f64:	d8 dd       	rcall	.-1104   	; 0xb16 <initServo>
     f66:	78 94       	sei
	sei();
     f68:	f3 dd       	rcall	.-1050   	; 0xb50 <init_master>
	//initQ();
	init_master();
     f6a:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <watchdogSonar+0x1>
	watchdogSonar=0;
     f6e:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <watchdogSonar>
     f72:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <watchdogServo+0x1>
	watchdogServo=0;
     f76:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <watchdogServo>
     f7a:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <watchdogTemp+0x1>
	watchdogTemp=0;
     f7e:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <watchdogTemp>
     f82:	86 e1       	ldi	r24, 0x16	; 22
     f84:	9a ee       	ldi	r25, 0xEA	; 234
	//wdt_enable(WDTO_4S);
	_accelScale = G * 16.0f/32767.5f;
     f86:	ac e9       	ldi	r26, 0x9C	; 156
     f88:	bb e3       	ldi	r27, 0x3B	; 59
     f8a:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <_accelScale>
     f8e:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <_accelScale+0x1>
     f92:	a0 93 67 04 	sts	0x0467, r26	; 0x800467 <_accelScale+0x2>
     f96:	b0 93 68 04 	sts	0x0468, r27	; 0x800468 <_accelScale+0x3>
     f9a:	83 ee       	ldi	r24, 0xE3	; 227
     f9c:	90 ea       	ldi	r25, 0xA0	; 160
	_gyroScale = 2000.0f/32767.5f * _d2r;
     f9e:	ab e8       	ldi	r26, 0x8B	; 139
     fa0:	ba e3       	ldi	r27, 0x3A	; 58
     fa2:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <_gyroScale>
     fa6:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <_gyroScale+0x1>
     faa:	a0 93 6d 04 	sts	0x046D, r26	; 0x80046d <_gyroScale+0x2>
     fae:	b0 93 6e 04 	sts	0x046E, r27	; 0x80046e <_gyroScale+0x3>
     fb2:	8a e3       	ldi	r24, 0x3A	; 58

	// Replace with your application code
//	UART_Transmit('a');
	UART_Transmit_String("\n\rsetup done\n\r");
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	df db       	rcall	.-2114   	; 0x776 <UART_Transmit_String>
     fb8:	e1 2c       	mov	r14, r1
     fba:	f1 2c       	mov	r15, r1
	xTaskCreate(sonarTaak,"Sonar Sensor",256,NULL,3,NULL);			//lees sonar sensor uit en schrijf afstand naar sonar queue
     fbc:	03 e0       	ldi	r16, 0x03	; 3
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	51 e0       	ldi	r21, 0x01	; 1
     fc6:	69 e4       	ldi	r22, 0x49	; 73
     fc8:	72 e0       	ldi	r23, 0x02	; 2
     fca:	84 ef       	ldi	r24, 0xF4	; 244
     fcc:	94 e0       	ldi	r25, 0x04	; 4
     fce:	e6 d5       	rcall	.+3020   	; 0x1b9c <xTaskCreate>
     fd0:	20 e0       	ldi	r18, 0x00	; 0
	xTaskCreate(servoTaak,"Servo Motor",256,NULL,3,NULL);			//code van Joris & Benjamin
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	51 e0       	ldi	r21, 0x01	; 1
     fd8:	66 e5       	ldi	r22, 0x56	; 86
     fda:	72 e0       	ldi	r23, 0x02	; 2
     fdc:	87 ee       	ldi	r24, 0xE7	; 231
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	dd d5       	rcall	.+3002   	; 0x1b9c <xTaskCreate>
     fe2:	20 e0       	ldi	r18, 0x00	; 0
	//xTaskCreate(temperatuurTaak,"temperatuur Sensor",256,NULL,3,NULL);
	xTaskCreate(gyroTaak,"Gyroscoop Sensor",256,NULL,3,NULL);
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	51 e0       	ldi	r21, 0x01	; 1
     fea:	62 e6       	ldi	r22, 0x62	; 98
     fec:	72 e0       	ldi	r23, 0x02	; 2
     fee:	85 e2       	ldi	r24, 0x25	; 37
     ff0:	96 e0       	ldi	r25, 0x06	; 6
     ff2:	d4 d5       	rcall	.+2984   	; 0x1b9c <xTaskCreate>
     ff4:	20 e0       	ldi	r18, 0x00	; 0
	//xTaskCreate(motorTaak,"Motor Taak met input",256,NULL,3,NULL);
	xTaskCreate(motorTaak2,"Motor Taak zonder input",256,NULL,3,NULL);
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	51 e0       	ldi	r21, 0x01	; 1
     ffc:	63 e7       	ldi	r22, 0x73	; 115
     ffe:	72 e0       	ldi	r23, 0x02	; 2
    1000:	82 e4       	ldi	r24, 0x42	; 66
    1002:	98 e0       	ldi	r25, 0x08	; 8
    1004:	cb d5       	rcall	.+2966   	; 0x1b9c <xTaskCreate>
	xTaskCreate(watchdogTaak,"watchdog reset",256,NULL,4,NULL);
    1006:	04 e0       	ldi	r16, 0x04	; 4
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	51 e0       	ldi	r21, 0x01	; 1
    1010:	6b e8       	ldi	r22, 0x8B	; 139
    1012:	72 e0       	ldi	r23, 0x02	; 2
    1014:	85 e7       	ldi	r24, 0x75	; 117
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	c1 d5       	rcall	.+2946   	; 0x1b9c <xTaskCreate>
    101a:	d4 d6       	rcall	.+3496   	; 0x1dc4 <vTaskStartScheduler>

	vTaskStartScheduler();
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
}
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	08 95       	ret

00001028 <setSpeed>:
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
	PORTC &= ~(1 << L_PLUS);
	PORTD &= ~(1 << L_MIN);
}

void setSpeed(uint8_t speed)
{
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
	itoa(speed, send, 10);
    1030:	08 2f       	mov	r16, r24
    1032:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1034:	4a e0       	ldi	r20, 0x0A	; 10
    1036:	6c e3       	ldi	r22, 0x3C	; 60
    1038:	74 e0       	ldi	r23, 0x04	; 4
    103a:	c8 01       	movw	r24, r16
    103c:	0e 94 a2 14 	call	0x2944	; 0x2944 <__itoa_ncheck>
	UART_Transmit_String(send);
    1040:	8c e3       	ldi	r24, 0x3C	; 60
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	98 db       	rcall	.-2256   	; 0x776 <UART_Transmit_String>
	uint16_t newSpeed = 20000 - (20000 / 100 * speed);
    1046:	88 e3       	ldi	r24, 0x38	; 56
    1048:	80 9f       	mul	r24, r16
    104a:	e0 01       	movw	r28, r0
    104c:	81 9f       	mul	r24, r17
    104e:	d0 0d       	add	r29, r0
    1050:	d0 1b       	sub	r29, r16
    1052:	11 24       	eor	r1, r1
    1054:	c0 5e       	subi	r28, 0xE0	; 224
    1056:	d1 4b       	sbci	r29, 0xB1	; 177
    1058:	4a e0       	ldi	r20, 0x0A	; 10
    105a:	6c e3       	ldi	r22, 0x3C	; 60
    105c:	74 e0       	ldi	r23, 0x04	; 4
    105e:	ce 01       	movw	r24, r28
    1060:	0e 94 a2 14 	call	0x2944	; 0x2944 <__itoa_ncheck>
	itoa(newSpeed, send, 10);
	UART_Transmit_String(send);
    1064:	8c e3       	ldi	r24, 0x3C	; 60
    1066:	94 e0       	ldi	r25, 0x04	; 4
    1068:	86 db       	rcall	.-2292   	; 0x776 <UART_Transmit_String>
	OCR5A = newSpeed;
    106a:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    106e:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5C = newSpeed;
    1072:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    1076:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	08 95       	ret

00001084 <motorTaak2>:

	vTaskStartScheduler();
}

void motorTaak2(){
	setSpeed(20);
    1084:	84 e1       	ldi	r24, 0x14	; 20
    1086:	d0 df       	rcall	.-96     	; 0x1028 <setSpeed>
    1088:	ff cf       	rjmp	.-2      	; 0x1088 <motorTaak2+0x4>

0000108a <pxPortInitialiseStack>:

#if defined (portUSE_WDTO)
        wdt_disable();											// disable Watchdog Timer

#elif defined( portUSE_TIMER0 )
        portTIMSK &= ~( _BV(OCIE0B)|_BV(OCIE0A)|_BV(TOIE0) );	// disable all Timer0 interrupts
    108a:	31 e1       	ldi	r19, 0x11	; 17
    108c:	fc 01       	movw	r30, r24
    108e:	30 83       	st	Z, r19
    1090:	31 97       	sbiw	r30, 0x01	; 1
    1092:	22 e2       	ldi	r18, 0x22	; 34
    1094:	20 83       	st	Z, r18
    1096:	31 97       	sbiw	r30, 0x01	; 1
    1098:	a3 e3       	ldi	r26, 0x33	; 51
    109a:	a0 83       	st	Z, r26
    109c:	31 97       	sbiw	r30, 0x01	; 1
    109e:	60 83       	st	Z, r22
    10a0:	31 97       	sbiw	r30, 0x01	; 1
    10a2:	70 83       	st	Z, r23
    10a4:	31 97       	sbiw	r30, 0x01	; 1
    10a6:	10 82       	st	Z, r1
    10a8:	31 97       	sbiw	r30, 0x01	; 1
    10aa:	10 82       	st	Z, r1
    10ac:	31 97       	sbiw	r30, 0x01	; 1
    10ae:	60 e8       	ldi	r22, 0x80	; 128
    10b0:	60 83       	st	Z, r22
    10b2:	31 97       	sbiw	r30, 0x01	; 1
    10b4:	10 82       	st	Z, r1
    10b6:	31 97       	sbiw	r30, 0x01	; 1
    10b8:	10 82       	st	Z, r1
    10ba:	31 97       	sbiw	r30, 0x01	; 1
    10bc:	10 82       	st	Z, r1
    10be:	31 97       	sbiw	r30, 0x01	; 1
    10c0:	62 e0       	ldi	r22, 0x02	; 2
    10c2:	60 83       	st	Z, r22
    10c4:	31 97       	sbiw	r30, 0x01	; 1
    10c6:	63 e0       	ldi	r22, 0x03	; 3
    10c8:	60 83       	st	Z, r22
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	64 e0       	ldi	r22, 0x04	; 4
    10ce:	60 83       	st	Z, r22
    10d0:	31 97       	sbiw	r30, 0x01	; 1
    10d2:	65 e0       	ldi	r22, 0x05	; 5
    10d4:	60 83       	st	Z, r22
    10d6:	31 97       	sbiw	r30, 0x01	; 1
    10d8:	66 e0       	ldi	r22, 0x06	; 6
    10da:	60 83       	st	Z, r22
    10dc:	31 97       	sbiw	r30, 0x01	; 1
    10de:	67 e0       	ldi	r22, 0x07	; 7
    10e0:	60 83       	st	Z, r22
    10e2:	31 97       	sbiw	r30, 0x01	; 1
    10e4:	68 e0       	ldi	r22, 0x08	; 8
    10e6:	60 83       	st	Z, r22
    10e8:	31 97       	sbiw	r30, 0x01	; 1
    10ea:	69 e0       	ldi	r22, 0x09	; 9
    10ec:	60 83       	st	Z, r22
    10ee:	31 97       	sbiw	r30, 0x01	; 1
    10f0:	60 e1       	ldi	r22, 0x10	; 16
    10f2:	60 83       	st	Z, r22
    10f4:	31 97       	sbiw	r30, 0x01	; 1
    10f6:	30 83       	st	Z, r19
    10f8:	31 97       	sbiw	r30, 0x01	; 1
    10fa:	32 e1       	ldi	r19, 0x12	; 18
    10fc:	30 83       	st	Z, r19
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	33 e1       	ldi	r19, 0x13	; 19
    1102:	30 83       	st	Z, r19
    1104:	31 97       	sbiw	r30, 0x01	; 1
    1106:	34 e1       	ldi	r19, 0x14	; 20
    1108:	30 83       	st	Z, r19
    110a:	31 97       	sbiw	r30, 0x01	; 1
    110c:	35 e1       	ldi	r19, 0x15	; 21
    110e:	30 83       	st	Z, r19
    1110:	31 97       	sbiw	r30, 0x01	; 1
    1112:	36 e1       	ldi	r19, 0x16	; 22
    1114:	30 83       	st	Z, r19
    1116:	31 97       	sbiw	r30, 0x01	; 1
    1118:	37 e1       	ldi	r19, 0x17	; 23
    111a:	30 83       	st	Z, r19
    111c:	31 97       	sbiw	r30, 0x01	; 1
    111e:	38 e1       	ldi	r19, 0x18	; 24
    1120:	30 83       	st	Z, r19
    1122:	31 97       	sbiw	r30, 0x01	; 1
    1124:	39 e1       	ldi	r19, 0x19	; 25
    1126:	30 83       	st	Z, r19
    1128:	31 97       	sbiw	r30, 0x01	; 1
    112a:	30 e2       	ldi	r19, 0x20	; 32
    112c:	30 83       	st	Z, r19
    112e:	31 97       	sbiw	r30, 0x01	; 1
    1130:	31 e2       	ldi	r19, 0x21	; 33
    1132:	30 83       	st	Z, r19
    1134:	31 97       	sbiw	r30, 0x01	; 1
    1136:	20 83       	st	Z, r18
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	23 e2       	ldi	r18, 0x23	; 35
    113c:	20 83       	st	Z, r18
    113e:	31 97       	sbiw	r30, 0x01	; 1
    1140:	40 83       	st	Z, r20
    1142:	31 97       	sbiw	r30, 0x01	; 1
    1144:	50 83       	st	Z, r21
    1146:	31 97       	sbiw	r30, 0x01	; 1
    1148:	26 e2       	ldi	r18, 0x26	; 38
    114a:	20 83       	st	Z, r18
    114c:	31 97       	sbiw	r30, 0x01	; 1
    114e:	27 e2       	ldi	r18, 0x27	; 39
    1150:	20 83       	st	Z, r18
    1152:	31 97       	sbiw	r30, 0x01	; 1
    1154:	28 e2       	ldi	r18, 0x28	; 40
    1156:	20 83       	st	Z, r18
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	29 e2       	ldi	r18, 0x29	; 41
    115c:	20 83       	st	Z, r18
    115e:	31 97       	sbiw	r30, 0x01	; 1
    1160:	20 e3       	ldi	r18, 0x30	; 48
    1162:	20 83       	st	Z, r18
    1164:	31 97       	sbiw	r30, 0x01	; 1
    1166:	21 e3       	ldi	r18, 0x31	; 49
    1168:	20 83       	st	Z, r18
    116a:	89 97       	sbiw	r24, 0x29	; 41
    116c:	08 95       	ret

0000116e <xPortStartScheduler>:
    116e:	88 ec       	ldi	r24, 0xC8	; 200
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <portTickRateHz+0x1>
    1176:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <portTickRateHz>
    117a:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <ticksRemainingInSec+0x1>
    117e:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <ticksRemainingInSec>
    1182:	8d e4       	ldi	r24, 0x4D	; 77
    1184:	87 bd       	out	0x27, r24	; 39
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	84 bd       	out	0x24, r24	; 36
    118a:	85 e0       	ldi	r24, 0x05	; 5
    118c:	85 bd       	out	0x25, r24	; 37
    118e:	ee e6       	ldi	r30, 0x6E	; 110
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	82 60       	ori	r24, 0x02	; 2
    1196:	80 83       	st	Z, r24
    1198:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
    119c:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    11a0:	cd 91       	ld	r28, X+
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	dd 91       	ld	r29, X+
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	ff 91       	pop	r31
    11aa:	ef 91       	pop	r30
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	7f 90       	pop	r7
    11da:	6f 90       	pop	r6
    11dc:	5f 90       	pop	r5
    11de:	4f 90       	pop	r4
    11e0:	3f 90       	pop	r3
    11e2:	2f 90       	pop	r2
    11e4:	1f 90       	pop	r1
    11e6:	0f 90       	pop	r0
    11e8:	0c be       	out	0x3c, r0	; 60
    11ea:	0f 90       	pop	r0
    11ec:	0b be       	out	0x3b, r0	; 59
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	08 95       	ret
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	08 95       	ret

000011fa <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	0f 92       	push	r0
    1202:	0b b6       	in	r0, 0x3b	; 59
    1204:	0f 92       	push	r0
    1206:	0c b6       	in	r0, 0x3c	; 60
    1208:	0f 92       	push	r0
    120a:	1f 92       	push	r1
    120c:	11 24       	eor	r1, r1
    120e:	2f 92       	push	r2
    1210:	3f 92       	push	r3
    1212:	4f 92       	push	r4
    1214:	5f 92       	push	r5
    1216:	6f 92       	push	r6
    1218:	7f 92       	push	r7
    121a:	8f 92       	push	r8
    121c:	9f 92       	push	r9
    121e:	af 92       	push	r10
    1220:	bf 92       	push	r11
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	2f 93       	push	r18
    1230:	3f 93       	push	r19
    1232:	4f 93       	push	r20
    1234:	5f 93       	push	r21
    1236:	6f 93       	push	r22
    1238:	7f 93       	push	r23
    123a:	8f 93       	push	r24
    123c:	9f 93       	push	r25
    123e:	af 93       	push	r26
    1240:	bf 93       	push	r27
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
    124a:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
    124e:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1252:	0d b6       	in	r0, 0x3d	; 61
    1254:	0d 92       	st	X+, r0
    1256:	0e b6       	in	r0, 0x3e	; 62
    1258:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    125a:	18 d7       	rcall	.+3632   	; 0x208c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    125c:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
    1260:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1264:	cd 91       	ld	r28, X+
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	dd 91       	ld	r29, X+
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	9f 90       	pop	r9
    129a:	8f 90       	pop	r8
    129c:	7f 90       	pop	r7
    129e:	6f 90       	pop	r6
    12a0:	5f 90       	pop	r5
    12a2:	4f 90       	pop	r4
    12a4:	3f 90       	pop	r3
    12a6:	2f 90       	pop	r2
    12a8:	1f 90       	pop	r1
    12aa:	0f 90       	pop	r0
    12ac:	0c be       	out	0x3c, r0	; 60
    12ae:	0f 90       	pop	r0
    12b0:	0b be       	out	0x3b, r0	; 59
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    12b8:	08 95       	ret

000012ba <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	0f 92       	push	r0
    12c2:	0b b6       	in	r0, 0x3b	; 59
    12c4:	0f 92       	push	r0
    12c6:	0c b6       	in	r0, 0x3c	; 60
    12c8:	0f 92       	push	r0
    12ca:	1f 92       	push	r1
    12cc:	11 24       	eor	r1, r1
    12ce:	2f 92       	push	r2
    12d0:	3f 92       	push	r3
    12d2:	4f 92       	push	r4
    12d4:	5f 92       	push	r5
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	af 92       	push	r10
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	2f 93       	push	r18
    12f0:	3f 93       	push	r19
    12f2:	4f 93       	push	r20
    12f4:	5f 93       	push	r21
    12f6:	6f 93       	push	r22
    12f8:	7f 93       	push	r23
    12fa:	8f 93       	push	r24
    12fc:	9f 93       	push	r25
    12fe:	af 93       	push	r26
    1300:	bf 93       	push	r27
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	ef 93       	push	r30
    1308:	ff 93       	push	r31
    130a:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
    130e:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1312:	0d b6       	in	r0, 0x3d	; 61
    1314:	0d 92       	st	X+, r0
    1316:	0e b6       	in	r0, 0x3e	; 62
    1318:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    131a:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
    131c:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <ticksRemainingInSec>
    1320:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <ticksRemainingInSec+0x1>
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <ticksRemainingInSec+0x1>
    132a:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <ticksRemainingInSec>
    132e:	89 2b       	or	r24, r25
    1330:	51 f4       	brne	.+20     	; 0x1346 <vPortYieldFromTick+0x8c>
	{
		system_tick();
    1332:	0e 94 8e 01 	call	0x31c	; 0x31c <system_tick>
		ticksRemainingInSec = portTickRateHz;
    1336:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <portTickRateHz>
    133a:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <portTickRateHz+0x1>
    133e:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <ticksRemainingInSec+0x1>
    1342:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <ticksRemainingInSec>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
    1346:	6c d5       	rcall	.+2776   	; 0x1e20 <xTaskIncrementTick>
    1348:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    134a:	a0 d6       	rcall	.+3392   	; 0x208c <vTaskSwitchContext>
    134c:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
    1350:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1354:	cd 91       	ld	r28, X+
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	dd 91       	ld	r29, X+
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	df 90       	pop	r13
    1382:	cf 90       	pop	r12
    1384:	bf 90       	pop	r11
    1386:	af 90       	pop	r10
    1388:	9f 90       	pop	r9
    138a:	8f 90       	pop	r8
    138c:	7f 90       	pop	r7
    138e:	6f 90       	pop	r6
    1390:	5f 90       	pop	r5
    1392:	4f 90       	pop	r4
    1394:	3f 90       	pop	r3
    1396:	2f 90       	pop	r2
    1398:	1f 90       	pop	r1
    139a:	0f 90       	pop	r0
    139c:	0c be       	out	0x3c, r0	; 60
    139e:	0f 90       	pop	r0
    13a0:	0b be       	out	0x3b, r0	; 59
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	0f 90       	pop	r0
    13a8:	08 95       	ret

000013aa <__vector_21>:

	__asm__ __volatile__ ( "ret" );
    13aa:	87 df       	rcall	.-242    	; 0x12ba <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    13ac:	18 95       	reti

000013ae <prvCopyDataToQueue>:
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
	}
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	ec 01       	movw	r28, r24
    13b8:	04 2f       	mov	r16, r20
    13ba:	1a 8d       	ldd	r17, Y+26	; 0x1a
    13bc:	4c 8d       	ldd	r20, Y+28	; 0x1c
    13be:	41 11       	cpse	r20, r1
    13c0:	0b c0       	rjmp	.+22     	; 0x13d8 <prvCopyDataToQueue+0x2a>
    13c2:	88 81       	ld	r24, Y
    13c4:	99 81       	ldd	r25, Y+1	; 0x01
    13c6:	89 2b       	or	r24, r25
    13c8:	09 f0       	breq	.+2      	; 0x13cc <prvCopyDataToQueue+0x1e>
    13ca:	41 c0       	rjmp	.+130    	; 0x144e <prvCopyDataToQueue+0xa0>
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	7e d7       	rcall	.+3836   	; 0x22ce <xTaskPriorityDisinherit>
    13d2:	1b 82       	std	Y+3, r1	; 0x03
    13d4:	1a 82       	std	Y+2, r1	; 0x02
    13d6:	42 c0       	rjmp	.+132    	; 0x145c <prvCopyDataToQueue+0xae>
    13d8:	01 11       	cpse	r16, r1
    13da:	17 c0       	rjmp	.+46     	; 0x140a <prvCopyDataToQueue+0x5c>
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	0e 94 92 14 	call	0x2924	; 0x2924 <memcpy>
    13e6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	82 0f       	add	r24, r18
    13ee:	91 1d       	adc	r25, r1
    13f0:	9d 83       	std	Y+5, r25	; 0x05
    13f2:	8c 83       	std	Y+4, r24	; 0x04
    13f4:	2a 81       	ldd	r18, Y+2	; 0x02
    13f6:	3b 81       	ldd	r19, Y+3	; 0x03
    13f8:	82 17       	cp	r24, r18
    13fa:	93 07       	cpc	r25, r19
    13fc:	50 f1       	brcs	.+84     	; 0x1452 <prvCopyDataToQueue+0xa4>
    13fe:	88 81       	ld	r24, Y
    1400:	99 81       	ldd	r25, Y+1	; 0x01
    1402:	9d 83       	std	Y+5, r25	; 0x05
    1404:	8c 83       	std	Y+4, r24	; 0x04
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	29 c0       	rjmp	.+82     	; 0x145c <prvCopyDataToQueue+0xae>
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	8e 81       	ldd	r24, Y+6	; 0x06
    140e:	9f 81       	ldd	r25, Y+7	; 0x07
    1410:	0e 94 92 14 	call	0x2924	; 0x2924 <memcpy>
    1414:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	91 95       	neg	r25
    141a:	81 95       	neg	r24
    141c:	91 09       	sbc	r25, r1
    141e:	2e 81       	ldd	r18, Y+6	; 0x06
    1420:	3f 81       	ldd	r19, Y+7	; 0x07
    1422:	28 0f       	add	r18, r24
    1424:	39 1f       	adc	r19, r25
    1426:	3f 83       	std	Y+7, r19	; 0x07
    1428:	2e 83       	std	Y+6, r18	; 0x06
    142a:	48 81       	ld	r20, Y
    142c:	59 81       	ldd	r21, Y+1	; 0x01
    142e:	24 17       	cp	r18, r20
    1430:	35 07       	cpc	r19, r21
    1432:	30 f4       	brcc	.+12     	; 0x1440 <prvCopyDataToQueue+0x92>
    1434:	2a 81       	ldd	r18, Y+2	; 0x02
    1436:	3b 81       	ldd	r19, Y+3	; 0x03
    1438:	82 0f       	add	r24, r18
    143a:	93 1f       	adc	r25, r19
    143c:	9f 83       	std	Y+7, r25	; 0x07
    143e:	8e 83       	std	Y+6, r24	; 0x06
    1440:	02 30       	cpi	r16, 0x02	; 2
    1442:	49 f4       	brne	.+18     	; 0x1456 <prvCopyDataToQueue+0xa8>
    1444:	11 23       	and	r17, r17
    1446:	49 f0       	breq	.+18     	; 0x145a <prvCopyDataToQueue+0xac>
    1448:	11 50       	subi	r17, 0x01	; 1
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	07 c0       	rjmp	.+14     	; 0x145c <prvCopyDataToQueue+0xae>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	05 c0       	rjmp	.+10     	; 0x145c <prvCopyDataToQueue+0xae>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	03 c0       	rjmp	.+6      	; 0x145c <prvCopyDataToQueue+0xae>
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	01 c0       	rjmp	.+2      	; 0x145c <prvCopyDataToQueue+0xae>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	1f 5f       	subi	r17, 0xFF	; 255
    145e:	1a 8f       	std	Y+26, r17	; 0x1a
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <prvUnlockQueue>:
    146a:	ef 92       	push	r14
    146c:	ff 92       	push	r15
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	8c 01       	movw	r16, r24
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	0f 92       	push	r0
    147c:	fc 01       	movw	r30, r24
    147e:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1480:	1c 16       	cp	r1, r28
    1482:	9c f4       	brge	.+38     	; 0x14aa <prvUnlockQueue+0x40>
    1484:	81 89       	ldd	r24, Z+17	; 0x11
    1486:	81 11       	cpse	r24, r1
    1488:	06 c0       	rjmp	.+12     	; 0x1496 <prvUnlockQueue+0x2c>
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <prvUnlockQueue+0x40>
    148c:	f8 01       	movw	r30, r16
    148e:	81 89       	ldd	r24, Z+17	; 0x11
    1490:	81 11       	cpse	r24, r1
    1492:	05 c0       	rjmp	.+10     	; 0x149e <prvUnlockQueue+0x34>
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <prvUnlockQueue+0x40>
    1496:	78 01       	movw	r14, r16
    1498:	f1 e1       	ldi	r31, 0x11	; 17
    149a:	ef 0e       	add	r14, r31
    149c:	f1 1c       	adc	r15, r1
    149e:	c7 01       	movw	r24, r14
    14a0:	87 d6       	rcall	.+3342   	; 0x21b0 <xTaskRemoveFromEventList>
    14a2:	81 11       	cpse	r24, r1
    14a4:	10 d7       	rcall	.+3616   	; 0x22c6 <vTaskMissedYield>
    14a6:	c1 50       	subi	r28, 0x01	; 1
    14a8:	89 f7       	brne	.-30     	; 0x148c <prvUnlockQueue+0x22>
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	f8 01       	movw	r30, r16
    14ae:	86 8f       	std	Z+30, r24	; 0x1e
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	0f 92       	push	r0
    14ba:	c5 8d       	ldd	r28, Z+29	; 0x1d
    14bc:	1c 16       	cp	r1, r28
    14be:	9c f4       	brge	.+38     	; 0x14e6 <prvUnlockQueue+0x7c>
    14c0:	80 85       	ldd	r24, Z+8	; 0x08
    14c2:	81 11       	cpse	r24, r1
    14c4:	06 c0       	rjmp	.+12     	; 0x14d2 <prvUnlockQueue+0x68>
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <prvUnlockQueue+0x7c>
    14c8:	f8 01       	movw	r30, r16
    14ca:	80 85       	ldd	r24, Z+8	; 0x08
    14cc:	81 11       	cpse	r24, r1
    14ce:	05 c0       	rjmp	.+10     	; 0x14da <prvUnlockQueue+0x70>
    14d0:	0a c0       	rjmp	.+20     	; 0x14e6 <prvUnlockQueue+0x7c>
    14d2:	78 01       	movw	r14, r16
    14d4:	f8 e0       	ldi	r31, 0x08	; 8
    14d6:	ef 0e       	add	r14, r31
    14d8:	f1 1c       	adc	r15, r1
    14da:	c7 01       	movw	r24, r14
    14dc:	69 d6       	rcall	.+3282   	; 0x21b0 <xTaskRemoveFromEventList>
    14de:	81 11       	cpse	r24, r1
    14e0:	f2 d6       	rcall	.+3556   	; 0x22c6 <vTaskMissedYield>
    14e2:	c1 50       	subi	r28, 0x01	; 1
    14e4:	89 f7       	brne	.-30     	; 0x14c8 <prvUnlockQueue+0x5e>
    14e6:	8f ef       	ldi	r24, 0xFF	; 255
    14e8:	f8 01       	movw	r30, r16
    14ea:	85 8f       	std	Z+29, r24	; 0x1d
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	08 95       	ret

000014fc <xQueueGenericReset>:
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	ec 01       	movw	r28, r24
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	0f 92       	push	r0
    1508:	48 81       	ld	r20, Y
    150a:	59 81       	ldd	r21, Y+1	; 0x01
    150c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1512:	72 9f       	mul	r23, r18
    1514:	c0 01       	movw	r24, r0
    1516:	73 9f       	mul	r23, r19
    1518:	90 0d       	add	r25, r0
    151a:	11 24       	eor	r1, r1
    151c:	fa 01       	movw	r30, r20
    151e:	e8 0f       	add	r30, r24
    1520:	f9 1f       	adc	r31, r25
    1522:	fb 83       	std	Y+3, r31	; 0x03
    1524:	ea 83       	std	Y+2, r30	; 0x02
    1526:	1a 8e       	std	Y+26, r1	; 0x1a
    1528:	5d 83       	std	Y+5, r21	; 0x05
    152a:	4c 83       	std	Y+4, r20	; 0x04
    152c:	82 1b       	sub	r24, r18
    152e:	93 0b       	sbc	r25, r19
    1530:	84 0f       	add	r24, r20
    1532:	95 1f       	adc	r25, r21
    1534:	9f 83       	std	Y+7, r25	; 0x07
    1536:	8e 83       	std	Y+6, r24	; 0x06
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	8d 8f       	std	Y+29, r24	; 0x1d
    153c:	8e 8f       	std	Y+30, r24	; 0x1e
    153e:	61 11       	cpse	r22, r1
    1540:	0a c0       	rjmp	.+20     	; 0x1556 <xQueueGenericReset+0x5a>
    1542:	88 85       	ldd	r24, Y+8	; 0x08
    1544:	88 23       	and	r24, r24
    1546:	69 f0       	breq	.+26     	; 0x1562 <xQueueGenericReset+0x66>
    1548:	ce 01       	movw	r24, r28
    154a:	08 96       	adiw	r24, 0x08	; 8
    154c:	31 d6       	rcall	.+3170   	; 0x21b0 <xTaskRemoveFromEventList>
    154e:	88 23       	and	r24, r24
    1550:	41 f0       	breq	.+16     	; 0x1562 <xQueueGenericReset+0x66>
    1552:	53 de       	rcall	.-858    	; 0x11fa <vPortYield>
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <xQueueGenericReset+0x66>
    1556:	ce 01       	movw	r24, r28
    1558:	08 96       	adiw	r24, 0x08	; 8
    155a:	3d d8       	rcall	.-3974   	; 0x5d6 <vListInitialise>
    155c:	ce 01       	movw	r24, r28
    155e:	41 96       	adiw	r24, 0x11	; 17
    1560:	3a d8       	rcall	.-3980   	; 0x5d6 <vListInitialise>
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <xQueueGenericCreate>:
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	08 2f       	mov	r16, r24
    1578:	16 2f       	mov	r17, r22
    157a:	66 23       	and	r22, r22
    157c:	b9 f0       	breq	.+46     	; 0x15ac <xQueueGenericCreate+0x3e>
    157e:	86 9f       	mul	r24, r22
    1580:	c0 01       	movw	r24, r0
    1582:	11 24       	eor	r1, r1
    1584:	4f 96       	adiw	r24, 0x1f	; 31
    1586:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    158a:	ec 01       	movw	r28, r24
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	39 f4       	brne	.+14     	; 0x159e <xQueueGenericCreate+0x30>
    1590:	14 c0       	rjmp	.+40     	; 0x15ba <xQueueGenericCreate+0x4c>
    1592:	0b 8f       	std	Y+27, r16	; 0x1b
    1594:	1c 8f       	std	Y+28, r17	; 0x1c
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	ce 01       	movw	r24, r28
    159a:	b0 df       	rcall	.-160    	; 0x14fc <xQueueGenericReset>
    159c:	0e c0       	rjmp	.+28     	; 0x15ba <xQueueGenericCreate+0x4c>
    159e:	4f 96       	adiw	r24, 0x1f	; 31
    15a0:	99 83       	std	Y+1, r25	; 0x01
    15a2:	88 83       	st	Y, r24
    15a4:	f6 cf       	rjmp	.-20     	; 0x1592 <xQueueGenericCreate+0x24>
    15a6:	d9 83       	std	Y+1, r29	; 0x01
    15a8:	c8 83       	st	Y, r28
    15aa:	f3 cf       	rjmp	.-26     	; 0x1592 <xQueueGenericCreate+0x24>
    15ac:	8f e1       	ldi	r24, 0x1F	; 31
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    15b4:	ec 01       	movw	r28, r24
    15b6:	89 2b       	or	r24, r25
    15b8:	b1 f7       	brne	.-20     	; 0x15a6 <xQueueGenericCreate+0x38>
    15ba:	ce 01       	movw	r24, r28
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	08 95       	ret

000015c6 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    15c6:	9f 92       	push	r9
    15c8:	af 92       	push	r10
    15ca:	bf 92       	push	r11
    15cc:	cf 92       	push	r12
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	00 d0       	rcall	.+0      	; 0x15de <xQueueGenericSend+0x18>
    15de:	1f 92       	push	r1
    15e0:	1f 92       	push	r1
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	8c 01       	movw	r16, r24
    15e8:	6b 01       	movw	r12, r22
    15ea:	5d 83       	std	Y+5, r21	; 0x05
    15ec:	4c 83       	std	Y+4, r20	; 0x04
    15ee:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    15f0:	b1 2c       	mov	r11, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    15f2:	99 24       	eor	r9, r9
    15f4:	93 94       	inc	r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    15f6:	7c 01       	movw	r14, r24
    15f8:	88 e0       	ldi	r24, 0x08	; 8
    15fa:	e8 0e       	add	r14, r24
    15fc:	f1 1c       	adc	r15, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1604:	f8 01       	movw	r30, r16
    1606:	92 8d       	ldd	r25, Z+26	; 0x1a
    1608:	83 8d       	ldd	r24, Z+27	; 0x1b
    160a:	98 17       	cp	r25, r24
    160c:	18 f0       	brcs	.+6      	; 0x1614 <xQueueGenericSend+0x4e>
    160e:	f2 e0       	ldi	r31, 0x02	; 2
    1610:	af 12       	cpse	r10, r31
    1612:	15 c0       	rjmp	.+42     	; 0x163e <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1614:	4a 2d       	mov	r20, r10
    1616:	b6 01       	movw	r22, r12
    1618:	c8 01       	movw	r24, r16
    161a:	c9 de       	rcall	.-622    	; 0x13ae <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    161c:	f8 01       	movw	r30, r16
    161e:	91 89       	ldd	r25, Z+17	; 0x11
    1620:	99 23       	and	r25, r25
    1622:	39 f0       	breq	.+14     	; 0x1632 <xQueueGenericSend+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1624:	c8 01       	movw	r24, r16
    1626:	41 96       	adiw	r24, 0x11	; 17
    1628:	c3 d5       	rcall	.+2950   	; 0x21b0 <xTaskRemoveFromEventList>
    162a:	88 23       	and	r24, r24
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    162c:	21 f0       	breq	.+8      	; 0x1636 <xQueueGenericSend+0x70>
    162e:	e5 dd       	rcall	.-1078   	; 0x11fa <vPortYield>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <xQueueGenericSend+0x70>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1632:	81 11       	cpse	r24, r1
    1634:	e2 dd       	rcall	.-1084   	; 0x11fa <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	45 c0       	rjmp	.+138    	; 0x16c8 <xQueueGenericSend+0x102>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    163e:	8c 81       	ldd	r24, Y+4	; 0x04
    1640:	9d 81       	ldd	r25, Y+5	; 0x05
    1642:	89 2b       	or	r24, r25
    1644:	21 f4       	brne	.+8      	; 0x164e <xQueueGenericSend+0x88>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	3d c0       	rjmp	.+122    	; 0x16c8 <xQueueGenericSend+0x102>
				}
				else if( xEntryTimeSet == pdFALSE )
    164e:	b1 10       	cpse	r11, r1
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1650:	04 c0       	rjmp	.+8      	; 0x165a <xQueueGenericSend+0x94>
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
					xEntryTimeSet = pdTRUE;
    1656:	f4 d5       	rcall	.+3048   	; 0x2240 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1658:	b9 2c       	mov	r11, r9
    165a:	0f 90       	pop	r0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	da d3       	rcall	.+1972   	; 0x1e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	0f 92       	push	r0
    1666:	f8 01       	movw	r30, r16
    1668:	85 8d       	ldd	r24, Z+29	; 0x1d
    166a:	8f 3f       	cpi	r24, 0xFF	; 255
    166c:	09 f4       	brne	.+2      	; 0x1670 <xQueueGenericSend+0xaa>
    166e:	15 8e       	std	Z+29, r1	; 0x1d
    1670:	f8 01       	movw	r30, r16
    1672:	86 8d       	ldd	r24, Z+30	; 0x1e
    1674:	8f 3f       	cpi	r24, 0xFF	; 255
    1676:	09 f4       	brne	.+2      	; 0x167a <xQueueGenericSend+0xb4>
    1678:	16 8e       	std	Z+30, r1	; 0x1e
    167a:	0f 90       	pop	r0

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	be 01       	movw	r22, r28
    1680:	6c 5f       	subi	r22, 0xFC	; 252
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	ce 01       	movw	r24, r28
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	e6 d5       	rcall	.+3020   	; 0x2256 <xTaskCheckForTimeOut>
    168a:	81 11       	cpse	r24, r1
    168c:	19 c0       	rjmp	.+50     	; 0x16c0 <xQueueGenericSend+0xfa>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1694:	f8 01       	movw	r30, r16
    1696:	92 8d       	ldd	r25, Z+26	; 0x1a
    1698:	83 8d       	ldd	r24, Z+27	; 0x1b
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    169a:	0f 90       	pop	r0
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    169c:	0f be       	out	0x3f, r0	; 63
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    169e:	98 13       	cpse	r25, r24
    16a0:	0b c0       	rjmp	.+22     	; 0x16b8 <xQueueGenericSend+0xf2>
    16a2:	6c 81       	ldd	r22, Y+4	; 0x04
    16a4:	7d 81       	ldd	r23, Y+5	; 0x05
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    16a6:	c7 01       	movw	r24, r14
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    16a8:	72 d5       	rcall	.+2788   	; 0x218e <vTaskPlaceOnEventList>
    16aa:	c8 01       	movw	r24, r16
				{
					portYIELD_WITHIN_API();
    16ac:	de de       	rcall	.-580    	; 0x146a <prvUnlockQueue>
    16ae:	72 d4       	rcall	.+2276   	; 0x1f94 <xTaskResumeAll>
    16b0:	81 11       	cpse	r24, r1
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    16b2:	a5 cf       	rjmp	.-182    	; 0x15fe <xQueueGenericSend+0x38>
    16b4:	a2 dd       	rcall	.-1212   	; 0x11fa <vPortYield>
    16b6:	a3 cf       	rjmp	.-186    	; 0x15fe <xQueueGenericSend+0x38>
				( void ) xTaskResumeAll();
    16b8:	c8 01       	movw	r24, r16
    16ba:	d7 de       	rcall	.-594    	; 0x146a <prvUnlockQueue>
    16bc:	6b d4       	rcall	.+2262   	; 0x1f94 <xTaskResumeAll>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    16be:	9f cf       	rjmp	.-194    	; 0x15fe <xQueueGenericSend+0x38>
    16c0:	c8 01       	movw	r24, r16
    16c2:	d3 de       	rcall	.-602    	; 0x146a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    16c4:	67 d4       	rcall	.+2254   	; 0x1f94 <xTaskResumeAll>
    16c6:	80 e0       	ldi	r24, 0x00	; 0

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    16c8:	0f 90       	pop	r0
		}
	}
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	9f 90       	pop	r9
    16e8:	08 95       	ret

000016ea <__vector_26>:
    16ea:	1f 92       	push	r1
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    16ec:	0f 92       	push	r0
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	0f 92       	push	r0
    16f2:	11 24       	eor	r1, r1
    16f4:	0b b6       	in	r0, 0x3b	; 59
    16f6:	0f 92       	push	r0
    16f8:	2f 93       	push	r18
    16fa:	8f 93       	push	r24
    16fc:	9f 93       	push	r25
    16fe:	af 93       	push	r26
    1700:	bf 93       	push	r27
    1702:	ef 93       	push	r30
    1704:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	0f 92       	push	r0
	{
	    count = buffer->count;
    170c:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <xSerialPort+0xd>
    1710:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    1718:	89 2b       	or	r24, r25
    171a:	31 f4       	brne	.+12     	; 0x1728 <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    171c:	e1 ec       	ldi	r30, 0xC1	; 193
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8f 7d       	andi	r24, 0xDF	; 223
    1724:	80 83       	st	Z, r24
    1726:	1c c0       	rjmp	.+56     	; 0x1760 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1728:	e0 e8       	ldi	r30, 0x80	; 128
    172a:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    172c:	a4 81       	ldd	r26, Z+4	; 0x04
    172e:	b5 81       	ldd	r27, Z+5	; 0x05
    1730:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1732:	b5 83       	std	Z+5, r27	; 0x05
    1734:	a4 83       	std	Z+4, r26	; 0x04
    1736:	80 85       	ldd	r24, Z+8	; 0x08
    1738:	91 85       	ldd	r25, Z+9	; 0x09
    173a:	a8 17       	cp	r26, r24
    173c:	b9 07       	cpc	r27, r25
    173e:	21 f4       	brne	.+8      	; 0x1748 <__vector_26+0x5e>
	  buffer->out = buffer->start;
    1740:	86 81       	ldd	r24, Z+6	; 0x06
    1742:	97 81       	ldd	r25, Z+7	; 0x07
    1744:	95 83       	std	Z+5, r25	; 0x05
    1746:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	0f 92       	push	r0
	{
	    buffer->count--;
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    175c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    1760:	ff 91       	pop	r31
    1762:	ef 91       	pop	r30
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	2f 91       	pop	r18
    176e:	0f 90       	pop	r0
    1770:	0b be       	out	0x3b, r0	; 59
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_37>:
//}
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	0b b6       	in	r0, 0x3b	; 59
    1788:	0f 92       	push	r0
    178a:	2f 93       	push	r18
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	ef 93       	push	r30
    1796:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	0f 92       	push	r0
	{
	    count = buffer->count;
    179e:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <xSerial1Port+0xd>
    17a2:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    17a6:	0f 90       	pop	r0
    17a8:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    17aa:	89 2b       	or	r24, r25
    17ac:	31 f4       	brne	.+12     	; 0x17ba <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    17ae:	e9 ec       	ldi	r30, 0xC9	; 201
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8f 7d       	andi	r24, 0xDF	; 223
    17b6:	80 83       	st	Z, r24
    17b8:	1c c0       	rjmp	.+56     	; 0x17f2 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    17ba:	e6 ee       	ldi	r30, 0xE6	; 230
    17bc:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    17be:	a4 81       	ldd	r26, Z+4	; 0x04
    17c0:	b5 81       	ldd	r27, Z+5	; 0x05
    17c2:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    17c4:	b5 83       	std	Z+5, r27	; 0x05
    17c6:	a4 83       	std	Z+4, r26	; 0x04
    17c8:	80 85       	ldd	r24, Z+8	; 0x08
    17ca:	91 85       	ldd	r25, Z+9	; 0x09
    17cc:	a8 17       	cp	r26, r24
    17ce:	b9 07       	cpc	r27, r25
    17d0:	21 f4       	brne	.+8      	; 0x17da <__vector_37+0x5e>
	  buffer->out = buffer->start;
    17d2:	86 81       	ldd	r24, Z+6	; 0x06
    17d4:	97 81       	ldd	r25, Z+7	; 0x07
    17d6:	95 83       	std	Z+5, r25	; 0x05
    17d8:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	0f 92       	push	r0
	{
	    buffer->count--;
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    17ea:	0f 90       	pop	r0
    17ec:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    17ee:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    17f2:	ff 91       	pop	r31
    17f4:	ef 91       	pop	r30
    17f6:	bf 91       	pop	r27
    17f8:	af 91       	pop	r26
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	2f 91       	pop	r18
    1800:	0f 90       	pop	r0
    1802:	0b be       	out	0x3b, r0	; 59
    1804:	0f 90       	pop	r0
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	0f 90       	pop	r0
    180a:	1f 90       	pop	r1
    180c:	18 95       	reti

0000180e <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    180e:	1f 92       	push	r1
    1810:	0f 92       	push	r0
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	0f 92       	push	r0
    1816:	11 24       	eor	r1, r1
    1818:	0b b6       	in	r0, 0x3b	; 59
    181a:	0f 92       	push	r0
    181c:	2f 93       	push	r18
    181e:	3f 93       	push	r19
    1820:	4f 93       	push	r20
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    182e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1832:	8c 71       	andi	r24, 0x1C	; 28
    1834:	71 f0       	breq	.+28     	; 0x1852 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    1836:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    183a:	88 23       	and	r24, r24
    183c:	0c f0       	brlt	.+2      	; 0x1840 <__vector_51+0x32>
    183e:	36 c0       	rjmp	.+108    	; 0x18ac <__vector_51+0x9e>
    1840:	a6 ed       	ldi	r26, 0xD6	; 214
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e0 ed       	ldi	r30, 0xD0	; 208
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	8c 91       	ld	r24, X
    184a:	80 81       	ld	r24, Z
    184c:	88 23       	and	r24, r24
    184e:	e4 f3       	brlt	.-8      	; 0x1848 <__vector_51+0x3a>
    1850:	2d c0       	rjmp	.+90     	; 0x18ac <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    1852:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	0f 92       	push	r0
	{
	    count = buffer->count;
    185c:	e5 e9       	ldi	r30, 0x95	; 149
    185e:	f4 e0       	ldi	r31, 0x04	; 4
    1860:	21 81       	ldd	r18, Z+1	; 0x01
    1862:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    1868:	83 85       	ldd	r24, Z+11	; 0x0b
    186a:	94 85       	ldd	r25, Z+12	; 0x0c
    186c:	28 17       	cp	r18, r24
    186e:	39 07       	cpc	r19, r25
    1870:	e9 f0       	breq	.+58     	; 0x18ac <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1872:	e6 e9       	ldi	r30, 0x96	; 150
    1874:	f4 e0       	ldi	r31, 0x04	; 4

	*buffer->in = data;
    1876:	a2 81       	ldd	r26, Z+2	; 0x02
    1878:	b3 81       	ldd	r27, Z+3	; 0x03
    187a:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	93 83       	std	Z+3, r25	; 0x03
    1884:	82 83       	std	Z+2, r24	; 0x02
    1886:	20 85       	ldd	r18, Z+8	; 0x08
    1888:	31 85       	ldd	r19, Z+9	; 0x09
    188a:	82 17       	cp	r24, r18
    188c:	93 07       	cpc	r25, r19
    188e:	21 f4       	brne	.+8      	; 0x1898 <__vector_51+0x8a>
	  buffer->in = buffer->start;
    1890:	86 81       	ldd	r24, Z+6	; 0x06
    1892:	97 81       	ldd	r25, Z+7	; 0x07
    1894:	93 83       	std	Z+3, r25	; 0x03
    1896:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	0f 92       	push	r0
	{
	    buffer->count++;
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    18ac:	ff 91       	pop	r31
    18ae:	ef 91       	pop	r30
    18b0:	bf 91       	pop	r27
    18b2:	af 91       	pop	r26
    18b4:	9f 91       	pop	r25
    18b6:	8f 91       	pop	r24
    18b8:	4f 91       	pop	r20
    18ba:	3f 91       	pop	r19
    18bc:	2f 91       	pop	r18
    18be:	0f 90       	pop	r0
    18c0:	0b be       	out	0x3b, r0	; 59
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	0f 90       	pop	r0
    18c8:	1f 90       	pop	r1
    18ca:	18 95       	reti

000018cc <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    18cc:	1f 92       	push	r1
    18ce:	0f 92       	push	r0
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	0f 92       	push	r0
    18d4:	11 24       	eor	r1, r1
    18d6:	0b b6       	in	r0, 0x3b	; 59
    18d8:	0f 92       	push	r0
    18da:	2f 93       	push	r18
    18dc:	8f 93       	push	r24
    18de:	9f 93       	push	r25
    18e0:	af 93       	push	r26
    18e2:	bf 93       	push	r27
    18e4:	ef 93       	push	r30
    18e6:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	0f 92       	push	r0
	{
	    count = buffer->count;
    18ee:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <xSerial2Port+0xd>
    18f2:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    18f6:	0f 90       	pop	r0
    18f8:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    18fa:	89 2b       	or	r24, r25
    18fc:	31 f4       	brne	.+12     	; 0x190a <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    18fe:	e1 ed       	ldi	r30, 0xD1	; 209
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8f 7d       	andi	r24, 0xDF	; 223
    1906:	80 83       	st	Z, r24
    1908:	1c c0       	rjmp	.+56     	; 0x1942 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    190a:	e2 ea       	ldi	r30, 0xA2	; 162
    190c:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    190e:	a4 81       	ldd	r26, Z+4	; 0x04
    1910:	b5 81       	ldd	r27, Z+5	; 0x05
    1912:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1914:	b5 83       	std	Z+5, r27	; 0x05
    1916:	a4 83       	std	Z+4, r26	; 0x04
    1918:	80 85       	ldd	r24, Z+8	; 0x08
    191a:	91 85       	ldd	r25, Z+9	; 0x09
    191c:	a8 17       	cp	r26, r24
    191e:	b9 07       	cpc	r27, r25
    1920:	21 f4       	brne	.+8      	; 0x192a <__vector_52+0x5e>
	  buffer->out = buffer->start;
    1922:	86 81       	ldd	r24, Z+6	; 0x06
    1924:	97 81       	ldd	r25, Z+7	; 0x07
    1926:	95 83       	std	Z+5, r25	; 0x05
    1928:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	0f 92       	push	r0
	{
	    buffer->count--;
    1930:	80 81       	ld	r24, Z
    1932:	91 81       	ldd	r25, Z+1	; 0x01
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    193e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    1942:	ff 91       	pop	r31
    1944:	ef 91       	pop	r30
    1946:	bf 91       	pop	r27
    1948:	af 91       	pop	r26
    194a:	9f 91       	pop	r25
    194c:	8f 91       	pop	r24
    194e:	2f 91       	pop	r18
    1950:	0f 90       	pop	r0
    1952:	0b be       	out	0x3b, r0	; 59
    1954:	0f 90       	pop	r0
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	0f 90       	pop	r0
    195a:	1f 90       	pop	r1
    195c:	18 95       	reti

0000195e <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    195e:	1f 92       	push	r1
    1960:	0f 92       	push	r0
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	0f 92       	push	r0
    1966:	11 24       	eor	r1, r1
    1968:	0b b6       	in	r0, 0x3b	; 59
    196a:	0f 92       	push	r0
    196c:	2f 93       	push	r18
    196e:	3f 93       	push	r19
    1970:	4f 93       	push	r20
    1972:	8f 93       	push	r24
    1974:	9f 93       	push	r25
    1976:	af 93       	push	r26
    1978:	bf 93       	push	r27
    197a:	ef 93       	push	r30
    197c:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    197e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1982:	8c 71       	andi	r24, 0x1C	; 28
    1984:	71 f0       	breq	.+28     	; 0x19a2 <__vector_54+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    1986:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    198a:	88 23       	and	r24, r24
    198c:	0c f0       	brlt	.+2      	; 0x1990 <__vector_54+0x32>
    198e:	36 c0       	rjmp	.+108    	; 0x19fc <__vector_54+0x9e>
    1990:	a6 e3       	ldi	r26, 0x36	; 54
    1992:	b1 e0       	ldi	r27, 0x01	; 1
    1994:	e0 e3       	ldi	r30, 0x30	; 48
    1996:	f1 e0       	ldi	r31, 0x01	; 1
    1998:	8c 91       	ld	r24, X
    199a:	80 81       	ld	r24, Z
    199c:	88 23       	and	r24, r24
    199e:	e4 f3       	brlt	.-8      	; 0x1998 <__vector_54+0x3a>
    19a0:	2d c0       	rjmp	.+90     	; 0x19fc <__vector_54+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    19a2:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	0f 92       	push	r0
	{
	    count = buffer->count;
    19ac:	e7 eb       	ldi	r30, 0xB7	; 183
    19ae:	f4 e0       	ldi	r31, 0x04	; 4
    19b0:	21 81       	ldd	r18, Z+1	; 0x01
    19b2:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    19b8:	83 85       	ldd	r24, Z+11	; 0x0b
    19ba:	94 85       	ldd	r25, Z+12	; 0x0c
    19bc:	28 17       	cp	r18, r24
    19be:	39 07       	cpc	r19, r25
    19c0:	e9 f0       	breq	.+58     	; 0x19fc <__vector_54+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    19c2:	e8 eb       	ldi	r30, 0xB8	; 184
    19c4:	f4 e0       	ldi	r31, 0x04	; 4

	*buffer->in = data;
    19c6:	a2 81       	ldd	r26, Z+2	; 0x02
    19c8:	b3 81       	ldd	r27, Z+3	; 0x03
    19ca:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	93 83       	std	Z+3, r25	; 0x03
    19d4:	82 83       	std	Z+2, r24	; 0x02
    19d6:	20 85       	ldd	r18, Z+8	; 0x08
    19d8:	31 85       	ldd	r19, Z+9	; 0x09
    19da:	82 17       	cp	r24, r18
    19dc:	93 07       	cpc	r25, r19
    19de:	21 f4       	brne	.+8      	; 0x19e8 <__vector_54+0x8a>
	  buffer->in = buffer->start;
    19e0:	86 81       	ldd	r24, Z+6	; 0x06
    19e2:	97 81       	ldd	r25, Z+7	; 0x07
    19e4:	93 83       	std	Z+3, r25	; 0x03
    19e6:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	0f 92       	push	r0
	{
	    buffer->count++;
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    19fc:	ff 91       	pop	r31
    19fe:	ef 91       	pop	r30
    1a00:	bf 91       	pop	r27
    1a02:	af 91       	pop	r26
    1a04:	9f 91       	pop	r25
    1a06:	8f 91       	pop	r24
    1a08:	4f 91       	pop	r20
    1a0a:	3f 91       	pop	r19
    1a0c:	2f 91       	pop	r18
    1a0e:	0f 90       	pop	r0
    1a10:	0b be       	out	0x3b, r0	; 59
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	0f 90       	pop	r0
    1a18:	1f 90       	pop	r1
    1a1a:	18 95       	reti

00001a1c <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	0b b6       	in	r0, 0x3b	; 59
    1a28:	0f 92       	push	r0
    1a2a:	2f 93       	push	r18
    1a2c:	8f 93       	push	r24
    1a2e:	9f 93       	push	r25
    1a30:	af 93       	push	r26
    1a32:	bf 93       	push	r27
    1a34:	ef 93       	push	r30
    1a36:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	0f 92       	push	r0
	{
	    count = buffer->count;
    1a3e:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <xSerial3Port+0xd>
    1a42:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    1a4a:	89 2b       	or	r24, r25
    1a4c:	31 f4       	brne	.+12     	; 0x1a5a <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    1a4e:	e1 e3       	ldi	r30, 0x31	; 49
    1a50:	f1 e0       	ldi	r31, 0x01	; 1
    1a52:	80 81       	ld	r24, Z
    1a54:	8f 7d       	andi	r24, 0xDF	; 223
    1a56:	80 83       	st	Z, r24
    1a58:	1c c0       	rjmp	.+56     	; 0x1a92 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1a5a:	e4 ec       	ldi	r30, 0xC4	; 196
    1a5c:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    1a5e:	a4 81       	ldd	r26, Z+4	; 0x04
    1a60:	b5 81       	ldd	r27, Z+5	; 0x05
    1a62:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1a64:	b5 83       	std	Z+5, r27	; 0x05
    1a66:	a4 83       	std	Z+4, r26	; 0x04
    1a68:	80 85       	ldd	r24, Z+8	; 0x08
    1a6a:	91 85       	ldd	r25, Z+9	; 0x09
    1a6c:	a8 17       	cp	r26, r24
    1a6e:	b9 07       	cpc	r27, r25
    1a70:	21 f4       	brne	.+8      	; 0x1a7a <__vector_55+0x5e>
	  buffer->out = buffer->start;
    1a72:	86 81       	ldd	r24, Z+6	; 0x06
    1a74:	97 81       	ldd	r25, Z+7	; 0x07
    1a76:	95 83       	std	Z+5, r25	; 0x05
    1a78:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	0f 92       	push	r0
	{
	    buffer->count--;
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    1a8e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	bf 91       	pop	r27
    1a98:	af 91       	pop	r26
    1a9a:	9f 91       	pop	r25
    1a9c:	8f 91       	pop	r24
    1a9e:	2f 91       	pop	r18
    1aa0:	0f 90       	pop	r0
    1aa2:	0b be       	out	0x3b, r0	; 59
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <prvResetNextTaskUnblockTime>:
    1aae:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1ab2:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1ab6:	80 81       	ld	r24, Z
    1ab8:	81 11       	cpse	r24, r1
    1aba:	07 c0       	rjmp	.+14     	; 0x1aca <prvResetNextTaskUnblockTime+0x1c>
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	9f ef       	ldi	r25, 0xFF	; 255
    1ac0:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1ac4:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xNextTaskUnblockTime>
    1ac8:	08 95       	ret
    1aca:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1ace:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1ad2:	05 80       	ldd	r0, Z+5	; 0x05
    1ad4:	f6 81       	ldd	r31, Z+6	; 0x06
    1ad6:	e0 2d       	mov	r30, r0
    1ad8:	06 80       	ldd	r0, Z+6	; 0x06
    1ada:	f7 81       	ldd	r31, Z+7	; 0x07
    1adc:	e0 2d       	mov	r30, r0
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1ae6:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xNextTaskUnblockTime>
    1aea:	08 95       	ret

00001aec <prvAddCurrentTaskToDelayedList>:
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	ec 01       	movw	r28, r24
    1af8:	f6 2e       	mov	r15, r22
    1afa:	00 91 d1 02 	lds	r16, 0x02D1	; 0x8002d1 <xTickCount>
    1afe:	10 91 d2 02 	lds	r17, 0x02D2	; 0x8002d2 <xTickCount+0x1>
    1b02:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <pxCurrentTCB>
    1b06:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1b0a:	02 96       	adiw	r24, 0x02	; 2
    1b0c:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1b10:	cf 3f       	cpi	r28, 0xFF	; 255
    1b12:	8f ef       	ldi	r24, 0xFF	; 255
    1b14:	d8 07       	cpc	r29, r24
    1b16:	69 f4       	brne	.+26     	; 0x1b32 <prvAddCurrentTaskToDelayedList+0x46>
    1b18:	ff 20       	and	r15, r15
    1b1a:	59 f0       	breq	.+22     	; 0x1b32 <prvAddCurrentTaskToDelayedList+0x46>
    1b1c:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <pxCurrentTCB>
    1b20:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1b24:	6e 5f       	subi	r22, 0xFE	; 254
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255
    1b28:	84 ed       	ldi	r24, 0xD4	; 212
    1b2a:	92 e0       	ldi	r25, 0x02	; 2
    1b2c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    1b30:	2f c0       	rjmp	.+94     	; 0x1b90 <prvAddCurrentTaskToDelayedList+0xa4>
    1b32:	c0 0f       	add	r28, r16
    1b34:	d1 1f       	adc	r29, r17
    1b36:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    1b3a:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1b3e:	d3 83       	std	Z+3, r29	; 0x03
    1b40:	c2 83       	std	Z+2, r28	; 0x02
    1b42:	c0 17       	cp	r28, r16
    1b44:	d1 07       	cpc	r29, r17
    1b46:	68 f4       	brcc	.+26     	; 0x1b62 <prvAddCurrentTaskToDelayedList+0x76>
    1b48:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <pxCurrentTCB>
    1b4c:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1b50:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <pxOverflowDelayedTaskList>
    1b54:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <pxOverflowDelayedTaskList+0x1>
    1b58:	6e 5f       	subi	r22, 0xFE	; 254
    1b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5c:	0e 94 1e 03 	call	0x63c	; 0x63c <vListInsert>
    1b60:	17 c0       	rjmp	.+46     	; 0x1b90 <prvAddCurrentTaskToDelayedList+0xa4>
    1b62:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <pxCurrentTCB>
    1b66:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1b6a:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1b6e:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1b72:	6e 5f       	subi	r22, 0xFE	; 254
    1b74:	7f 4f       	sbci	r23, 0xFF	; 255
    1b76:	0e 94 1e 03 	call	0x63c	; 0x63c <vListInsert>
    1b7a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <xNextTaskUnblockTime>
    1b7e:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1b82:	c8 17       	cp	r28, r24
    1b84:	d9 07       	cpc	r29, r25
    1b86:	20 f4       	brcc	.+8      	; 0x1b90 <prvAddCurrentTaskToDelayedList+0xa4>
    1b88:	d0 93 ca 02 	sts	0x02CA, r29	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1b8c:	c0 93 c9 02 	sts	0x02C9, r28	; 0x8002c9 <xNextTaskUnblockTime>
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	08 95       	ret

00001b9c <xTaskCreate>:
    1b9c:	4f 92       	push	r4
    1b9e:	5f 92       	push	r5
    1ba0:	6f 92       	push	r6
    1ba2:	7f 92       	push	r7
    1ba4:	8f 92       	push	r8
    1ba6:	9f 92       	push	r9
    1ba8:	af 92       	push	r10
    1baa:	bf 92       	push	r11
    1bac:	cf 92       	push	r12
    1bae:	df 92       	push	r13
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	4c 01       	movw	r8, r24
    1bbc:	6b 01       	movw	r12, r22
    1bbe:	5a 01       	movw	r10, r20
    1bc0:	29 01       	movw	r4, r18
    1bc2:	ca 01       	movw	r24, r20
    1bc4:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    1bc8:	3c 01       	movw	r6, r24
    1bca:	89 2b       	or	r24, r25
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <xTaskCreate+0x34>
    1bce:	e9 c0       	rjmp	.+466    	; 0x1da2 <xTaskCreate+0x206>
    1bd0:	88 e2       	ldi	r24, 0x28	; 40
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    1bd8:	ec 01       	movw	r28, r24
    1bda:	89 2b       	or	r24, r25
    1bdc:	a9 f0       	breq	.+42     	; 0x1c08 <xTaskCreate+0x6c>
    1bde:	78 8e       	std	Y+24, r7	; 0x18
    1be0:	6f 8a       	std	Y+23, r6	; 0x17
    1be2:	a5 01       	movw	r20, r10
    1be4:	65 ea       	ldi	r22, 0xA5	; 165
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	c3 01       	movw	r24, r6
    1bea:	a5 d6       	rcall	.+3402   	; 0x2936 <memset>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	a8 1a       	sub	r10, r24
    1bf0:	b1 08       	sbc	r11, r1
    1bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf6:	a8 0e       	add	r10, r24
    1bf8:	b9 1e       	adc	r11, r25
    1bfa:	d6 01       	movw	r26, r12
    1bfc:	8c 91       	ld	r24, X
    1bfe:	89 8f       	std	Y+25, r24	; 0x19
    1c00:	8c 91       	ld	r24, X
    1c02:	81 11       	cpse	r24, r1
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <xTaskCreate+0x74>
    1c06:	18 c0       	rjmp	.+48     	; 0x1c38 <xTaskCreate+0x9c>
    1c08:	c3 01       	movw	r24, r6
    1c0a:	0e 94 bc 01 	call	0x378	; 0x378 <vPortFree>
    1c0e:	c9 c0       	rjmp	.+402    	; 0x1da2 <xTaskCreate+0x206>
    1c10:	ae 01       	movw	r20, r28
    1c12:	46 5e       	subi	r20, 0xE6	; 230
    1c14:	5f 4f       	sbci	r21, 0xFF	; 255
    1c16:	f6 01       	movw	r30, r12
    1c18:	31 96       	adiw	r30, 0x01	; 1
    1c1a:	b8 e0       	ldi	r27, 0x08	; 8
    1c1c:	cb 0e       	add	r12, r27
    1c1e:	d1 1c       	adc	r13, r1
    1c20:	cf 01       	movw	r24, r30
    1c22:	21 91       	ld	r18, Z+
    1c24:	da 01       	movw	r26, r20
    1c26:	2d 93       	st	X+, r18
    1c28:	ad 01       	movw	r20, r26
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	8c 91       	ld	r24, X
    1c2e:	88 23       	and	r24, r24
    1c30:	19 f0       	breq	.+6      	; 0x1c38 <xTaskCreate+0x9c>
    1c32:	ec 15       	cp	r30, r12
    1c34:	fd 05       	cpc	r31, r13
    1c36:	a1 f7       	brne	.-24     	; 0x1c20 <xTaskCreate+0x84>
    1c38:	18 a2       	std	Y+32, r1	; 0x20
    1c3a:	04 30       	cpi	r16, 0x04	; 4
    1c3c:	08 f0       	brcs	.+2      	; 0x1c40 <xTaskCreate+0xa4>
    1c3e:	03 e0       	ldi	r16, 0x03	; 3
    1c40:	0e 8b       	std	Y+22, r16	; 0x16
    1c42:	09 a3       	std	Y+33, r16	; 0x21
    1c44:	1a a2       	std	Y+34, r1	; 0x22
    1c46:	6e 01       	movw	r12, r28
    1c48:	b2 e0       	ldi	r27, 0x02	; 2
    1c4a:	cb 0e       	add	r12, r27
    1c4c:	d1 1c       	adc	r13, r1
    1c4e:	c6 01       	movw	r24, r12
    1c50:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialiseItem>
    1c54:	ce 01       	movw	r24, r28
    1c56:	0c 96       	adiw	r24, 0x0c	; 12
    1c58:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialiseItem>
    1c5c:	d9 87       	std	Y+9, r29	; 0x09
    1c5e:	c8 87       	std	Y+8, r28	; 0x08
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	80 1b       	sub	r24, r16
    1c66:	91 09       	sbc	r25, r1
    1c68:	9d 87       	std	Y+13, r25	; 0x0d
    1c6a:	8c 87       	std	Y+12, r24	; 0x0c
    1c6c:	db 8b       	std	Y+19, r29	; 0x13
    1c6e:	ca 8b       	std	Y+18, r28	; 0x12
    1c70:	1b a2       	std	Y+35, r1	; 0x23
    1c72:	1c a2       	std	Y+36, r1	; 0x24
    1c74:	1d a2       	std	Y+37, r1	; 0x25
    1c76:	1e a2       	std	Y+38, r1	; 0x26
    1c78:	1f a2       	std	Y+39, r1	; 0x27
    1c7a:	a2 01       	movw	r20, r4
    1c7c:	b4 01       	movw	r22, r8
    1c7e:	c5 01       	movw	r24, r10
    1c80:	04 da       	rcall	.-3064   	; 0x108a <pxPortInitialiseStack>
    1c82:	99 83       	std	Y+1, r25	; 0x01
    1c84:	88 83       	st	Y, r24
    1c86:	e1 14       	cp	r14, r1
    1c88:	f1 04       	cpc	r15, r1
    1c8a:	19 f0       	breq	.+6      	; 0x1c92 <xTaskCreate+0xf6>
    1c8c:	f7 01       	movw	r30, r14
    1c8e:	d1 83       	std	Z+1, r29	; 0x01
    1c90:	c0 83       	st	Z, r28
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	0f 92       	push	r0
    1c98:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <uxCurrentNumberOfTasks>
    1c9c:	8f 5f       	subi	r24, 0xFF	; 255
    1c9e:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <uxCurrentNumberOfTasks>
    1ca2:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <pxCurrentTCB>
    1ca6:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1caa:	89 2b       	or	r24, r25
    1cac:	d1 f5       	brne	.+116    	; 0x1d22 <xTaskCreate+0x186>
    1cae:	d0 93 2b 03 	sts	0x032B, r29	; 0x80032b <pxCurrentTCB+0x1>
    1cb2:	c0 93 2a 03 	sts	0x032A, r28	; 0x80032a <pxCurrentTCB>
    1cb6:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <uxCurrentNumberOfTasks>
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <xTaskCreate+0x124>
    1cbe:	41 c0       	rjmp	.+130    	; 0x1d42 <xTaskCreate+0x1a6>
    1cc0:	86 e0       	ldi	r24, 0x06	; 6
    1cc2:	93 e0       	ldi	r25, 0x03	; 3
    1cc4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1cc8:	8f e0       	ldi	r24, 0x0F	; 15
    1cca:	93 e0       	ldi	r25, 0x03	; 3
    1ccc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1cd0:	88 e1       	ldi	r24, 0x18	; 24
    1cd2:	93 e0       	ldi	r25, 0x03	; 3
    1cd4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1cd8:	81 e2       	ldi	r24, 0x21	; 33
    1cda:	93 e0       	ldi	r25, 0x03	; 3
    1cdc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1ce0:	8d ef       	ldi	r24, 0xFD	; 253
    1ce2:	92 e0       	ldi	r25, 0x02	; 2
    1ce4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1ce8:	84 ef       	ldi	r24, 0xF4	; 244
    1cea:	92 e0       	ldi	r25, 0x02	; 2
    1cec:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1cf0:	87 ee       	ldi	r24, 0xE7	; 231
    1cf2:	92 e0       	ldi	r25, 0x02	; 2
    1cf4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1cf8:	8e ed       	ldi	r24, 0xDE	; 222
    1cfa:	92 e0       	ldi	r25, 0x02	; 2
    1cfc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1d00:	84 ed       	ldi	r24, 0xD4	; 212
    1d02:	92 e0       	ldi	r25, 0x02	; 2
    1d04:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1d08:	8d ef       	ldi	r24, 0xFD	; 253
    1d0a:	92 e0       	ldi	r25, 0x02	; 2
    1d0c:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <pxDelayedTaskList+0x1>
    1d10:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <pxDelayedTaskList>
    1d14:	84 ef       	ldi	r24, 0xF4	; 244
    1d16:	92 e0       	ldi	r25, 0x02	; 2
    1d18:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <pxOverflowDelayedTaskList+0x1>
    1d1c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <pxOverflowDelayedTaskList>
    1d20:	10 c0       	rjmp	.+32     	; 0x1d42 <xTaskCreate+0x1a6>
    1d22:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <xSchedulerRunning>
    1d26:	81 11       	cpse	r24, r1
    1d28:	0c c0       	rjmp	.+24     	; 0x1d42 <xTaskCreate+0x1a6>
    1d2a:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    1d2e:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1d32:	96 89       	ldd	r25, Z+22	; 0x16
    1d34:	8e 89       	ldd	r24, Y+22	; 0x16
    1d36:	89 17       	cp	r24, r25
    1d38:	20 f0       	brcs	.+8      	; 0x1d42 <xTaskCreate+0x1a6>
    1d3a:	d0 93 2b 03 	sts	0x032B, r29	; 0x80032b <pxCurrentTCB+0x1>
    1d3e:	c0 93 2a 03 	sts	0x032A, r28	; 0x80032a <pxCurrentTCB>
    1d42:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <uxTaskNumber>
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <uxTaskNumber>
    1d4c:	8e 89       	ldd	r24, Y+22	; 0x16
    1d4e:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    1d52:	98 17       	cp	r25, r24
    1d54:	10 f4       	brcc	.+4      	; 0x1d5a <xTaskCreate+0x1be>
    1d56:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <uxTopReadyPriority>
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	22 0f       	add	r18, r18
    1d60:	33 1f       	adc	r19, r19
    1d62:	22 0f       	add	r18, r18
    1d64:	33 1f       	adc	r19, r19
    1d66:	22 0f       	add	r18, r18
    1d68:	33 1f       	adc	r19, r19
    1d6a:	82 0f       	add	r24, r18
    1d6c:	93 1f       	adc	r25, r19
    1d6e:	b6 01       	movw	r22, r12
    1d70:	8a 5f       	subi	r24, 0xFA	; 250
    1d72:	9c 4f       	sbci	r25, 0xFC	; 252
    1d74:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    1d78:	0f 90       	pop	r0
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <xSchedulerRunning>
    1d80:	88 23       	and	r24, r24
    1d82:	59 f0       	breq	.+22     	; 0x1d9a <xTaskCreate+0x1fe>
    1d84:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    1d88:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1d8c:	96 89       	ldd	r25, Z+22	; 0x16
    1d8e:	8e 89       	ldd	r24, Y+22	; 0x16
    1d90:	98 17       	cp	r25, r24
    1d92:	28 f4       	brcc	.+10     	; 0x1d9e <xTaskCreate+0x202>
    1d94:	32 da       	rcall	.-2972   	; 0x11fa <vPortYield>
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	05 c0       	rjmp	.+10     	; 0x1da4 <xTaskCreate+0x208>
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	03 c0       	rjmp	.+6      	; 0x1da4 <xTaskCreate+0x208>
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <xTaskCreate+0x208>
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	df 90       	pop	r13
    1db0:	cf 90       	pop	r12
    1db2:	bf 90       	pop	r11
    1db4:	af 90       	pop	r10
    1db6:	9f 90       	pop	r9
    1db8:	8f 90       	pop	r8
    1dba:	7f 90       	pop	r7
    1dbc:	6f 90       	pop	r6
    1dbe:	5f 90       	pop	r5
    1dc0:	4f 90       	pop	r4
    1dc2:	08 95       	ret

00001dc4 <vTaskStartScheduler>:
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	0f 2e       	mov	r0, r31
    1dcc:	f7 ec       	ldi	r31, 0xC7	; 199
    1dce:	ef 2e       	mov	r14, r31
    1dd0:	f2 e0       	ldi	r31, 0x02	; 2
    1dd2:	ff 2e       	mov	r15, r31
    1dd4:	f0 2d       	mov	r31, r0
    1dd6:	00 e0       	ldi	r16, 0x00	; 0
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	45 e5       	ldi	r20, 0x55	; 85
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	6a e9       	ldi	r22, 0x9A	; 154
    1de2:	72 e0       	ldi	r23, 0x02	; 2
    1de4:	83 e3       	ldi	r24, 0x33	; 51
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	d9 de       	rcall	.-590    	; 0x1b9c <xTaskCreate>
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	79 f4       	brne	.+30     	; 0x1e0c <vTaskStartScheduler+0x48>
    1dee:	f8 94       	cli
    1df0:	8f ef       	ldi	r24, 0xFF	; 255
    1df2:	9f ef       	ldi	r25, 0xFF	; 255
    1df4:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1df8:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xNextTaskUnblockTime>
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <xSchedulerRunning>
    1e02:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <xTickCount+0x1>
    1e06:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <xTickCount>
    1e0a:	b1 d9       	rcall	.-3230   	; 0x116e <xPortStartScheduler>
    1e0c:	0f 91       	pop	r16
    1e0e:	ff 90       	pop	r15
    1e10:	ef 90       	pop	r14
    1e12:	08 95       	ret

00001e14 <vTaskSuspendAll>:
    1e14:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    1e18:	8f 5f       	subi	r24, 0xFF	; 255
    1e1a:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <uxSchedulerSuspended>
    1e1e:	08 95       	ret

00001e20 <xTaskIncrementTick>:
    1e20:	cf 92       	push	r12
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    1e34:	81 11       	cpse	r24, r1
    1e36:	98 c0       	rjmp	.+304    	; 0x1f68 <xTaskIncrementTick+0x148>
    1e38:	e0 90 d1 02 	lds	r14, 0x02D1	; 0x8002d1 <xTickCount>
    1e3c:	f0 90 d2 02 	lds	r15, 0x02D2	; 0x8002d2 <xTickCount+0x1>
    1e40:	8f ef       	ldi	r24, 0xFF	; 255
    1e42:	e8 1a       	sub	r14, r24
    1e44:	f8 0a       	sbc	r15, r24
    1e46:	f0 92 d2 02 	sts	0x02D2, r15	; 0x8002d2 <xTickCount+0x1>
    1e4a:	e0 92 d1 02 	sts	0x02D1, r14	; 0x8002d1 <xTickCount>
    1e4e:	e1 14       	cp	r14, r1
    1e50:	f1 04       	cpc	r15, r1
    1e52:	b1 f4       	brne	.+44     	; 0x1e80 <xTaskIncrementTick+0x60>
    1e54:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1e58:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1e5c:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <pxOverflowDelayedTaskList>
    1e60:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <pxOverflowDelayedTaskList+0x1>
    1e64:	30 93 f3 02 	sts	0x02F3, r19	; 0x8002f3 <pxDelayedTaskList+0x1>
    1e68:	20 93 f2 02 	sts	0x02F2, r18	; 0x8002f2 <pxDelayedTaskList>
    1e6c:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <pxOverflowDelayedTaskList+0x1>
    1e70:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <pxOverflowDelayedTaskList>
    1e74:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <xNumOfOverflows>
    1e78:	8f 5f       	subi	r24, 0xFF	; 255
    1e7a:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <xNumOfOverflows>
    1e7e:	17 de       	rcall	.-978    	; 0x1aae <prvResetNextTaskUnblockTime>
    1e80:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <xNextTaskUnblockTime>
    1e84:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1e88:	e8 16       	cp	r14, r24
    1e8a:	f9 06       	cpc	r15, r25
    1e8c:	10 f4       	brcc	.+4      	; 0x1e92 <xTaskIncrementTick+0x72>
    1e8e:	d1 2c       	mov	r13, r1
    1e90:	53 c0       	rjmp	.+166    	; 0x1f38 <xTaskIncrementTick+0x118>
    1e92:	d1 2c       	mov	r13, r1
    1e94:	cc 24       	eor	r12, r12
    1e96:	c3 94       	inc	r12
    1e98:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1e9c:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1ea0:	80 81       	ld	r24, Z
    1ea2:	81 11       	cpse	r24, r1
    1ea4:	07 c0       	rjmp	.+14     	; 0x1eb4 <xTaskIncrementTick+0x94>
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	9f ef       	ldi	r25, 0xFF	; 255
    1eaa:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1eae:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xNextTaskUnblockTime>
    1eb2:	42 c0       	rjmp	.+132    	; 0x1f38 <xTaskIncrementTick+0x118>
    1eb4:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1eb8:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1ebc:	05 80       	ldd	r0, Z+5	; 0x05
    1ebe:	f6 81       	ldd	r31, Z+6	; 0x06
    1ec0:	e0 2d       	mov	r30, r0
    1ec2:	c6 81       	ldd	r28, Z+6	; 0x06
    1ec4:	d7 81       	ldd	r29, Z+7	; 0x07
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eca:	e8 16       	cp	r14, r24
    1ecc:	f9 06       	cpc	r15, r25
    1ece:	28 f4       	brcc	.+10     	; 0x1eda <xTaskIncrementTick+0xba>
    1ed0:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1ed4:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xNextTaskUnblockTime>
    1ed8:	2f c0       	rjmp	.+94     	; 0x1f38 <xTaskIncrementTick+0x118>
    1eda:	8e 01       	movw	r16, r28
    1edc:	0e 5f       	subi	r16, 0xFE	; 254
    1ede:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee0:	c8 01       	movw	r24, r16
    1ee2:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1ee6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ee8:	9d 89       	ldd	r25, Y+21	; 0x15
    1eea:	89 2b       	or	r24, r25
    1eec:	21 f0       	breq	.+8      	; 0x1ef6 <xTaskIncrementTick+0xd6>
    1eee:	ce 01       	movw	r24, r28
    1ef0:	0c 96       	adiw	r24, 0x0c	; 12
    1ef2:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1ef6:	8e 89       	ldd	r24, Y+22	; 0x16
    1ef8:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    1efc:	98 17       	cp	r25, r24
    1efe:	10 f4       	brcc	.+4      	; 0x1f04 <xTaskIncrementTick+0xe4>
    1f00:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <uxTopReadyPriority>
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c 01       	movw	r18, r24
    1f08:	22 0f       	add	r18, r18
    1f0a:	33 1f       	adc	r19, r19
    1f0c:	22 0f       	add	r18, r18
    1f0e:	33 1f       	adc	r19, r19
    1f10:	22 0f       	add	r18, r18
    1f12:	33 1f       	adc	r19, r19
    1f14:	82 0f       	add	r24, r18
    1f16:	93 1f       	adc	r25, r19
    1f18:	b8 01       	movw	r22, r16
    1f1a:	8a 5f       	subi	r24, 0xFA	; 250
    1f1c:	9c 4f       	sbci	r25, 0xFC	; 252
    1f1e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    1f22:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    1f26:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1f2a:	9e 89       	ldd	r25, Y+22	; 0x16
    1f2c:	86 89       	ldd	r24, Z+22	; 0x16
    1f2e:	98 17       	cp	r25, r24
    1f30:	08 f4       	brcc	.+2      	; 0x1f34 <xTaskIncrementTick+0x114>
    1f32:	b2 cf       	rjmp	.-156    	; 0x1e98 <xTaskIncrementTick+0x78>
    1f34:	dc 2c       	mov	r13, r12
    1f36:	b0 cf       	rjmp	.-160    	; 0x1e98 <xTaskIncrementTick+0x78>
    1f38:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    1f3c:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1f40:	86 89       	ldd	r24, Z+22	; 0x16
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	fc 01       	movw	r30, r24
    1f46:	ee 0f       	add	r30, r30
    1f48:	ff 1f       	adc	r31, r31
    1f4a:	ee 0f       	add	r30, r30
    1f4c:	ff 1f       	adc	r31, r31
    1f4e:	ee 0f       	add	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	8e 0f       	add	r24, r30
    1f54:	9f 1f       	adc	r25, r31
    1f56:	fc 01       	movw	r30, r24
    1f58:	ea 5f       	subi	r30, 0xFA	; 250
    1f5a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f5c:	80 81       	ld	r24, Z
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	48 f0       	brcs	.+18     	; 0x1f74 <xTaskIncrementTick+0x154>
    1f62:	dd 24       	eor	r13, r13
    1f64:	d3 94       	inc	r13
    1f66:	06 c0       	rjmp	.+12     	; 0x1f74 <xTaskIncrementTick+0x154>
    1f68:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <uxPendedTicks>
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <uxPendedTicks>
    1f72:	d1 2c       	mov	r13, r1
    1f74:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <xYieldPending>
    1f78:	88 23       	and	r24, r24
    1f7a:	11 f0       	breq	.+4      	; 0x1f80 <xTaskIncrementTick+0x160>
    1f7c:	dd 24       	eor	r13, r13
    1f7e:	d3 94       	inc	r13
    1f80:	8d 2d       	mov	r24, r13
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	1f 91       	pop	r17
    1f88:	0f 91       	pop	r16
    1f8a:	ff 90       	pop	r15
    1f8c:	ef 90       	pop	r14
    1f8e:	df 90       	pop	r13
    1f90:	cf 90       	pop	r12
    1f92:	08 95       	ret

00001f94 <xTaskResumeAll>:
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	0f 92       	push	r0
    1fa8:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    1fac:	81 50       	subi	r24, 0x01	; 1
    1fae:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <uxSchedulerSuspended>
    1fb2:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    1fb6:	81 11       	cpse	r24, r1
    1fb8:	5c c0       	rjmp	.+184    	; 0x2072 <xTaskResumeAll+0xde>
    1fba:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <uxCurrentNumberOfTasks>
    1fbe:	81 11       	cpse	r24, r1
    1fc0:	33 c0       	rjmp	.+102    	; 0x2028 <xTaskResumeAll+0x94>
    1fc2:	5a c0       	rjmp	.+180    	; 0x2078 <xTaskResumeAll+0xe4>
    1fc4:	d7 01       	movw	r26, r14
    1fc6:	15 96       	adiw	r26, 0x05	; 5
    1fc8:	ed 91       	ld	r30, X+
    1fca:	fc 91       	ld	r31, X
    1fcc:	16 97       	sbiw	r26, 0x06	; 6
    1fce:	c6 81       	ldd	r28, Z+6	; 0x06
    1fd0:	d7 81       	ldd	r29, Z+7	; 0x07
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	0c 96       	adiw	r24, 0x0c	; 12
    1fd6:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1fda:	8e 01       	movw	r16, r28
    1fdc:	0e 5f       	subi	r16, 0xFE	; 254
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1fe6:	8e 89       	ldd	r24, Y+22	; 0x16
    1fe8:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    1fec:	98 17       	cp	r25, r24
    1fee:	10 f4       	brcc	.+4      	; 0x1ff4 <xTaskResumeAll+0x60>
    1ff0:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <uxTopReadyPriority>
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9c 01       	movw	r18, r24
    1ff8:	22 0f       	add	r18, r18
    1ffa:	33 1f       	adc	r19, r19
    1ffc:	22 0f       	add	r18, r18
    1ffe:	33 1f       	adc	r19, r19
    2000:	22 0f       	add	r18, r18
    2002:	33 1f       	adc	r19, r19
    2004:	82 0f       	add	r24, r18
    2006:	93 1f       	adc	r25, r19
    2008:	b8 01       	movw	r22, r16
    200a:	8a 5f       	subi	r24, 0xFA	; 250
    200c:	9c 4f       	sbci	r25, 0xFC	; 252
    200e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    2012:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    2016:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    201a:	9e 89       	ldd	r25, Y+22	; 0x16
    201c:	86 89       	ldd	r24, Z+22	; 0x16
    201e:	98 17       	cp	r25, r24
    2020:	68 f0       	brcs	.+26     	; 0x203c <xTaskResumeAll+0xa8>
    2022:	d0 92 cd 02 	sts	0x02CD, r13	; 0x8002cd <xYieldPending>
    2026:	0a c0       	rjmp	.+20     	; 0x203c <xTaskResumeAll+0xa8>
    2028:	c0 e0       	ldi	r28, 0x00	; 0
    202a:	d0 e0       	ldi	r29, 0x00	; 0
    202c:	0f 2e       	mov	r0, r31
    202e:	f7 ee       	ldi	r31, 0xE7	; 231
    2030:	ef 2e       	mov	r14, r31
    2032:	f2 e0       	ldi	r31, 0x02	; 2
    2034:	ff 2e       	mov	r15, r31
    2036:	f0 2d       	mov	r31, r0
    2038:	dd 24       	eor	r13, r13
    203a:	d3 94       	inc	r13
    203c:	f7 01       	movw	r30, r14
    203e:	80 81       	ld	r24, Z
    2040:	81 11       	cpse	r24, r1
    2042:	c0 cf       	rjmp	.-128    	; 0x1fc4 <xTaskResumeAll+0x30>
    2044:	cd 2b       	or	r28, r29
    2046:	09 f0       	breq	.+2      	; 0x204a <xTaskResumeAll+0xb6>
    2048:	32 dd       	rcall	.-1436   	; 0x1aae <prvResetNextTaskUnblockTime>
    204a:	c0 91 ce 02 	lds	r28, 0x02CE	; 0x8002ce <uxPendedTicks>
    204e:	cc 23       	and	r28, r28
    2050:	49 f0       	breq	.+18     	; 0x2064 <xTaskResumeAll+0xd0>
    2052:	d1 e0       	ldi	r29, 0x01	; 1
    2054:	e5 de       	rcall	.-566    	; 0x1e20 <xTaskIncrementTick>
    2056:	81 11       	cpse	r24, r1
    2058:	d0 93 cd 02 	sts	0x02CD, r29	; 0x8002cd <xYieldPending>
    205c:	c1 50       	subi	r28, 0x01	; 1
    205e:	d1 f7       	brne	.-12     	; 0x2054 <xTaskResumeAll+0xc0>
    2060:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <uxPendedTicks>
    2064:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <xYieldPending>
    2068:	88 23       	and	r24, r24
    206a:	29 f0       	breq	.+10     	; 0x2076 <xTaskResumeAll+0xe2>
    206c:	c6 d8       	rcall	.-3700   	; 0x11fa <vPortYield>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	03 c0       	rjmp	.+6      	; 0x2078 <xTaskResumeAll+0xe4>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	01 c0       	rjmp	.+2      	; 0x2078 <xTaskResumeAll+0xe4>
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	0f 90       	pop	r0
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	1f 91       	pop	r17
    2082:	0f 91       	pop	r16
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	df 90       	pop	r13
    208a:	08 95       	ret

0000208c <vTaskSwitchContext>:
    208c:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    2090:	88 23       	and	r24, r24
    2092:	21 f0       	breq	.+8      	; 0x209c <vTaskSwitchContext+0x10>
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <xYieldPending>
    209a:	08 95       	ret
    209c:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <xYieldPending>
    20a0:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
    20a4:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    20a8:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    20ac:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    20b0:	2d 91       	ld	r18, X+
    20b2:	3c 91       	ld	r19, X
    20b4:	87 89       	ldd	r24, Z+23	; 0x17
    20b6:	90 8d       	ldd	r25, Z+24	; 0x18
    20b8:	82 17       	cp	r24, r18
    20ba:	93 07       	cpc	r25, r19
    20bc:	60 f0       	brcs	.+24     	; 0x20d6 <vTaskSwitchContext+0x4a>
    20be:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <pxCurrentTCB>
    20c2:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    20c6:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <pxCurrentTCB>
    20ca:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    20ce:	67 5e       	subi	r22, 0xE7	; 231
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <vApplicationStackOverflowHook>
    20d6:	20 91 d0 02 	lds	r18, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    20da:	82 2f       	mov	r24, r18
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	fc 01       	movw	r30, r24
    20e0:	ee 0f       	add	r30, r30
    20e2:	ff 1f       	adc	r31, r31
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	ee 0f       	add	r30, r30
    20ea:	ff 1f       	adc	r31, r31
    20ec:	e8 0f       	add	r30, r24
    20ee:	f9 1f       	adc	r31, r25
    20f0:	ea 5f       	subi	r30, 0xFA	; 250
    20f2:	fc 4f       	sbci	r31, 0xFC	; 252
    20f4:	30 81       	ld	r19, Z
    20f6:	31 11       	cpse	r19, r1
    20f8:	11 c0       	rjmp	.+34     	; 0x211c <vTaskSwitchContext+0x90>
    20fa:	21 50       	subi	r18, 0x01	; 1
    20fc:	82 2f       	mov	r24, r18
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	fc 01       	movw	r30, r24
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	e8 0f       	add	r30, r24
    2110:	f9 1f       	adc	r31, r25
    2112:	ea 5f       	subi	r30, 0xFA	; 250
    2114:	fc 4f       	sbci	r31, 0xFC	; 252
    2116:	30 81       	ld	r19, Z
    2118:	33 23       	and	r19, r19
    211a:	79 f3       	breq	.-34     	; 0x20fa <vTaskSwitchContext+0x6e>
    211c:	ac 01       	movw	r20, r24
    211e:	44 0f       	add	r20, r20
    2120:	55 1f       	adc	r21, r21
    2122:	44 0f       	add	r20, r20
    2124:	55 1f       	adc	r21, r21
    2126:	44 0f       	add	r20, r20
    2128:	55 1f       	adc	r21, r21
    212a:	48 0f       	add	r20, r24
    212c:	59 1f       	adc	r21, r25
    212e:	da 01       	movw	r26, r20
    2130:	aa 5f       	subi	r26, 0xFA	; 250
    2132:	bc 4f       	sbci	r27, 0xFC	; 252
    2134:	11 96       	adiw	r26, 0x01	; 1
    2136:	ed 91       	ld	r30, X+
    2138:	fc 91       	ld	r31, X
    213a:	12 97       	sbiw	r26, 0x02	; 2
    213c:	02 80       	ldd	r0, Z+2	; 0x02
    213e:	f3 81       	ldd	r31, Z+3	; 0x03
    2140:	e0 2d       	mov	r30, r0
    2142:	12 96       	adiw	r26, 0x02	; 2
    2144:	fc 93       	st	X, r31
    2146:	ee 93       	st	-X, r30
    2148:	11 97       	sbiw	r26, 0x01	; 1
    214a:	47 5f       	subi	r20, 0xF7	; 247
    214c:	5c 4f       	sbci	r21, 0xFC	; 252
    214e:	e4 17       	cp	r30, r20
    2150:	f5 07       	cpc	r31, r21
    2152:	29 f4       	brne	.+10     	; 0x215e <vTaskSwitchContext+0xd2>
    2154:	42 81       	ldd	r20, Z+2	; 0x02
    2156:	53 81       	ldd	r21, Z+3	; 0x03
    2158:	fd 01       	movw	r30, r26
    215a:	52 83       	std	Z+2, r21	; 0x02
    215c:	41 83       	std	Z+1, r20	; 0x01
    215e:	fc 01       	movw	r30, r24
    2160:	ee 0f       	add	r30, r30
    2162:	ff 1f       	adc	r31, r31
    2164:	ee 0f       	add	r30, r30
    2166:	ff 1f       	adc	r31, r31
    2168:	ee 0f       	add	r30, r30
    216a:	ff 1f       	adc	r31, r31
    216c:	8e 0f       	add	r24, r30
    216e:	9f 1f       	adc	r25, r31
    2170:	fc 01       	movw	r30, r24
    2172:	ea 5f       	subi	r30, 0xFA	; 250
    2174:	fc 4f       	sbci	r31, 0xFC	; 252
    2176:	01 80       	ldd	r0, Z+1	; 0x01
    2178:	f2 81       	ldd	r31, Z+2	; 0x02
    217a:	e0 2d       	mov	r30, r0
    217c:	86 81       	ldd	r24, Z+6	; 0x06
    217e:	97 81       	ldd	r25, Z+7	; 0x07
    2180:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <pxCurrentTCB+0x1>
    2184:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <pxCurrentTCB>
    2188:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <uxTopReadyPriority>
    218c:	08 95       	ret

0000218e <vTaskPlaceOnEventList>:
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	eb 01       	movw	r28, r22
    2194:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <pxCurrentTCB>
    2198:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    219c:	64 5f       	subi	r22, 0xF4	; 244
    219e:	7f 4f       	sbci	r23, 0xFF	; 255
    21a0:	0e 94 1e 03 	call	0x63c	; 0x63c <vListInsert>
    21a4:	61 e0       	ldi	r22, 0x01	; 1
    21a6:	ce 01       	movw	r24, r28
    21a8:	a1 dc       	rcall	.-1726   	; 0x1aec <prvAddCurrentTaskToDelayedList>
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	08 95       	ret

000021b0 <xTaskRemoveFromEventList>:
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	dc 01       	movw	r26, r24
    21ba:	15 96       	adiw	r26, 0x05	; 5
    21bc:	ed 91       	ld	r30, X+
    21be:	fc 91       	ld	r31, X
    21c0:	16 97       	sbiw	r26, 0x06	; 6
    21c2:	c6 81       	ldd	r28, Z+6	; 0x06
    21c4:	d7 81       	ldd	r29, Z+7	; 0x07
    21c6:	8e 01       	movw	r16, r28
    21c8:	04 5f       	subi	r16, 0xF4	; 244
    21ca:	1f 4f       	sbci	r17, 0xFF	; 255
    21cc:	c8 01       	movw	r24, r16
    21ce:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    21d2:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    21d6:	81 11       	cpse	r24, r1
    21d8:	1c c0       	rjmp	.+56     	; 0x2212 <__stack+0x13>
    21da:	0a 50       	subi	r16, 0x0A	; 10
    21dc:	11 09       	sbc	r17, r1
    21de:	c8 01       	movw	r24, r16
    21e0:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    21e4:	8e 89       	ldd	r24, Y+22	; 0x16
    21e6:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    21ea:	98 17       	cp	r25, r24
    21ec:	10 f4       	brcc	.+4      	; 0x21f2 <xTaskRemoveFromEventList+0x42>
    21ee:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <uxTopReadyPriority>
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9c 01       	movw	r18, r24
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	22 0f       	add	r18, r18
    21fc:	33 1f       	adc	r19, r19
    21fe:	22 0f       	add	r18, r18
    2200:	33 1f       	adc	r19, r19
    2202:	82 0f       	add	r24, r18
    2204:	93 1f       	adc	r25, r19
    2206:	b8 01       	movw	r22, r16
    2208:	8a 5f       	subi	r24, 0xFA	; 250
    220a:	9c 4f       	sbci	r25, 0xFC	; 252
    220c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    2210:	05 c0       	rjmp	.+10     	; 0x221c <__stack+0x1d>
    2212:	b8 01       	movw	r22, r16
    2214:	87 ee       	ldi	r24, 0xE7	; 231
    2216:	92 e0       	ldi	r25, 0x02	; 2
    2218:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    221c:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    2220:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    2224:	9e 89       	ldd	r25, Y+22	; 0x16
    2226:	86 89       	ldd	r24, Z+22	; 0x16
    2228:	89 17       	cp	r24, r25
    222a:	20 f4       	brcc	.+8      	; 0x2234 <__stack+0x35>
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <xYieldPending>
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <__stack+0x37>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	08 95       	ret

00002240 <vTaskSetTimeOutState>:
    2240:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <xNumOfOverflows>
    2244:	fc 01       	movw	r30, r24
    2246:	20 83       	st	Z, r18
    2248:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <xTickCount>
    224c:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <xTickCount+0x1>
    2250:	32 83       	std	Z+2, r19	; 0x02
    2252:	21 83       	std	Z+1, r18	; 0x01
    2254:	08 95       	ret

00002256 <xTaskCheckForTimeOut>:
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	0f 92       	push	r0
    225c:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <xTickCount>
    2260:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <xTickCount+0x1>
    2264:	db 01       	movw	r26, r22
    2266:	2d 91       	ld	r18, X+
    2268:	3c 91       	ld	r19, X
    226a:	2f 3f       	cpi	r18, 0xFF	; 255
    226c:	bf ef       	ldi	r27, 0xFF	; 255
    226e:	3b 07       	cpc	r19, r27
    2270:	11 f1       	breq	.+68     	; 0x22b6 <xTaskCheckForTimeOut+0x60>
    2272:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <xNumOfOverflows>
    2276:	dc 01       	movw	r26, r24
    2278:	fc 91       	ld	r31, X
    227a:	fe 17       	cp	r31, r30
    227c:	39 f0       	breq	.+14     	; 0x228c <xTaskCheckForTimeOut+0x36>
    227e:	11 96       	adiw	r26, 0x01	; 1
    2280:	ed 91       	ld	r30, X+
    2282:	fc 91       	ld	r31, X
    2284:	12 97       	sbiw	r26, 0x02	; 2
    2286:	4e 17       	cp	r20, r30
    2288:	5f 07       	cpc	r21, r31
    228a:	b8 f4       	brcc	.+46     	; 0x22ba <xTaskCheckForTimeOut+0x64>
    228c:	dc 01       	movw	r26, r24
    228e:	11 96       	adiw	r26, 0x01	; 1
    2290:	ed 91       	ld	r30, X+
    2292:	fc 91       	ld	r31, X
    2294:	12 97       	sbiw	r26, 0x02	; 2
    2296:	da 01       	movw	r26, r20
    2298:	ae 1b       	sub	r26, r30
    229a:	bf 0b       	sbc	r27, r31
    229c:	a2 17       	cp	r26, r18
    229e:	b3 07       	cpc	r27, r19
    22a0:	70 f4       	brcc	.+28     	; 0x22be <xTaskCheckForTimeOut+0x68>
    22a2:	db 01       	movw	r26, r22
    22a4:	e4 1b       	sub	r30, r20
    22a6:	f5 0b       	sbc	r31, r21
    22a8:	2e 0f       	add	r18, r30
    22aa:	3f 1f       	adc	r19, r31
    22ac:	2d 93       	st	X+, r18
    22ae:	3c 93       	st	X, r19
    22b0:	c7 df       	rcall	.-114    	; 0x2240 <vTaskSetTimeOutState>
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	05 c0       	rjmp	.+10     	; 0x22c0 <xTaskCheckForTimeOut+0x6a>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	03 c0       	rjmp	.+6      	; 0x22c0 <xTaskCheckForTimeOut+0x6a>
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <xTaskCheckForTimeOut+0x6a>
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	0f 90       	pop	r0
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	08 95       	ret

000022c6 <vTaskMissedYield>:
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <xYieldPending>
    22cc:	08 95       	ret

000022ce <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	fc 01       	movw	r30, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    22d8:	89 2b       	or	r24, r25
    22da:	79 f1       	breq	.+94     	; 0x233a <xTaskPriorityDisinherit+0x6c>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    22dc:	82 a1       	ldd	r24, Z+34	; 0x22
    22de:	81 50       	subi	r24, 0x01	; 1
    22e0:	82 a3       	std	Z+34, r24	; 0x22

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    22e2:	26 89       	ldd	r18, Z+22	; 0x16
    22e4:	91 a1       	ldd	r25, Z+33	; 0x21
    22e6:	29 17       	cp	r18, r25
    22e8:	51 f1       	breq	.+84     	; 0x233e <xTaskPriorityDisinherit+0x70>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    22ea:	81 11       	cpse	r24, r1
    22ec:	2a c0       	rjmp	.+84     	; 0x2342 <xTaskPriorityDisinherit+0x74>
    22ee:	ef 01       	movw	r28, r30
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    22f0:	8f 01       	movw	r16, r30
    22f2:	0e 5f       	subi	r16, 0xFE	; 254
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	c8 01       	movw	r24, r16
    22f8:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    22fc:	89 a1       	ldd	r24, Y+33	; 0x21
    22fe:	8e 8b       	std	Y+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2300:	24 e0       	ldi	r18, 0x04	; 4
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	28 1b       	sub	r18, r24
    2306:	31 09       	sbc	r19, r1
    2308:	3d 87       	std	Y+13, r19	; 0x0d
    230a:	2c 87       	std	Y+12, r18	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    230c:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    2310:	98 17       	cp	r25, r24
    2312:	10 f4       	brcc	.+4      	; 0x2318 <xTaskPriorityDisinherit+0x4a>
    2314:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <uxTopReadyPriority>
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9c 01       	movw	r18, r24
    231c:	22 0f       	add	r18, r18
    231e:	33 1f       	adc	r19, r19
    2320:	22 0f       	add	r18, r18
    2322:	33 1f       	adc	r19, r19
    2324:	22 0f       	add	r18, r18
    2326:	33 1f       	adc	r19, r19
    2328:	82 0f       	add	r24, r18
    232a:	93 1f       	adc	r25, r19
    232c:	b8 01       	movw	r22, r16
    232e:	8a 5f       	subi	r24, 0xFA	; 250
    2330:	9c 4f       	sbci	r25, 0xFC	; 252
    2332:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	05 c0       	rjmp	.+10     	; 0x2344 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	03 c0       	rjmp	.+6      	; 0x2344 <xTaskPriorityDisinherit+0x76>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <xTaskPriorityDisinherit+0x76>
    2342:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	08 95       	ret

0000234e <__subsf3>:
    234e:	50 58       	subi	r21, 0x80	; 128

00002350 <__addsf3>:
    2350:	bb 27       	eor	r27, r27
    2352:	aa 27       	eor	r26, r26
    2354:	0e d0       	rcall	.+28     	; 0x2372 <__addsf3x>
    2356:	e5 c0       	rjmp	.+458    	; 0x2522 <__fp_round>
    2358:	d6 d0       	rcall	.+428    	; 0x2506 <__fp_pscA>
    235a:	30 f0       	brcs	.+12     	; 0x2368 <__addsf3+0x18>
    235c:	db d0       	rcall	.+438    	; 0x2514 <__fp_pscB>
    235e:	20 f0       	brcs	.+8      	; 0x2368 <__addsf3+0x18>
    2360:	31 f4       	brne	.+12     	; 0x236e <__addsf3+0x1e>
    2362:	9f 3f       	cpi	r25, 0xFF	; 255
    2364:	11 f4       	brne	.+4      	; 0x236a <__addsf3+0x1a>
    2366:	1e f4       	brtc	.+6      	; 0x236e <__addsf3+0x1e>
    2368:	cb c0       	rjmp	.+406    	; 0x2500 <__fp_nan>
    236a:	0e f4       	brtc	.+2      	; 0x236e <__addsf3+0x1e>
    236c:	e0 95       	com	r30
    236e:	e7 fb       	bst	r30, 7
    2370:	c1 c0       	rjmp	.+386    	; 0x24f4 <__fp_inf>

00002372 <__addsf3x>:
    2372:	e9 2f       	mov	r30, r25
    2374:	e7 d0       	rcall	.+462    	; 0x2544 <__fp_split3>
    2376:	80 f3       	brcs	.-32     	; 0x2358 <__addsf3+0x8>
    2378:	ba 17       	cp	r27, r26
    237a:	62 07       	cpc	r22, r18
    237c:	73 07       	cpc	r23, r19
    237e:	84 07       	cpc	r24, r20
    2380:	95 07       	cpc	r25, r21
    2382:	18 f0       	brcs	.+6      	; 0x238a <__addsf3x+0x18>
    2384:	71 f4       	brne	.+28     	; 0x23a2 <__addsf3x+0x30>
    2386:	9e f5       	brtc	.+102    	; 0x23ee <__addsf3x+0x7c>
    2388:	ff c0       	rjmp	.+510    	; 0x2588 <__fp_zero>
    238a:	0e f4       	brtc	.+2      	; 0x238e <__addsf3x+0x1c>
    238c:	e0 95       	com	r30
    238e:	0b 2e       	mov	r0, r27
    2390:	ba 2f       	mov	r27, r26
    2392:	a0 2d       	mov	r26, r0
    2394:	0b 01       	movw	r0, r22
    2396:	b9 01       	movw	r22, r18
    2398:	90 01       	movw	r18, r0
    239a:	0c 01       	movw	r0, r24
    239c:	ca 01       	movw	r24, r20
    239e:	a0 01       	movw	r20, r0
    23a0:	11 24       	eor	r1, r1
    23a2:	ff 27       	eor	r31, r31
    23a4:	59 1b       	sub	r21, r25
    23a6:	99 f0       	breq	.+38     	; 0x23ce <__addsf3x+0x5c>
    23a8:	59 3f       	cpi	r21, 0xF9	; 249
    23aa:	50 f4       	brcc	.+20     	; 0x23c0 <__addsf3x+0x4e>
    23ac:	50 3e       	cpi	r21, 0xE0	; 224
    23ae:	68 f1       	brcs	.+90     	; 0x240a <__addsf3x+0x98>
    23b0:	1a 16       	cp	r1, r26
    23b2:	f0 40       	sbci	r31, 0x00	; 0
    23b4:	a2 2f       	mov	r26, r18
    23b6:	23 2f       	mov	r18, r19
    23b8:	34 2f       	mov	r19, r20
    23ba:	44 27       	eor	r20, r20
    23bc:	58 5f       	subi	r21, 0xF8	; 248
    23be:	f3 cf       	rjmp	.-26     	; 0x23a6 <__addsf3x+0x34>
    23c0:	46 95       	lsr	r20
    23c2:	37 95       	ror	r19
    23c4:	27 95       	ror	r18
    23c6:	a7 95       	ror	r26
    23c8:	f0 40       	sbci	r31, 0x00	; 0
    23ca:	53 95       	inc	r21
    23cc:	c9 f7       	brne	.-14     	; 0x23c0 <__addsf3x+0x4e>
    23ce:	7e f4       	brtc	.+30     	; 0x23ee <__addsf3x+0x7c>
    23d0:	1f 16       	cp	r1, r31
    23d2:	ba 0b       	sbc	r27, r26
    23d4:	62 0b       	sbc	r22, r18
    23d6:	73 0b       	sbc	r23, r19
    23d8:	84 0b       	sbc	r24, r20
    23da:	ba f0       	brmi	.+46     	; 0x240a <__addsf3x+0x98>
    23dc:	91 50       	subi	r25, 0x01	; 1
    23de:	a1 f0       	breq	.+40     	; 0x2408 <__addsf3x+0x96>
    23e0:	ff 0f       	add	r31, r31
    23e2:	bb 1f       	adc	r27, r27
    23e4:	66 1f       	adc	r22, r22
    23e6:	77 1f       	adc	r23, r23
    23e8:	88 1f       	adc	r24, r24
    23ea:	c2 f7       	brpl	.-16     	; 0x23dc <__addsf3x+0x6a>
    23ec:	0e c0       	rjmp	.+28     	; 0x240a <__addsf3x+0x98>
    23ee:	ba 0f       	add	r27, r26
    23f0:	62 1f       	adc	r22, r18
    23f2:	73 1f       	adc	r23, r19
    23f4:	84 1f       	adc	r24, r20
    23f6:	48 f4       	brcc	.+18     	; 0x240a <__addsf3x+0x98>
    23f8:	87 95       	ror	r24
    23fa:	77 95       	ror	r23
    23fc:	67 95       	ror	r22
    23fe:	b7 95       	ror	r27
    2400:	f7 95       	ror	r31
    2402:	9e 3f       	cpi	r25, 0xFE	; 254
    2404:	08 f0       	brcs	.+2      	; 0x2408 <__addsf3x+0x96>
    2406:	b3 cf       	rjmp	.-154    	; 0x236e <__addsf3+0x1e>
    2408:	93 95       	inc	r25
    240a:	88 0f       	add	r24, r24
    240c:	08 f0       	brcs	.+2      	; 0x2410 <__addsf3x+0x9e>
    240e:	99 27       	eor	r25, r25
    2410:	ee 0f       	add	r30, r30
    2412:	97 95       	ror	r25
    2414:	87 95       	ror	r24
    2416:	08 95       	ret

00002418 <__fixsfsi>:
    2418:	04 d0       	rcall	.+8      	; 0x2422 <__fixunssfsi>
    241a:	68 94       	set
    241c:	b1 11       	cpse	r27, r1
    241e:	b5 c0       	rjmp	.+362    	; 0x258a <__fp_szero>
    2420:	08 95       	ret

00002422 <__fixunssfsi>:
    2422:	98 d0       	rcall	.+304    	; 0x2554 <__fp_splitA>
    2424:	88 f0       	brcs	.+34     	; 0x2448 <__fixunssfsi+0x26>
    2426:	9f 57       	subi	r25, 0x7F	; 127
    2428:	90 f0       	brcs	.+36     	; 0x244e <__fixunssfsi+0x2c>
    242a:	b9 2f       	mov	r27, r25
    242c:	99 27       	eor	r25, r25
    242e:	b7 51       	subi	r27, 0x17	; 23
    2430:	a0 f0       	brcs	.+40     	; 0x245a <__fixunssfsi+0x38>
    2432:	d1 f0       	breq	.+52     	; 0x2468 <__fixunssfsi+0x46>
    2434:	66 0f       	add	r22, r22
    2436:	77 1f       	adc	r23, r23
    2438:	88 1f       	adc	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	1a f0       	brmi	.+6      	; 0x2444 <__fixunssfsi+0x22>
    243e:	ba 95       	dec	r27
    2440:	c9 f7       	brne	.-14     	; 0x2434 <__fixunssfsi+0x12>
    2442:	12 c0       	rjmp	.+36     	; 0x2468 <__fixunssfsi+0x46>
    2444:	b1 30       	cpi	r27, 0x01	; 1
    2446:	81 f0       	breq	.+32     	; 0x2468 <__fixunssfsi+0x46>
    2448:	9f d0       	rcall	.+318    	; 0x2588 <__fp_zero>
    244a:	b1 e0       	ldi	r27, 0x01	; 1
    244c:	08 95       	ret
    244e:	9c c0       	rjmp	.+312    	; 0x2588 <__fp_zero>
    2450:	67 2f       	mov	r22, r23
    2452:	78 2f       	mov	r23, r24
    2454:	88 27       	eor	r24, r24
    2456:	b8 5f       	subi	r27, 0xF8	; 248
    2458:	39 f0       	breq	.+14     	; 0x2468 <__fixunssfsi+0x46>
    245a:	b9 3f       	cpi	r27, 0xF9	; 249
    245c:	cc f3       	brlt	.-14     	; 0x2450 <__fixunssfsi+0x2e>
    245e:	86 95       	lsr	r24
    2460:	77 95       	ror	r23
    2462:	67 95       	ror	r22
    2464:	b3 95       	inc	r27
    2466:	d9 f7       	brne	.-10     	; 0x245e <__fixunssfsi+0x3c>
    2468:	3e f4       	brtc	.+14     	; 0x2478 <__fixunssfsi+0x56>
    246a:	90 95       	com	r25
    246c:	80 95       	com	r24
    246e:	70 95       	com	r23
    2470:	61 95       	neg	r22
    2472:	7f 4f       	sbci	r23, 0xFF	; 255
    2474:	8f 4f       	sbci	r24, 0xFF	; 255
    2476:	9f 4f       	sbci	r25, 0xFF	; 255
    2478:	08 95       	ret

0000247a <__floatunsisf>:
    247a:	e8 94       	clt
    247c:	09 c0       	rjmp	.+18     	; 0x2490 <__floatsisf+0x12>

0000247e <__floatsisf>:
    247e:	97 fb       	bst	r25, 7
    2480:	3e f4       	brtc	.+14     	; 0x2490 <__floatsisf+0x12>
    2482:	90 95       	com	r25
    2484:	80 95       	com	r24
    2486:	70 95       	com	r23
    2488:	61 95       	neg	r22
    248a:	7f 4f       	sbci	r23, 0xFF	; 255
    248c:	8f 4f       	sbci	r24, 0xFF	; 255
    248e:	9f 4f       	sbci	r25, 0xFF	; 255
    2490:	99 23       	and	r25, r25
    2492:	a9 f0       	breq	.+42     	; 0x24be <__floatsisf+0x40>
    2494:	f9 2f       	mov	r31, r25
    2496:	96 e9       	ldi	r25, 0x96	; 150
    2498:	bb 27       	eor	r27, r27
    249a:	93 95       	inc	r25
    249c:	f6 95       	lsr	r31
    249e:	87 95       	ror	r24
    24a0:	77 95       	ror	r23
    24a2:	67 95       	ror	r22
    24a4:	b7 95       	ror	r27
    24a6:	f1 11       	cpse	r31, r1
    24a8:	f8 cf       	rjmp	.-16     	; 0x249a <__floatsisf+0x1c>
    24aa:	fa f4       	brpl	.+62     	; 0x24ea <__floatsisf+0x6c>
    24ac:	bb 0f       	add	r27, r27
    24ae:	11 f4       	brne	.+4      	; 0x24b4 <__floatsisf+0x36>
    24b0:	60 ff       	sbrs	r22, 0
    24b2:	1b c0       	rjmp	.+54     	; 0x24ea <__floatsisf+0x6c>
    24b4:	6f 5f       	subi	r22, 0xFF	; 255
    24b6:	7f 4f       	sbci	r23, 0xFF	; 255
    24b8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	16 c0       	rjmp	.+44     	; 0x24ea <__floatsisf+0x6c>
    24be:	88 23       	and	r24, r24
    24c0:	11 f0       	breq	.+4      	; 0x24c6 <__floatsisf+0x48>
    24c2:	96 e9       	ldi	r25, 0x96	; 150
    24c4:	11 c0       	rjmp	.+34     	; 0x24e8 <__floatsisf+0x6a>
    24c6:	77 23       	and	r23, r23
    24c8:	21 f0       	breq	.+8      	; 0x24d2 <__floatsisf+0x54>
    24ca:	9e e8       	ldi	r25, 0x8E	; 142
    24cc:	87 2f       	mov	r24, r23
    24ce:	76 2f       	mov	r23, r22
    24d0:	05 c0       	rjmp	.+10     	; 0x24dc <__floatsisf+0x5e>
    24d2:	66 23       	and	r22, r22
    24d4:	71 f0       	breq	.+28     	; 0x24f2 <__floatsisf+0x74>
    24d6:	96 e8       	ldi	r25, 0x86	; 134
    24d8:	86 2f       	mov	r24, r22
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	2a f0       	brmi	.+10     	; 0x24ea <__floatsisf+0x6c>
    24e0:	9a 95       	dec	r25
    24e2:	66 0f       	add	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	da f7       	brpl	.-10     	; 0x24e0 <__floatsisf+0x62>
    24ea:	88 0f       	add	r24, r24
    24ec:	96 95       	lsr	r25
    24ee:	87 95       	ror	r24
    24f0:	97 f9       	bld	r25, 7
    24f2:	08 95       	ret

000024f4 <__fp_inf>:
    24f4:	97 f9       	bld	r25, 7
    24f6:	9f 67       	ori	r25, 0x7F	; 127
    24f8:	80 e8       	ldi	r24, 0x80	; 128
    24fa:	70 e0       	ldi	r23, 0x00	; 0
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	08 95       	ret

00002500 <__fp_nan>:
    2500:	9f ef       	ldi	r25, 0xFF	; 255
    2502:	80 ec       	ldi	r24, 0xC0	; 192
    2504:	08 95       	ret

00002506 <__fp_pscA>:
    2506:	00 24       	eor	r0, r0
    2508:	0a 94       	dec	r0
    250a:	16 16       	cp	r1, r22
    250c:	17 06       	cpc	r1, r23
    250e:	18 06       	cpc	r1, r24
    2510:	09 06       	cpc	r0, r25
    2512:	08 95       	ret

00002514 <__fp_pscB>:
    2514:	00 24       	eor	r0, r0
    2516:	0a 94       	dec	r0
    2518:	12 16       	cp	r1, r18
    251a:	13 06       	cpc	r1, r19
    251c:	14 06       	cpc	r1, r20
    251e:	05 06       	cpc	r0, r21
    2520:	08 95       	ret

00002522 <__fp_round>:
    2522:	09 2e       	mov	r0, r25
    2524:	03 94       	inc	r0
    2526:	00 0c       	add	r0, r0
    2528:	11 f4       	brne	.+4      	; 0x252e <__fp_round+0xc>
    252a:	88 23       	and	r24, r24
    252c:	52 f0       	brmi	.+20     	; 0x2542 <__fp_round+0x20>
    252e:	bb 0f       	add	r27, r27
    2530:	40 f4       	brcc	.+16     	; 0x2542 <__fp_round+0x20>
    2532:	bf 2b       	or	r27, r31
    2534:	11 f4       	brne	.+4      	; 0x253a <__fp_round+0x18>
    2536:	60 ff       	sbrs	r22, 0
    2538:	04 c0       	rjmp	.+8      	; 0x2542 <__fp_round+0x20>
    253a:	6f 5f       	subi	r22, 0xFF	; 255
    253c:	7f 4f       	sbci	r23, 0xFF	; 255
    253e:	8f 4f       	sbci	r24, 0xFF	; 255
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	08 95       	ret

00002544 <__fp_split3>:
    2544:	57 fd       	sbrc	r21, 7
    2546:	90 58       	subi	r25, 0x80	; 128
    2548:	44 0f       	add	r20, r20
    254a:	55 1f       	adc	r21, r21
    254c:	59 f0       	breq	.+22     	; 0x2564 <__fp_splitA+0x10>
    254e:	5f 3f       	cpi	r21, 0xFF	; 255
    2550:	71 f0       	breq	.+28     	; 0x256e <__fp_splitA+0x1a>
    2552:	47 95       	ror	r20

00002554 <__fp_splitA>:
    2554:	88 0f       	add	r24, r24
    2556:	97 fb       	bst	r25, 7
    2558:	99 1f       	adc	r25, r25
    255a:	61 f0       	breq	.+24     	; 0x2574 <__fp_splitA+0x20>
    255c:	9f 3f       	cpi	r25, 0xFF	; 255
    255e:	79 f0       	breq	.+30     	; 0x257e <__fp_splitA+0x2a>
    2560:	87 95       	ror	r24
    2562:	08 95       	ret
    2564:	12 16       	cp	r1, r18
    2566:	13 06       	cpc	r1, r19
    2568:	14 06       	cpc	r1, r20
    256a:	55 1f       	adc	r21, r21
    256c:	f2 cf       	rjmp	.-28     	; 0x2552 <__fp_split3+0xe>
    256e:	46 95       	lsr	r20
    2570:	f1 df       	rcall	.-30     	; 0x2554 <__fp_splitA>
    2572:	08 c0       	rjmp	.+16     	; 0x2584 <__fp_splitA+0x30>
    2574:	16 16       	cp	r1, r22
    2576:	17 06       	cpc	r1, r23
    2578:	18 06       	cpc	r1, r24
    257a:	99 1f       	adc	r25, r25
    257c:	f1 cf       	rjmp	.-30     	; 0x2560 <__fp_splitA+0xc>
    257e:	86 95       	lsr	r24
    2580:	71 05       	cpc	r23, r1
    2582:	61 05       	cpc	r22, r1
    2584:	08 94       	sec
    2586:	08 95       	ret

00002588 <__fp_zero>:
    2588:	e8 94       	clt

0000258a <__fp_szero>:
    258a:	bb 27       	eor	r27, r27
    258c:	66 27       	eor	r22, r22
    258e:	77 27       	eor	r23, r23
    2590:	cb 01       	movw	r24, r22
    2592:	97 f9       	bld	r25, 7
    2594:	08 95       	ret

00002596 <__mulsf3>:
    2596:	0b d0       	rcall	.+22     	; 0x25ae <__mulsf3x>
    2598:	c4 cf       	rjmp	.-120    	; 0x2522 <__fp_round>
    259a:	b5 df       	rcall	.-150    	; 0x2506 <__fp_pscA>
    259c:	28 f0       	brcs	.+10     	; 0x25a8 <__mulsf3+0x12>
    259e:	ba df       	rcall	.-140    	; 0x2514 <__fp_pscB>
    25a0:	18 f0       	brcs	.+6      	; 0x25a8 <__mulsf3+0x12>
    25a2:	95 23       	and	r25, r21
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <__mulsf3+0x12>
    25a6:	a6 cf       	rjmp	.-180    	; 0x24f4 <__fp_inf>
    25a8:	ab cf       	rjmp	.-170    	; 0x2500 <__fp_nan>
    25aa:	11 24       	eor	r1, r1
    25ac:	ee cf       	rjmp	.-36     	; 0x258a <__fp_szero>

000025ae <__mulsf3x>:
    25ae:	ca df       	rcall	.-108    	; 0x2544 <__fp_split3>
    25b0:	a0 f3       	brcs	.-24     	; 0x259a <__mulsf3+0x4>

000025b2 <__mulsf3_pse>:
    25b2:	95 9f       	mul	r25, r21
    25b4:	d1 f3       	breq	.-12     	; 0x25aa <__mulsf3+0x14>
    25b6:	95 0f       	add	r25, r21
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	55 1f       	adc	r21, r21
    25bc:	62 9f       	mul	r22, r18
    25be:	f0 01       	movw	r30, r0
    25c0:	72 9f       	mul	r23, r18
    25c2:	bb 27       	eor	r27, r27
    25c4:	f0 0d       	add	r31, r0
    25c6:	b1 1d       	adc	r27, r1
    25c8:	63 9f       	mul	r22, r19
    25ca:	aa 27       	eor	r26, r26
    25cc:	f0 0d       	add	r31, r0
    25ce:	b1 1d       	adc	r27, r1
    25d0:	aa 1f       	adc	r26, r26
    25d2:	64 9f       	mul	r22, r20
    25d4:	66 27       	eor	r22, r22
    25d6:	b0 0d       	add	r27, r0
    25d8:	a1 1d       	adc	r26, r1
    25da:	66 1f       	adc	r22, r22
    25dc:	82 9f       	mul	r24, r18
    25de:	22 27       	eor	r18, r18
    25e0:	b0 0d       	add	r27, r0
    25e2:	a1 1d       	adc	r26, r1
    25e4:	62 1f       	adc	r22, r18
    25e6:	73 9f       	mul	r23, r19
    25e8:	b0 0d       	add	r27, r0
    25ea:	a1 1d       	adc	r26, r1
    25ec:	62 1f       	adc	r22, r18
    25ee:	83 9f       	mul	r24, r19
    25f0:	a0 0d       	add	r26, r0
    25f2:	61 1d       	adc	r22, r1
    25f4:	22 1f       	adc	r18, r18
    25f6:	74 9f       	mul	r23, r20
    25f8:	33 27       	eor	r19, r19
    25fa:	a0 0d       	add	r26, r0
    25fc:	61 1d       	adc	r22, r1
    25fe:	23 1f       	adc	r18, r19
    2600:	84 9f       	mul	r24, r20
    2602:	60 0d       	add	r22, r0
    2604:	21 1d       	adc	r18, r1
    2606:	82 2f       	mov	r24, r18
    2608:	76 2f       	mov	r23, r22
    260a:	6a 2f       	mov	r22, r26
    260c:	11 24       	eor	r1, r1
    260e:	9f 57       	subi	r25, 0x7F	; 127
    2610:	50 40       	sbci	r21, 0x00	; 0
    2612:	8a f0       	brmi	.+34     	; 0x2636 <__mulsf3_pse+0x84>
    2614:	e1 f0       	breq	.+56     	; 0x264e <__mulsf3_pse+0x9c>
    2616:	88 23       	and	r24, r24
    2618:	4a f0       	brmi	.+18     	; 0x262c <__mulsf3_pse+0x7a>
    261a:	ee 0f       	add	r30, r30
    261c:	ff 1f       	adc	r31, r31
    261e:	bb 1f       	adc	r27, r27
    2620:	66 1f       	adc	r22, r22
    2622:	77 1f       	adc	r23, r23
    2624:	88 1f       	adc	r24, r24
    2626:	91 50       	subi	r25, 0x01	; 1
    2628:	50 40       	sbci	r21, 0x00	; 0
    262a:	a9 f7       	brne	.-22     	; 0x2616 <__mulsf3_pse+0x64>
    262c:	9e 3f       	cpi	r25, 0xFE	; 254
    262e:	51 05       	cpc	r21, r1
    2630:	70 f0       	brcs	.+28     	; 0x264e <__mulsf3_pse+0x9c>
    2632:	60 cf       	rjmp	.-320    	; 0x24f4 <__fp_inf>
    2634:	aa cf       	rjmp	.-172    	; 0x258a <__fp_szero>
    2636:	5f 3f       	cpi	r21, 0xFF	; 255
    2638:	ec f3       	brlt	.-6      	; 0x2634 <__mulsf3_pse+0x82>
    263a:	98 3e       	cpi	r25, 0xE8	; 232
    263c:	dc f3       	brlt	.-10     	; 0x2634 <__mulsf3_pse+0x82>
    263e:	86 95       	lsr	r24
    2640:	77 95       	ror	r23
    2642:	67 95       	ror	r22
    2644:	b7 95       	ror	r27
    2646:	f7 95       	ror	r31
    2648:	e7 95       	ror	r30
    264a:	9f 5f       	subi	r25, 0xFF	; 255
    264c:	c1 f7       	brne	.-16     	; 0x263e <__mulsf3_pse+0x8c>
    264e:	fe 2b       	or	r31, r30
    2650:	88 0f       	add	r24, r24
    2652:	91 1d       	adc	r25, r1
    2654:	96 95       	lsr	r25
    2656:	87 95       	ror	r24
    2658:	97 f9       	bld	r25, 7
    265a:	08 95       	ret

0000265c <__udivmodsi4>:
    265c:	a1 e2       	ldi	r26, 0x21	; 33
    265e:	1a 2e       	mov	r1, r26
    2660:	aa 1b       	sub	r26, r26
    2662:	bb 1b       	sub	r27, r27
    2664:	fd 01       	movw	r30, r26
    2666:	0d c0       	rjmp	.+26     	; 0x2682 <__udivmodsi4_ep>

00002668 <__udivmodsi4_loop>:
    2668:	aa 1f       	adc	r26, r26
    266a:	bb 1f       	adc	r27, r27
    266c:	ee 1f       	adc	r30, r30
    266e:	ff 1f       	adc	r31, r31
    2670:	a2 17       	cp	r26, r18
    2672:	b3 07       	cpc	r27, r19
    2674:	e4 07       	cpc	r30, r20
    2676:	f5 07       	cpc	r31, r21
    2678:	20 f0       	brcs	.+8      	; 0x2682 <__udivmodsi4_ep>
    267a:	a2 1b       	sub	r26, r18
    267c:	b3 0b       	sbc	r27, r19
    267e:	e4 0b       	sbc	r30, r20
    2680:	f5 0b       	sbc	r31, r21

00002682 <__udivmodsi4_ep>:
    2682:	66 1f       	adc	r22, r22
    2684:	77 1f       	adc	r23, r23
    2686:	88 1f       	adc	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	1a 94       	dec	r1
    268c:	69 f7       	brne	.-38     	; 0x2668 <__udivmodsi4_loop>
    268e:	60 95       	com	r22
    2690:	70 95       	com	r23
    2692:	80 95       	com	r24
    2694:	90 95       	com	r25
    2696:	9b 01       	movw	r18, r22
    2698:	ac 01       	movw	r20, r24
    269a:	bd 01       	movw	r22, r26
    269c:	cf 01       	movw	r24, r30
    269e:	08 95       	ret

000026a0 <__tablejump2__>:
    26a0:	ee 0f       	add	r30, r30
    26a2:	ff 1f       	adc	r31, r31
    26a4:	88 1f       	adc	r24, r24
    26a6:	8b bf       	out	0x3b, r24	; 59
    26a8:	07 90       	elpm	r0, Z+
    26aa:	f6 91       	elpm	r31, Z
    26ac:	e0 2d       	mov	r30, r0
    26ae:	19 94       	eijmp

000026b0 <__umulhisi3>:
    26b0:	a2 9f       	mul	r26, r18
    26b2:	b0 01       	movw	r22, r0
    26b4:	b3 9f       	mul	r27, r19
    26b6:	c0 01       	movw	r24, r0
    26b8:	a3 9f       	mul	r26, r19
    26ba:	70 0d       	add	r23, r0
    26bc:	81 1d       	adc	r24, r1
    26be:	11 24       	eor	r1, r1
    26c0:	91 1d       	adc	r25, r1
    26c2:	b2 9f       	mul	r27, r18
    26c4:	70 0d       	add	r23, r0
    26c6:	81 1d       	adc	r24, r1
    26c8:	11 24       	eor	r1, r1
    26ca:	91 1d       	adc	r25, r1
    26cc:	08 95       	ret

000026ce <__muluhisi3>:
    26ce:	f0 df       	rcall	.-32     	; 0x26b0 <__umulhisi3>
    26d0:	a5 9f       	mul	r26, r21
    26d2:	90 0d       	add	r25, r0
    26d4:	b4 9f       	mul	r27, r20
    26d6:	90 0d       	add	r25, r0
    26d8:	a4 9f       	mul	r26, r20
    26da:	80 0d       	add	r24, r0
    26dc:	91 1d       	adc	r25, r1
    26de:	11 24       	eor	r1, r1
    26e0:	08 95       	ret

000026e2 <malloc>:
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	82 30       	cpi	r24, 0x02	; 2
    26ec:	91 05       	cpc	r25, r1
    26ee:	10 f4       	brcc	.+4      	; 0x26f4 <malloc+0x12>
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	e0 91 fd 04 	lds	r30, 0x04FD	; 0x8004fd <__flp>
    26f8:	f0 91 fe 04 	lds	r31, 0x04FE	; 0x8004fe <__flp+0x1>
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	a0 e0       	ldi	r26, 0x00	; 0
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	30 97       	sbiw	r30, 0x00	; 0
    2706:	19 f1       	breq	.+70     	; 0x274e <malloc+0x6c>
    2708:	40 81       	ld	r20, Z
    270a:	51 81       	ldd	r21, Z+1	; 0x01
    270c:	02 81       	ldd	r16, Z+2	; 0x02
    270e:	13 81       	ldd	r17, Z+3	; 0x03
    2710:	48 17       	cp	r20, r24
    2712:	59 07       	cpc	r21, r25
    2714:	c8 f0       	brcs	.+50     	; 0x2748 <malloc+0x66>
    2716:	84 17       	cp	r24, r20
    2718:	95 07       	cpc	r25, r21
    271a:	69 f4       	brne	.+26     	; 0x2736 <malloc+0x54>
    271c:	10 97       	sbiw	r26, 0x00	; 0
    271e:	31 f0       	breq	.+12     	; 0x272c <malloc+0x4a>
    2720:	12 96       	adiw	r26, 0x02	; 2
    2722:	0c 93       	st	X, r16
    2724:	12 97       	sbiw	r26, 0x02	; 2
    2726:	13 96       	adiw	r26, 0x03	; 3
    2728:	1c 93       	st	X, r17
    272a:	27 c0       	rjmp	.+78     	; 0x277a <malloc+0x98>
    272c:	00 93 fd 04 	sts	0x04FD, r16	; 0x8004fd <__flp>
    2730:	10 93 fe 04 	sts	0x04FE, r17	; 0x8004fe <__flp+0x1>
    2734:	22 c0       	rjmp	.+68     	; 0x277a <malloc+0x98>
    2736:	21 15       	cp	r18, r1
    2738:	31 05       	cpc	r19, r1
    273a:	19 f0       	breq	.+6      	; 0x2742 <malloc+0x60>
    273c:	42 17       	cp	r20, r18
    273e:	53 07       	cpc	r21, r19
    2740:	18 f4       	brcc	.+6      	; 0x2748 <malloc+0x66>
    2742:	9a 01       	movw	r18, r20
    2744:	bd 01       	movw	r22, r26
    2746:	ef 01       	movw	r28, r30
    2748:	df 01       	movw	r26, r30
    274a:	f8 01       	movw	r30, r16
    274c:	db cf       	rjmp	.-74     	; 0x2704 <malloc+0x22>
    274e:	21 15       	cp	r18, r1
    2750:	31 05       	cpc	r19, r1
    2752:	f9 f0       	breq	.+62     	; 0x2792 <malloc+0xb0>
    2754:	28 1b       	sub	r18, r24
    2756:	39 0b       	sbc	r19, r25
    2758:	24 30       	cpi	r18, 0x04	; 4
    275a:	31 05       	cpc	r19, r1
    275c:	80 f4       	brcc	.+32     	; 0x277e <malloc+0x9c>
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	61 15       	cp	r22, r1
    2764:	71 05       	cpc	r23, r1
    2766:	21 f0       	breq	.+8      	; 0x2770 <malloc+0x8e>
    2768:	fb 01       	movw	r30, r22
    276a:	93 83       	std	Z+3, r25	; 0x03
    276c:	82 83       	std	Z+2, r24	; 0x02
    276e:	04 c0       	rjmp	.+8      	; 0x2778 <malloc+0x96>
    2770:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <__flp+0x1>
    2774:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <__flp>
    2778:	fe 01       	movw	r30, r28
    277a:	32 96       	adiw	r30, 0x02	; 2
    277c:	44 c0       	rjmp	.+136    	; 0x2806 <malloc+0x124>
    277e:	fe 01       	movw	r30, r28
    2780:	e2 0f       	add	r30, r18
    2782:	f3 1f       	adc	r31, r19
    2784:	81 93       	st	Z+, r24
    2786:	91 93       	st	Z+, r25
    2788:	22 50       	subi	r18, 0x02	; 2
    278a:	31 09       	sbc	r19, r1
    278c:	39 83       	std	Y+1, r19	; 0x01
    278e:	28 83       	st	Y, r18
    2790:	3a c0       	rjmp	.+116    	; 0x2806 <malloc+0x124>
    2792:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <__brkval>
    2796:	30 91 fc 04 	lds	r19, 0x04FC	; 0x8004fc <__brkval+0x1>
    279a:	23 2b       	or	r18, r19
    279c:	41 f4       	brne	.+16     	; 0x27ae <malloc+0xcc>
    279e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    27a2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    27a6:	30 93 fc 04 	sts	0x04FC, r19	; 0x8004fc <__brkval+0x1>
    27aa:	20 93 fb 04 	sts	0x04FB, r18	; 0x8004fb <__brkval>
    27ae:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    27b2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    27b6:	21 15       	cp	r18, r1
    27b8:	31 05       	cpc	r19, r1
    27ba:	41 f4       	brne	.+16     	; 0x27cc <malloc+0xea>
    27bc:	2d b7       	in	r18, 0x3d	; 61
    27be:	3e b7       	in	r19, 0x3e	; 62
    27c0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    27c4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    27c8:	24 1b       	sub	r18, r20
    27ca:	35 0b       	sbc	r19, r21
    27cc:	e0 91 fb 04 	lds	r30, 0x04FB	; 0x8004fb <__brkval>
    27d0:	f0 91 fc 04 	lds	r31, 0x04FC	; 0x8004fc <__brkval+0x1>
    27d4:	e2 17       	cp	r30, r18
    27d6:	f3 07       	cpc	r31, r19
    27d8:	a0 f4       	brcc	.+40     	; 0x2802 <malloc+0x120>
    27da:	2e 1b       	sub	r18, r30
    27dc:	3f 0b       	sbc	r19, r31
    27de:	28 17       	cp	r18, r24
    27e0:	39 07       	cpc	r19, r25
    27e2:	78 f0       	brcs	.+30     	; 0x2802 <malloc+0x120>
    27e4:	ac 01       	movw	r20, r24
    27e6:	4e 5f       	subi	r20, 0xFE	; 254
    27e8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ea:	24 17       	cp	r18, r20
    27ec:	35 07       	cpc	r19, r21
    27ee:	48 f0       	brcs	.+18     	; 0x2802 <malloc+0x120>
    27f0:	4e 0f       	add	r20, r30
    27f2:	5f 1f       	adc	r21, r31
    27f4:	50 93 fc 04 	sts	0x04FC, r21	; 0x8004fc <__brkval+0x1>
    27f8:	40 93 fb 04 	sts	0x04FB, r20	; 0x8004fb <__brkval>
    27fc:	81 93       	st	Z+, r24
    27fe:	91 93       	st	Z+, r25
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <malloc+0x124>
    2802:	e0 e0       	ldi	r30, 0x00	; 0
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	cf 01       	movw	r24, r30
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	08 95       	ret

00002812 <free>:
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	09 f4       	brne	.+2      	; 0x281c <free+0xa>
    281a:	81 c0       	rjmp	.+258    	; 0x291e <free+0x10c>
    281c:	fc 01       	movw	r30, r24
    281e:	32 97       	sbiw	r30, 0x02	; 2
    2820:	13 82       	std	Z+3, r1	; 0x03
    2822:	12 82       	std	Z+2, r1	; 0x02
    2824:	a0 91 fd 04 	lds	r26, 0x04FD	; 0x8004fd <__flp>
    2828:	b0 91 fe 04 	lds	r27, 0x04FE	; 0x8004fe <__flp+0x1>
    282c:	10 97       	sbiw	r26, 0x00	; 0
    282e:	81 f4       	brne	.+32     	; 0x2850 <free+0x3e>
    2830:	20 81       	ld	r18, Z
    2832:	31 81       	ldd	r19, Z+1	; 0x01
    2834:	82 0f       	add	r24, r18
    2836:	93 1f       	adc	r25, r19
    2838:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <__brkval>
    283c:	30 91 fc 04 	lds	r19, 0x04FC	; 0x8004fc <__brkval+0x1>
    2840:	28 17       	cp	r18, r24
    2842:	39 07       	cpc	r19, r25
    2844:	51 f5       	brne	.+84     	; 0x289a <free+0x88>
    2846:	f0 93 fc 04 	sts	0x04FC, r31	; 0x8004fc <__brkval+0x1>
    284a:	e0 93 fb 04 	sts	0x04FB, r30	; 0x8004fb <__brkval>
    284e:	67 c0       	rjmp	.+206    	; 0x291e <free+0x10c>
    2850:	ed 01       	movw	r28, r26
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	ce 17       	cp	r28, r30
    2858:	df 07       	cpc	r29, r31
    285a:	40 f4       	brcc	.+16     	; 0x286c <free+0x5a>
    285c:	4a 81       	ldd	r20, Y+2	; 0x02
    285e:	5b 81       	ldd	r21, Y+3	; 0x03
    2860:	9e 01       	movw	r18, r28
    2862:	41 15       	cp	r20, r1
    2864:	51 05       	cpc	r21, r1
    2866:	f1 f0       	breq	.+60     	; 0x28a4 <free+0x92>
    2868:	ea 01       	movw	r28, r20
    286a:	f5 cf       	rjmp	.-22     	; 0x2856 <free+0x44>
    286c:	d3 83       	std	Z+3, r29	; 0x03
    286e:	c2 83       	std	Z+2, r28	; 0x02
    2870:	40 81       	ld	r20, Z
    2872:	51 81       	ldd	r21, Z+1	; 0x01
    2874:	84 0f       	add	r24, r20
    2876:	95 1f       	adc	r25, r21
    2878:	c8 17       	cp	r28, r24
    287a:	d9 07       	cpc	r29, r25
    287c:	59 f4       	brne	.+22     	; 0x2894 <free+0x82>
    287e:	88 81       	ld	r24, Y
    2880:	99 81       	ldd	r25, Y+1	; 0x01
    2882:	84 0f       	add	r24, r20
    2884:	95 1f       	adc	r25, r21
    2886:	02 96       	adiw	r24, 0x02	; 2
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24
    288c:	8a 81       	ldd	r24, Y+2	; 0x02
    288e:	9b 81       	ldd	r25, Y+3	; 0x03
    2890:	93 83       	std	Z+3, r25	; 0x03
    2892:	82 83       	std	Z+2, r24	; 0x02
    2894:	21 15       	cp	r18, r1
    2896:	31 05       	cpc	r19, r1
    2898:	29 f4       	brne	.+10     	; 0x28a4 <free+0x92>
    289a:	f0 93 fe 04 	sts	0x04FE, r31	; 0x8004fe <__flp+0x1>
    289e:	e0 93 fd 04 	sts	0x04FD, r30	; 0x8004fd <__flp>
    28a2:	3d c0       	rjmp	.+122    	; 0x291e <free+0x10c>
    28a4:	e9 01       	movw	r28, r18
    28a6:	fb 83       	std	Y+3, r31	; 0x03
    28a8:	ea 83       	std	Y+2, r30	; 0x02
    28aa:	49 91       	ld	r20, Y+
    28ac:	59 91       	ld	r21, Y+
    28ae:	c4 0f       	add	r28, r20
    28b0:	d5 1f       	adc	r29, r21
    28b2:	ec 17       	cp	r30, r28
    28b4:	fd 07       	cpc	r31, r29
    28b6:	61 f4       	brne	.+24     	; 0x28d0 <free+0xbe>
    28b8:	80 81       	ld	r24, Z
    28ba:	91 81       	ldd	r25, Z+1	; 0x01
    28bc:	84 0f       	add	r24, r20
    28be:	95 1f       	adc	r25, r21
    28c0:	02 96       	adiw	r24, 0x02	; 2
    28c2:	e9 01       	movw	r28, r18
    28c4:	99 83       	std	Y+1, r25	; 0x01
    28c6:	88 83       	st	Y, r24
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	9b 83       	std	Y+3, r25	; 0x03
    28ce:	8a 83       	std	Y+2, r24	; 0x02
    28d0:	e0 e0       	ldi	r30, 0x00	; 0
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	12 96       	adiw	r26, 0x02	; 2
    28d6:	8d 91       	ld	r24, X+
    28d8:	9c 91       	ld	r25, X
    28da:	13 97       	sbiw	r26, 0x03	; 3
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	19 f0       	breq	.+6      	; 0x28e6 <free+0xd4>
    28e0:	fd 01       	movw	r30, r26
    28e2:	dc 01       	movw	r26, r24
    28e4:	f7 cf       	rjmp	.-18     	; 0x28d4 <free+0xc2>
    28e6:	8d 91       	ld	r24, X+
    28e8:	9c 91       	ld	r25, X
    28ea:	11 97       	sbiw	r26, 0x01	; 1
    28ec:	9d 01       	movw	r18, r26
    28ee:	2e 5f       	subi	r18, 0xFE	; 254
    28f0:	3f 4f       	sbci	r19, 0xFF	; 255
    28f2:	82 0f       	add	r24, r18
    28f4:	93 1f       	adc	r25, r19
    28f6:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <__brkval>
    28fa:	30 91 fc 04 	lds	r19, 0x04FC	; 0x8004fc <__brkval+0x1>
    28fe:	28 17       	cp	r18, r24
    2900:	39 07       	cpc	r19, r25
    2902:	69 f4       	brne	.+26     	; 0x291e <free+0x10c>
    2904:	30 97       	sbiw	r30, 0x00	; 0
    2906:	29 f4       	brne	.+10     	; 0x2912 <free+0x100>
    2908:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <__flp+0x1>
    290c:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <__flp>
    2910:	02 c0       	rjmp	.+4      	; 0x2916 <free+0x104>
    2912:	13 82       	std	Z+3, r1	; 0x03
    2914:	12 82       	std	Z+2, r1	; 0x02
    2916:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <__brkval+0x1>
    291a:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <__brkval>
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	08 95       	ret

00002924 <memcpy>:
    2924:	fb 01       	movw	r30, r22
    2926:	dc 01       	movw	r26, r24
    2928:	02 c0       	rjmp	.+4      	; 0x292e <memcpy+0xa>
    292a:	01 90       	ld	r0, Z+
    292c:	0d 92       	st	X+, r0
    292e:	41 50       	subi	r20, 0x01	; 1
    2930:	50 40       	sbci	r21, 0x00	; 0
    2932:	d8 f7       	brcc	.-10     	; 0x292a <memcpy+0x6>
    2934:	08 95       	ret

00002936 <memset>:
    2936:	dc 01       	movw	r26, r24
    2938:	01 c0       	rjmp	.+2      	; 0x293c <memset+0x6>
    293a:	6d 93       	st	X+, r22
    293c:	41 50       	subi	r20, 0x01	; 1
    293e:	50 40       	sbci	r21, 0x00	; 0
    2940:	e0 f7       	brcc	.-8      	; 0x293a <memset+0x4>
    2942:	08 95       	ret

00002944 <__itoa_ncheck>:
    2944:	bb 27       	eor	r27, r27
    2946:	4a 30       	cpi	r20, 0x0A	; 10
    2948:	31 f4       	brne	.+12     	; 0x2956 <__itoa_ncheck+0x12>
    294a:	99 23       	and	r25, r25
    294c:	22 f4       	brpl	.+8      	; 0x2956 <__itoa_ncheck+0x12>
    294e:	bd e2       	ldi	r27, 0x2D	; 45
    2950:	90 95       	com	r25
    2952:	81 95       	neg	r24
    2954:	9f 4f       	sbci	r25, 0xFF	; 255
    2956:	01 c0       	rjmp	.+2      	; 0x295a <__utoa_common>

00002958 <__utoa_ncheck>:
    2958:	bb 27       	eor	r27, r27

0000295a <__utoa_common>:
    295a:	fb 01       	movw	r30, r22
    295c:	55 27       	eor	r21, r21
    295e:	aa 27       	eor	r26, r26
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	aa 1f       	adc	r26, r26
    2966:	a4 17       	cp	r26, r20
    2968:	10 f0       	brcs	.+4      	; 0x296e <__utoa_common+0x14>
    296a:	a4 1b       	sub	r26, r20
    296c:	83 95       	inc	r24
    296e:	50 51       	subi	r21, 0x10	; 16
    2970:	b9 f7       	brne	.-18     	; 0x2960 <__utoa_common+0x6>
    2972:	a0 5d       	subi	r26, 0xD0	; 208
    2974:	aa 33       	cpi	r26, 0x3A	; 58
    2976:	08 f0       	brcs	.+2      	; 0x297a <__utoa_common+0x20>
    2978:	a9 5d       	subi	r26, 0xD9	; 217
    297a:	a1 93       	st	Z+, r26
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	79 f7       	brne	.-34     	; 0x295e <__utoa_common+0x4>
    2980:	b1 11       	cpse	r27, r1
    2982:	b1 93       	st	Z+, r27
    2984:	11 92       	st	Z+, r1
    2986:	cb 01       	movw	r24, r22
    2988:	00 c0       	rjmp	.+0      	; 0x298a <strrev>

0000298a <strrev>:
    298a:	dc 01       	movw	r26, r24
    298c:	fc 01       	movw	r30, r24
    298e:	67 2f       	mov	r22, r23
    2990:	71 91       	ld	r23, Z+
    2992:	77 23       	and	r23, r23
    2994:	e1 f7       	brne	.-8      	; 0x298e <strrev+0x4>
    2996:	32 97       	sbiw	r30, 0x02	; 2
    2998:	04 c0       	rjmp	.+8      	; 0x29a2 <strrev+0x18>
    299a:	7c 91       	ld	r23, X
    299c:	6d 93       	st	X+, r22
    299e:	70 83       	st	Z, r23
    29a0:	62 91       	ld	r22, -Z
    29a2:	ae 17       	cp	r26, r30
    29a4:	bf 07       	cpc	r27, r31
    29a6:	c8 f3       	brcs	.-14     	; 0x299a <strrev+0x10>
    29a8:	08 95       	ret

000029aa <_exit>:
    29aa:	f8 94       	cli

000029ac <__stop_program>:
    29ac:	ff cf       	rjmp	.-2      	; 0x29ac <__stop_program>
