
Temperatuur_luchtvochtigheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800200  000029be  00002a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000263  008002a0  008002a0  00002af2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002af2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e8  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008028  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ef8  00000000  00000000  0000b174  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c99  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001558  00000000  00000000  00011d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002119  00000000  00000000  00013260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000774a  00000000  00000000  00015379  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c0  00000000  00000000  0001cac3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c1       	rjmp	.+728    	; 0x2da <__ctors_end>
       2:	00 00       	nop
       4:	8a c1       	rjmp	.+788    	; 0x31a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c1       	rjmp	.+784    	; 0x31a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c1       	rjmp	.+780    	; 0x31a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c1       	rjmp	.+776    	; 0x31a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c1       	rjmp	.+772    	; 0x31a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c1       	rjmp	.+768    	; 0x31a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c1       	rjmp	.+764    	; 0x31a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c1       	rjmp	.+760    	; 0x31a <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c4       	rjmp	.+2268   	; 0x902 <__vector_9>
      26:	00 00       	nop
      28:	78 c1       	rjmp	.+752    	; 0x31a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c1       	rjmp	.+748    	; 0x31a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c1       	rjmp	.+744    	; 0x31a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c1       	rjmp	.+740    	; 0x31a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c1       	rjmp	.+736    	; 0x31a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c1       	rjmp	.+732    	; 0x31a <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c1       	rjmp	.+728    	; 0x31a <__bad_interrupt>
      42:	00 00       	nop
      44:	2f c7       	rjmp	.+3678   	; 0xea4 <__vector_17>
      46:	00 00       	nop
      48:	68 c1       	rjmp	.+720    	; 0x31a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	66 c1       	rjmp	.+716    	; 0x31a <__bad_interrupt>
      4e:	00 00       	nop
      50:	64 c1       	rjmp	.+712    	; 0x31a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__vector_21>
      58:	60 c1       	rjmp	.+704    	; 0x31a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c1       	rjmp	.+700    	; 0x31a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c1       	rjmp	.+696    	; 0x31a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c1       	rjmp	.+692    	; 0x31a <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_26>
      6c:	56 c1       	rjmp	.+684    	; 0x31a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c1       	rjmp	.+680    	; 0x31a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c1       	rjmp	.+676    	; 0x31a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c1       	rjmp	.+672    	; 0x31a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c1       	rjmp	.+668    	; 0x31a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c1       	rjmp	.+664    	; 0x31a <__bad_interrupt>
      82:	00 00       	nop
      84:	4a c1       	rjmp	.+660    	; 0x31a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c1       	rjmp	.+656    	; 0x31a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c4       	rjmp	.+2490   	; 0xa48 <__vector_35>
      8e:	00 00       	nop
      90:	68 c3       	rjmp	.+1744   	; 0x762 <__vector_36>
      92:	00 00       	nop
      94:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__vector_37>
      98:	40 c1       	rjmp	.+640    	; 0x31a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ac c1       	rjmp	.+856    	; 0x3f6 <__vector_39>
      9e:	00 00       	nop
      a0:	3c c1       	rjmp	.+632    	; 0x31a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3a c1       	rjmp	.+628    	; 0x31a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	38 c1       	rjmp	.+624    	; 0x31a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	36 c1       	rjmp	.+620    	; 0x31a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	34 c1       	rjmp	.+616    	; 0x31a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	32 c1       	rjmp	.+612    	; 0x31a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	30 c1       	rjmp	.+608    	; 0x31a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2e c1       	rjmp	.+604    	; 0x31a <__bad_interrupt>
      be:	00 00       	nop
      c0:	2c c1       	rjmp	.+600    	; 0x31a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2a c1       	rjmp	.+596    	; 0x31a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	28 c1       	rjmp	.+592    	; 0x31a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_51>
      d0:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_52>
      d4:	22 c1       	rjmp	.+580    	; 0x31a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__vector_54>
      dc:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__vector_55>
      e0:	1c c1       	rjmp	.+568    	; 0x31a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1a 02       	muls	r17, r26
      e6:	d5 02       	muls	r29, r21
      e8:	d5 02       	muls	r29, r21
      ea:	d5 02       	muls	r29, r21
      ec:	d5 02       	muls	r29, r21
      ee:	d5 02       	muls	r29, r21
      f0:	d5 02       	muls	r29, r21
      f2:	d5 02       	muls	r29, r21
      f4:	1a 02       	muls	r17, r26
      f6:	d5 02       	muls	r29, r21
      f8:	d5 02       	muls	r29, r21
      fa:	d5 02       	muls	r29, r21
      fc:	d5 02       	muls	r29, r21
      fe:	d5 02       	muls	r29, r21
     100:	d5 02       	muls	r29, r21
     102:	d5 02       	muls	r29, r21
     104:	1c 02       	muls	r17, r28
     106:	d5 02       	muls	r29, r21
     108:	d5 02       	muls	r29, r21
     10a:	d5 02       	muls	r29, r21
     10c:	d5 02       	muls	r29, r21
     10e:	d5 02       	muls	r29, r21
     110:	d5 02       	muls	r29, r21
     112:	d5 02       	muls	r29, r21
     114:	39 02       	muls	r19, r25
     116:	d5 02       	muls	r29, r21
     118:	d5 02       	muls	r29, r21
     11a:	d5 02       	muls	r29, r21
     11c:	d5 02       	muls	r29, r21
     11e:	d5 02       	muls	r29, r21
     120:	d5 02       	muls	r29, r21
     122:	d5 02       	muls	r29, r21
     124:	1c 02       	muls	r17, r28
     126:	d5 02       	muls	r29, r21
     128:	d5 02       	muls	r29, r21
     12a:	d5 02       	muls	r29, r21
     12c:	d5 02       	muls	r29, r21
     12e:	d5 02       	muls	r29, r21
     130:	d5 02       	muls	r29, r21
     132:	d5 02       	muls	r29, r21
     134:	39 02       	muls	r19, r25
     136:	d5 02       	muls	r29, r21
     138:	d5 02       	muls	r29, r21
     13a:	d5 02       	muls	r29, r21
     13c:	d5 02       	muls	r29, r21
     13e:	d5 02       	muls	r29, r21
     140:	d5 02       	muls	r29, r21
     142:	d5 02       	muls	r29, r21
     144:	d1 02       	muls	r29, r17
     146:	d5 02       	muls	r29, r21
     148:	d5 02       	muls	r29, r21
     14a:	d5 02       	muls	r29, r21
     14c:	d5 02       	muls	r29, r21
     14e:	d5 02       	muls	r29, r21
     150:	d5 02       	muls	r29, r21
     152:	d5 02       	muls	r29, r21
     154:	4d 02       	muls	r20, r29
     156:	d5 02       	muls	r29, r21
     158:	d5 02       	muls	r29, r21
     15a:	d5 02       	muls	r29, r21
     15c:	d5 02       	muls	r29, r21
     15e:	d5 02       	muls	r29, r21
     160:	d5 02       	muls	r29, r21
     162:	d5 02       	muls	r29, r21
     164:	70 02       	muls	r23, r16
     166:	d5 02       	muls	r29, r21
     168:	d5 02       	muls	r29, r21
     16a:	d5 02       	muls	r29, r21
     16c:	d5 02       	muls	r29, r21
     16e:	d5 02       	muls	r29, r21
     170:	d5 02       	muls	r29, r21
     172:	d5 02       	muls	r29, r21
     174:	41 02       	muls	r20, r17
     176:	d5 02       	muls	r29, r21
     178:	d5 02       	muls	r29, r21
     17a:	d5 02       	muls	r29, r21
     17c:	d5 02       	muls	r29, r21
     17e:	d5 02       	muls	r29, r21
     180:	d5 02       	muls	r29, r21
     182:	d5 02       	muls	r29, r21
     184:	5f 02       	muls	r21, r31
     186:	d5 02       	muls	r29, r21
     188:	d5 02       	muls	r29, r21
     18a:	d5 02       	muls	r29, r21
     18c:	d5 02       	muls	r29, r21
     18e:	d5 02       	muls	r29, r21
     190:	d5 02       	muls	r29, r21
     192:	d5 02       	muls	r29, r21
     194:	a7 02       	muls	r26, r23
     196:	d5 02       	muls	r29, r21
     198:	d5 02       	muls	r29, r21
     19a:	d5 02       	muls	r29, r21
     19c:	d5 02       	muls	r29, r21
     19e:	d5 02       	muls	r29, r21
     1a0:	d5 02       	muls	r29, r21
     1a2:	d5 02       	muls	r29, r21
     1a4:	a7 02       	muls	r26, r23
     1a6:	d5 02       	muls	r29, r21
     1a8:	d5 02       	muls	r29, r21
     1aa:	d5 02       	muls	r29, r21
     1ac:	d5 02       	muls	r29, r21
     1ae:	d5 02       	muls	r29, r21
     1b0:	d5 02       	muls	r29, r21
     1b2:	d5 02       	muls	r29, r21
     1b4:	a2 02       	muls	r26, r18
     1b6:	d5 02       	muls	r29, r21
     1b8:	d5 02       	muls	r29, r21
     1ba:	d5 02       	muls	r29, r21
     1bc:	d5 02       	muls	r29, r21
     1be:	d5 02       	muls	r29, r21
     1c0:	d5 02       	muls	r29, r21
     1c2:	d5 02       	muls	r29, r21
     1c4:	a2 02       	muls	r26, r18
     1c6:	d5 02       	muls	r29, r21
     1c8:	d5 02       	muls	r29, r21
     1ca:	d5 02       	muls	r29, r21
     1cc:	d5 02       	muls	r29, r21
     1ce:	d5 02       	muls	r29, r21
     1d0:	d5 02       	muls	r29, r21
     1d2:	d5 02       	muls	r29, r21
     1d4:	b2 02       	muls	r27, r18
     1d6:	d5 02       	muls	r29, r21
     1d8:	d5 02       	muls	r29, r21
     1da:	d5 02       	muls	r29, r21
     1dc:	d5 02       	muls	r29, r21
     1de:	d5 02       	muls	r29, r21
     1e0:	d5 02       	muls	r29, r21
     1e2:	d5 02       	muls	r29, r21
     1e4:	c7 02       	muls	r28, r23
     1e6:	d5 02       	muls	r29, r21
     1e8:	d5 02       	muls	r29, r21
     1ea:	d5 02       	muls	r29, r21
     1ec:	d5 02       	muls	r29, r21
     1ee:	d5 02       	muls	r29, r21
     1f0:	d5 02       	muls	r29, r21
     1f2:	d5 02       	muls	r29, r21
     1f4:	b2 02       	muls	r27, r18
     1f6:	d5 02       	muls	r29, r21
     1f8:	d5 02       	muls	r29, r21
     1fa:	d5 02       	muls	r29, r21
     1fc:	d5 02       	muls	r29, r21
     1fe:	d5 02       	muls	r29, r21
     200:	d5 02       	muls	r29, r21
     202:	d5 02       	muls	r29, r21
     204:	c7 02       	muls	r28, r23
     206:	d5 02       	muls	r29, r21
     208:	d5 02       	muls	r29, r21
     20a:	d5 02       	muls	r29, r21
     20c:	d5 02       	muls	r29, r21
     20e:	d5 02       	muls	r29, r21
     210:	d5 02       	muls	r29, r21
     212:	d5 02       	muls	r29, r21
     214:	cb 02       	muls	r28, r27
     216:	d5 02       	muls	r29, r21
     218:	d5 02       	muls	r29, r21
     21a:	d5 02       	muls	r29, r21
     21c:	d5 02       	muls	r29, r21
     21e:	d5 02       	muls	r29, r21
     220:	d5 02       	muls	r29, r21
     222:	d5 02       	muls	r29, r21
     224:	78 02       	muls	r23, r24
     226:	d5 02       	muls	r29, r21
     228:	d5 02       	muls	r29, r21
     22a:	d5 02       	muls	r29, r21
     22c:	d5 02       	muls	r29, r21
     22e:	d5 02       	muls	r29, r21
     230:	d5 02       	muls	r29, r21
     232:	d5 02       	muls	r29, r21
     234:	78 02       	muls	r23, r24
     236:	d5 02       	muls	r29, r21
     238:	d5 02       	muls	r29, r21
     23a:	d5 02       	muls	r29, r21
     23c:	d5 02       	muls	r29, r21
     23e:	d5 02       	muls	r29, r21
     240:	d5 02       	muls	r29, r21
     242:	d5 02       	muls	r29, r21
     244:	7a 02       	muls	r23, r26
     246:	d5 02       	muls	r29, r21
     248:	d5 02       	muls	r29, r21
     24a:	d5 02       	muls	r29, r21
     24c:	d5 02       	muls	r29, r21
     24e:	d5 02       	muls	r29, r21
     250:	d5 02       	muls	r29, r21
     252:	d5 02       	muls	r29, r21
     254:	8a 02       	muls	r24, r26
     256:	d5 02       	muls	r29, r21
     258:	d5 02       	muls	r29, r21
     25a:	d5 02       	muls	r29, r21
     25c:	d5 02       	muls	r29, r21
     25e:	d5 02       	muls	r29, r21
     260:	d5 02       	muls	r29, r21
     262:	d5 02       	muls	r29, r21
     264:	9e 02       	muls	r25, r30

00000266 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     266:	0e ed       	ldi	r16, 0xDE	; 222
     268:	12 e0       	ldi	r17, 0x02	; 2
     26a:	0f 2e       	mov	r0, r31
     26c:	f6 e0       	ldi	r31, 0x06	; 6
     26e:	ef 2e       	mov	r14, r31
     270:	f3 e0       	ldi	r31, 0x03	; 3
     272:	ff 2e       	mov	r15, r31
     274:	f0 2d       	mov	r31, r0
     276:	26 c0       	rjmp	.+76     	; 0x2c4 <prvIdleTask+0x5e>
     278:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <vTaskSuspendAll>
     27c:	d8 01       	movw	r26, r16
     27e:	cc 91       	ld	r28, X
     280:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <xTaskResumeAll>
     284:	cc 23       	and	r28, r28
     286:	f1 f0       	breq	.+60     	; 0x2c4 <prvIdleTask+0x5e>
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	0f 92       	push	r0
     28e:	d8 01       	movw	r26, r16
     290:	15 96       	adiw	r26, 0x05	; 5
     292:	ed 91       	ld	r30, X+
     294:	fc 91       	ld	r31, X
     296:	16 97       	sbiw	r26, 0x06	; 6
     298:	c6 81       	ldd	r28, Z+6	; 0x06
     29a:	d7 81       	ldd	r29, Z+7	; 0x07
     29c:	ce 01       	movw	r24, r28
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	fe d1       	rcall	.+1020   	; 0x69e <uxListRemove>
     2a2:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <uxCurrentNumberOfTasks>
     2a6:	81 50       	subi	r24, 0x01	; 1
     2a8:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <uxCurrentNumberOfTasks>
     2ac:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <uxDeletedTasksWaitingCleanUp>
     2b0:	81 50       	subi	r24, 0x01	; 1
     2b2:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <uxDeletedTasksWaitingCleanUp>
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	8f 89       	ldd	r24, Y+23	; 0x17
     2bc:	98 8d       	ldd	r25, Y+24	; 0x18
     2be:	5c d0       	rcall	.+184    	; 0x378 <vPortFree>
     2c0:	ce 01       	movw	r24, r28
     2c2:	5a d0       	rcall	.+180    	; 0x378 <vPortFree>
     2c4:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <uxDeletedTasksWaitingCleanUp>
     2c8:	81 11       	cpse	r24, r1
     2ca:	d6 cf       	rjmp	.-84     	; 0x278 <prvIdleTask+0x12>
     2cc:	f7 01       	movw	r30, r14
     2ce:	80 81       	ld	r24, Z
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <prvIdleTask+0x70>
     2d4:	9a d7       	rcall	.+3892   	; 0x120a <vPortYield>
     2d6:	5f d0       	rcall	.+190    	; 0x396 <vApplicationIdleHook>
     2d8:	f5 cf       	rjmp	.-22     	; 0x2c4 <prvIdleTask+0x5e>

000002da <__ctors_end>:
     2da:	11 24       	eor	r1, r1
     2dc:	1f be       	out	0x3f, r1	; 63
     2de:	cf ef       	ldi	r28, 0xFF	; 255
     2e0:	d1 e2       	ldi	r29, 0x21	; 33
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	0c bf       	out	0x3c, r16	; 60

000002ea <__do_copy_data>:
     2ea:	12 e0       	ldi	r17, 0x02	; 2
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b2 e0       	ldi	r27, 0x02	; 2
     2f0:	ee eb       	ldi	r30, 0xBE	; 190
     2f2:	f9 e2       	ldi	r31, 0x29	; 41
     2f4:	00 e0       	ldi	r16, 0x00	; 0
     2f6:	0b bf       	out	0x3b, r16	; 59
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <__do_copy_data+0x14>
     2fa:	07 90       	elpm	r0, Z+
     2fc:	0d 92       	st	X+, r0
     2fe:	a0 3a       	cpi	r26, 0xA0	; 160
     300:	b1 07       	cpc	r27, r17
     302:	d9 f7       	brne	.-10     	; 0x2fa <__do_copy_data+0x10>

00000304 <__do_clear_bss>:
     304:	25 e0       	ldi	r18, 0x05	; 5
     306:	a0 ea       	ldi	r26, 0xA0	; 160
     308:	b2 e0       	ldi	r27, 0x02	; 2
     30a:	01 c0       	rjmp	.+2      	; 0x30e <.do_clear_bss_start>

0000030c <.do_clear_bss_loop>:
     30c:	1d 92       	st	X+, r1

0000030e <.do_clear_bss_start>:
     30e:	a3 30       	cpi	r26, 0x03	; 3
     310:	b2 07       	cpc	r27, r18
     312:	e1 f7       	brne	.-8      	; 0x30c <.do_clear_bss_loop>
     314:	03 d6       	rcall	.+3078   	; 0xf1c <main>
     316:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <_exit>

0000031a <__bad_interrupt>:
     31a:	72 ce       	rjmp	.-796    	; 0x0 <__vectors>

0000031c <system_tick>:
     31c:	8f 93       	push	r24
     31e:	8f b7       	in	r24, 0x3f	; 63
     320:	8f 93       	push	r24
     322:	f8 94       	cli
     324:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <__system_time>
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <__system_time>
     32e:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <__system_time+0x1>
     332:	8f 4f       	sbci	r24, 0xFF	; 255
     334:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <__system_time+0x1>
     338:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <__system_time+0x2>
     33c:	8f 4f       	sbci	r24, 0xFF	; 255
     33e:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <__system_time+0x2>
     342:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <__system_time+0x3>
     346:	8f 4f       	sbci	r24, 0xFF	; 255
     348:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <__system_time+0x3>
     34c:	8f 91       	pop	r24
     34e:	8f bf       	out	0x3f, r24	; 63
     350:	8f 91       	pop	r24
     352:	08 95       	ret

00000354 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     35a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     35e:	ce 01       	movw	r24, r28
     360:	0e 94 79 13 	call	0x26f2	; 0x26f2 <malloc>
     364:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     366:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     36a:	20 97       	sbiw	r28, 0x00	; 0
     36c:	09 f4       	brne	.+2      	; 0x370 <pvPortMalloc+0x1c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     36e:	2c d0       	rcall	.+88     	; 0x3c8 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
     370:	ce 01       	movw	r24, r28
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
	if( pv )
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	41 f0       	breq	.+16     	; 0x390 <vPortFree+0x18>
     380:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     382:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <vTaskSuspendAll>
		{
			free( pv );
     386:	ce 01       	movw	r24, r28
     388:	0e 94 11 14 	call	0x2822	; 0x2822 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     38c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <xTaskResumeAll>
	}
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <vApplicationIdleHook>:
	// The corresponding PIN Register bit will always read as zero when this bit is set. When an
	// analogue signal is applied to the ADC7..0 pin and the digital input from this pin is not needed, this
	// bit should be written logic one to reduce power consumption in the digital input buffer.

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Mega with 2560
	DIDR0 = 0xFF;
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
     39c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	// When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
	// This bit can be set at any time to turn off the Analogue Comparator.
	// This will reduce power consumption in Active and Idle mode.
	// When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
	// Otherwise an interrupt can occur when the ACD bit is changed.
	ACSR &= ~_BV(ACIE);
     3a0:	80 b7       	in	r24, 0x30	; 48
     3a2:	87 7f       	andi	r24, 0xF7	; 247
     3a4:	80 bf       	out	0x30, r24	; 48
	ACSR |=  _BV(ACD);
     3a6:	80 b7       	in	r24, 0x30	; 48
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	80 bf       	out	0x30, r24	; 48
	// SLEEP_MODE_PWR_DOWN     _BV(SM1)
	// SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
	// SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
	// SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

	set_sleep_mode( SLEEP_MODE_IDLE );
     3ac:	83 b7       	in	r24, 0x33	; 51
     3ae:	81 7f       	andi	r24, 0xF1	; 241
     3b0:	83 bf       	out	0x33, r24	; 51

	portENTER_CRITICAL();
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	0f 92       	push	r0

	sleep_enable();
     3b8:	83 b7       	in	r24, 0x33	; 51
     3ba:	81 60       	ori	r24, 0x01	; 1
     3bc:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
	sleep_bod_disable();
#endif

	portEXIT_CRITICAL();
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63

	sleep_cpu();		// good night.
     3c2:	88 95       	sleep

	sleep_reset();		// reset the sleep_mode() faster than sleep_disable();
     3c4:	13 be       	out	0x33, r1	; 51
     3c6:	08 95       	ret

000003c8 <vApplicationMallocFailedHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Mega with 2560
	DDRB  |= _BV(DDB7);
     3c8:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     3ca:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3cc:	83 ed       	ldi	r24, 0xD3	; 211
     3ce:	90 e3       	ldi	r25, 0x30	; 48
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <vApplicationMallocFailedHook+0x8>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <vApplicationMallocFailedHook+0xe>
     3d6:	00 00       	nop

	for(;;)
	{
		_delay_ms(50);
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
     3d8:	1f 9a       	sbi	0x03, 7	; 3
     3da:	f8 cf       	rjmp	.-16     	; 0x3cc <vApplicationMallocFailedHook+0x4>

000003dc <vApplicationStackOverflowHook>:
	   This routine will never return.
	   This routine is referenced in the task.c file of FreeRTOS as an extern.
	\*---------------------------------------------------------------------------*/

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
	DDRB  |= _BV(DDB7);
     3dc:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
     3de:	2f 9a       	sbi	0x05, 7	; 5
     3e0:	2f e7       	ldi	r18, 0x7F	; 127
     3e2:	8a e1       	ldi	r24, 0x1A	; 26
     3e4:	96 e0       	ldi	r25, 0x06	; 6
     3e6:	21 50       	subi	r18, 0x01	; 1
     3e8:	80 40       	sbci	r24, 0x00	; 0
     3ea:	90 40       	sbci	r25, 0x00	; 0
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <vApplicationStackOverflowHook+0xa>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <vApplicationStackOverflowHook+0x14>
     3f0:	00 00       	nop

	for(;;)
	{
		_delay_ms(2000);
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
		PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
     3f2:	1f 9a       	sbi	0x03, 7	; 3
     3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <vApplicationStackOverflowHook+0x4>

000003f6 <__vector_39>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect) __attribute__((hot, flatten));
ISR(TWI_vect)
{
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	11 24       	eor	r1, r1
     400:	0b b6       	in	r0, 0x3b	; 59
     402:	0f 92       	push	r0
     404:	2f 93       	push	r18
     406:	3f 93       	push	r19
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
  static uint8_t I2C_bufPtr;

  switch (TWSR)
     414:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     418:	8e 2f       	mov	r24, r30
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	38 97       	sbiw	r30, 0x08	; 8
     420:	e1 3c       	cpi	r30, 0xC1	; 193
     422:	f1 05       	cpc	r31, r1
     424:	08 f0       	brcs	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	c1 c0       	rjmp	.+386    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     428:	88 27       	eor	r24, r24
     42a:	ee 58       	subi	r30, 0x8E	; 142
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	8f 4f       	sbci	r24, 0xFF	; 255
     430:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__tablejump2__>
  {

    case I2C_START:             // START has been transmitted
    case I2C_REP_START:         // Repeated START has been transmitted
		I2C_bufPtr = 0;         // Set buffer pointer to the TWI Address location
     434:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <__data_end>

// Master Transmitter

    case I2C_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case I2C_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
		if (I2C_bufPtr < I2C_msgSize)
     438:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     43c:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <I2C_msgSize>
     440:	e8 17       	cp	r30, r24
     442:	70 f4       	brcc	.+28     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			TWDR = I2C_buf[I2C_bufPtr++];
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	8e 0f       	add	r24, r30
     448:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	ec 55       	subi	r30, 0x5C	; 92
     450:	fd 4f       	sbci	r31, 0xFD	; 253
     452:	80 81       	ld	r24, Z
     454:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     458:	85 e8       	ldi	r24, 0x85	; 133
     45a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     45e:	ac c0       	rjmp	.+344    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				   (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
				   (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
				   (0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
		I2C_statusReg.lastTransOK = true;                 // Set status bits to completed successfully.
     460:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     464:	81 60       	ori	r24, 0x01	; 1
     466:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     46a:	84 e9       	ldi	r24, 0x94	; 148
     46c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     470:	a3 c0       	rjmp	.+326    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		}
		break;

    case I2C_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case I2C_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
	    I2C_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     472:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     476:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
	    // Reset TWI Interface and send START.
		TWCR = 	(1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     47a:	85 ee       	ldi	r24, 0xE5	; 229
     47c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				(1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
				(1<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|    		// Send Start.
				(0<<TWWC);
		break;
     480:	9b c0       	rjmp	.+310    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


// Master Receiver

    case I2C_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
		I2C_buf[I2C_bufPtr++] = TWDR;
     482:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	8e 0f       	add	r24, r30
     48a:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
     48e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	ec 55       	subi	r30, 0x5C	; 92
     496:	fd 4f       	sbci	r31, 0xFD	; 253
     498:	80 83       	st	Z, r24

    case I2C_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
		if (I2C_bufPtr < (I2C_msgSize-1) )                  // Detect the last byte to NACK it.
     49a:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__data_end>
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <I2C_msgSize>
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	28 17       	cp	r18, r24
     4aa:	39 07       	cpc	r19, r25
     4ac:	24 f4       	brge	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     4ae:	85 ec       	ldi	r24, 0xC5	; 197
     4b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     4b4:	81 c0       	rjmp	.+258    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				   (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
				   (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
				   (0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     4b6:	85 e8       	ldi	r24, 0x85	; 133
     4b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     4bc:	7d c0       	rjmp	.+250    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				   (0<<TWWC);                                 //
		}
		break;

    case I2C_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
		I2C_buf[I2C_bufPtr] = TWDR;
     4be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     4c2:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	ec 55       	subi	r30, 0x5C	; 92
     4ca:	fd 4f       	sbci	r31, 0xFD	; 253
     4cc:	80 83       	st	Z, r24
		I2C_statusReg.lastTransOK = true;                 // Set status bits to completed successfully.
     4ce:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     4d8:	84 ed       	ldi	r24, 0xD4	; 212
     4da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			   (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
			   (1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			   (0<<TWWC);                                 //
		break;
     4de:	6c c0       	rjmp	.+216    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>



    case I2C_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received
 	    I2C_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     4e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     4e4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
		// Reset TWI Interface and send STOP.
		TWCR = 	(1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     4e8:	85 ed       	ldi	r24, 0xD5	; 213
     4ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				(1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
				(1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|    		// Send stop.
				(0<<TWWC);
		break;
     4ee:	64 c0       	rjmp	.+200    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
// Slave Transmitter

	case I2C_STX_ADR_ACK:			// Own SLA+R has been received; ACK has been returned
	case I2C_STX_ADR_ACK_M_ARB_LOST:// Arbitration lost in SLA+R/W as Master; own SLA+R has
									// been received; ACK has been returned
	    I2C_bufPtr   = 0;	    	// Set buffer pointer to first data location
     4f0:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <__data_end>


	case I2C_STX_DATA_ACK:		// Data byte in TWDR has been transmitted; ACK has been received
	    TWDR = I2C_buf[I2C_bufPtr++];
     4f4:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	8e 0f       	add	r24, r30
     4fc:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	ec 55       	subi	r30, 0x5C	; 92
     504:	fd 4f       	sbci	r31, 0xFD	; 253
     506:	80 81       	ld	r24, Z
     508:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	    						// Enable TWI Interrupt and clear the flag to send byte
	    TWCR = 	(1<<TWEN) |
     50c:	85 ec       	ldi	r24, 0xC5	; 197
     50e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	    		(1<<TWIE)|(1<<TWINT)|
	    		(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|
	    		(0<<TWWC);
	    break;
     512:	52 c0       	rjmp	.+164    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


	case I2C_STX_DATA_NACK:  	// Data byte in TWDR has been transmitted; NACK has been received.
	    						// I.e. this could be the end of the transmission.
	    if (I2C_bufPtr == I2C_msgSize) 	    // Have we transmitted all expected data?
     514:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <__data_end>
     518:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <I2C_msgSize>
     51c:	98 13       	cpse	r25, r24
     51e:	06 c0       	rjmp	.+12     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
	    {
	        I2C_statusReg.lastTransOK = true; // Set status bits to completed successfully.
     520:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     524:	81 60       	ori	r24, 0x01	; 1
     526:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>
     52a:	04 c0       	rjmp	.+8      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
	    }
	    else
	    {
	        I2C_state = TWSR;     // Master has sent a NACK before all data where sent, Store I2C State as error message.
     52c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     530:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>
	    }

	    // Put I2C Transceiver in passive mode.
	    // Enable I2C-interface and release I2C pins
	    TWCR = (1<<TWEN)|
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	           (0<<TWIE)|(0<<TWINT)|                // Disable Interrupt
	           (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|     // Do not acknowledge on any new requests.
	           (0<<TWWC);
	   break;
     53a:	3e c0       	rjmp	.+124    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


    case I2C_STX_DATA_ACK_LAST_BYTE: // Last data byte in TWDR has been transmitted TWEA = ; ACK has been received

    	// Enable TWI Interrupt and clear the flag to send byte
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     53c:	85 ec       	ldi	r24, 0xC5	; 197
     53e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Acknowledge on any new requests.
               (0<<TWWC);

	    break;
     542:	3a c0       	rjmp	.+116    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
// Slave Receiver

	case I2C_SRX_GEN_ACK:				// General call address has been received; ACK has been returned
	case I2C_SRX_GEN_ACK_M_ARB_LOST:	// Arbitration lost in SLA+R/W as Master; General call
										// address has been received; ACK has been returned
	    I2C_statusReg.genAddressCall = true;
     544:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     548:	84 60       	ori	r24, 0x04	; 4
     54a:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>

	case I2C_SRX_ADR_ACK:		// Own SLA+W has been received ACK has been returned
	case I2C_SRX_ADR_ACK_M_ARB_LOST:	// Arbitration lost in SLA+R/W as Master; own SLA+W
										// has been received; ACK has been returned

	    I2C_statusReg.RxDataInBuf = true; // Don't need to clear I2C_statusRegister.generalAddressCall due to that it is the default state.
     54e:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     552:	82 60       	ori	r24, 0x02	; 2
     554:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>

	    I2C_bufPtr   = 0;	    // Set buffer pointer to first data location
     558:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <__data_end>
	    // Reset the TWI Interrupt to wait for a new event.

	    // TWI Interface enabled
	    // Enable TWI Interrupt and clear the flag to send byte
	    // Expect ACK on this transmission
	    TWCR =  (1<<TWEN)|
     55c:	85 ec       	ldi	r24, 0xC5	; 197
     55e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	    		(1<<TWIE)|(1<<TWINT)|
	    		(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|
	    		(0<<TWWC);
		break;
     562:	2a c0       	rjmp	.+84     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

	case I2C_SRX_ADR_DATA_ACK:	// Previously addressed with own SLA+W; data has been received; ACK has been returned
	case I2C_SRX_GEN_DATA_ACK:	// Previously addressed with general call; data has been received; ACK has been returned

		I2C_buf[I2C_bufPtr++] = TWDR;
     564:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	8e 0f       	add	r24, r30
     56c:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
     570:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	ec 55       	subi	r30, 0x5C	; 92
     578:	fd 4f       	sbci	r31, 0xFD	; 253
     57a:	80 83       	st	Z, r24

		I2C_statusReg.lastTransOK = true;		// Set flag transmission successful.
     57c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <I2C_statusReg>
     580:	81 60       	ori	r24, 0x01	; 1
     582:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <I2C_statusReg>

		// Reset the TWI Interrupt to wait for a new event.
		TWCR = (1<<TWEN)|                          // TWI Interface enabled
     586:	85 ec       	ldi	r24, 0xC5	; 197
     588:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
		       (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
		       (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Send ACK after next reception
		       (0<<TWWC);
		break;
     58c:	15 c0       	rjmp	.+42     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

    case I2C_SRX_ADR_DATA_NACK: // Previously addressed with own SLA+W; data has been received; NOT ACK has been returned
    case I2C_SRX_GEN_DATA_NACK: // Previously addressed with general call; data has been received; NOT ACK has been returned

    	// NOT ACK back at the Master
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     58e:	85 e8       	ldi	r24, 0x85	; 133
     590:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (1<<TWIE)|(1<<TWINT)|               // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Do not acknowledge on any new requests.
               (0<<TWWC);
		break;
     594:	11 c0       	rjmp	.+34     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

    case I2C_SRX_STOP_RESTART:  // A STOP condition or repeated START condition has been received while still addressed as Slave

    	I2C_checkBusyAfterStop = I2C_HOW_MANY_BUSY_CHECKS_AFTER_STOP; // do some busy checks before hitting the bus again.
     596:	84 e0       	ldi	r24, 0x04	; 4
     598:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <I2C_checkBusyAfterStop>

        // Put TWI Transceiver in passive mode.
        TWCR = (1<<TWEN)|                          // Enable TWI-interface and release TWI pins
     59c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
               (0<<TWIE)|(0<<TWINT)|               // Disable Interrupt
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|    // Do not acknowledge on any new requests.
               (0<<TWWC);
        break;
     5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>


// ERRORS AND FAULT CONDITIONS

    case I2C_ARB_LOST:          						// Arbitration lost
		TWCR = (1<<TWEN)|                               // TWI Interface enabled
     5a2:	85 ee       	ldi	r24, 0xE5	; 229
     5a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			   (1<<TWIE)|(1<<TWINT)|                    // Enable TWI Interrupt and clear the flag
			   (1<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|         // Initiate a (RE)START condition.
			   (0<<TWWC);                               //
		break;
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

    case I2C_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    case I2C_NO_STATE:          // No relevant state information available TWINT = 0

    default:
		I2C_state = TWSR;                               // Store TWSR and automatically sets clears noErrors bit.
     5aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     5ae:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <I2C_state>

														// Reset TWI Interface
		TWCR = (1<<TWEN)|                          		// Enable TWI-interface and release TWI pins
     5b2:	85 ed       	ldi	r24, 0xD5	; 213
     5b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			 (1<<TWIE)|(1<<TWINT)|               		// Enable TWI Interrupt and clear the flag
			 (1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|    		// Acknowledge on any new requests. Send stop.
			 (0<<TWWC);                               	//
      	break;
  }
}
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	0f 90       	pop	r0
     5d2:	1f 90       	pop	r1
     5d4:	18 95       	reti

000005d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     5d6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5d8:	03 96       	adiw	r24, 0x03	; 3
     5da:	92 83       	std	Z+2, r25	; 0x02
     5dc:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     5de:	2f ef       	ldi	r18, 0xFF	; 255
     5e0:	3f ef       	ldi	r19, 0xFF	; 255
     5e2:	34 83       	std	Z+4, r19	; 0x04
     5e4:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5e6:	96 83       	std	Z+6, r25	; 0x06
     5e8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ea:	90 87       	std	Z+8, r25	; 0x08
     5ec:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     5ee:	10 82       	st	Z, r1
     5f0:	08 95       	ret

000005f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     5f2:	fc 01       	movw	r30, r24
     5f4:	11 86       	std	Z+9, r1	; 0x09
     5f6:	10 86       	std	Z+8, r1	; 0x08
     5f8:	08 95       	ret

000005fa <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	9c 01       	movw	r18, r24
     600:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     602:	dc 01       	movw	r26, r24
     604:	11 96       	adiw	r26, 0x01	; 1
     606:	cd 91       	ld	r28, X+
     608:	dc 91       	ld	r29, X
     60a:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     60c:	d3 83       	std	Z+3, r29	; 0x03
     60e:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     610:	8c 81       	ldd	r24, Y+4	; 0x04
     612:	9d 81       	ldd	r25, Y+5	; 0x05
     614:	95 83       	std	Z+5, r25	; 0x05
     616:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     618:	8c 81       	ldd	r24, Y+4	; 0x04
     61a:	9d 81       	ldd	r25, Y+5	; 0x05
     61c:	dc 01       	movw	r26, r24
     61e:	13 96       	adiw	r26, 0x03	; 3
     620:	7c 93       	st	X, r23
     622:	6e 93       	st	-X, r22
     624:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     626:	7d 83       	std	Y+5, r23	; 0x05
     628:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     62a:	31 87       	std	Z+9, r19	; 0x09
     62c:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     62e:	f9 01       	movw	r30, r18
     630:	80 81       	ld	r24, Z
     632:	8f 5f       	subi	r24, 0xFF	; 255
     634:	80 83       	st	Z, r24
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     642:	48 81       	ld	r20, Y
     644:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     646:	4f 3f       	cpi	r20, 0xFF	; 255
     648:	2f ef       	ldi	r18, 0xFF	; 255
     64a:	52 07       	cpc	r21, r18
     64c:	21 f4       	brne	.+8      	; 0x656 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     64e:	fc 01       	movw	r30, r24
     650:	a7 81       	ldd	r26, Z+7	; 0x07
     652:	b0 85       	ldd	r27, Z+8	; 0x08
     654:	0d c0       	rjmp	.+26     	; 0x670 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     656:	dc 01       	movw	r26, r24
     658:	13 96       	adiw	r26, 0x03	; 3
     65a:	01 c0       	rjmp	.+2      	; 0x65e <vListInsert+0x22>
     65c:	df 01       	movw	r26, r30
     65e:	12 96       	adiw	r26, 0x02	; 2
     660:	ed 91       	ld	r30, X+
     662:	fc 91       	ld	r31, X
     664:	13 97       	sbiw	r26, 0x03	; 3
     666:	20 81       	ld	r18, Z
     668:	31 81       	ldd	r19, Z+1	; 0x01
     66a:	42 17       	cp	r20, r18
     66c:	53 07       	cpc	r21, r19
     66e:	b0 f7       	brcc	.-20     	; 0x65c <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	ed 91       	ld	r30, X+
     674:	fc 91       	ld	r31, X
     676:	13 97       	sbiw	r26, 0x03	; 3
     678:	fb 83       	std	Y+3, r31	; 0x03
     67a:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     67c:	d5 83       	std	Z+5, r29	; 0x05
     67e:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     680:	bd 83       	std	Y+5, r27	; 0x05
     682:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     684:	13 96       	adiw	r26, 0x03	; 3
     686:	dc 93       	st	X, r29
     688:	ce 93       	st	-X, r28
     68a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     68c:	99 87       	std	Y+9, r25	; 0x09
     68e:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     690:	fc 01       	movw	r30, r24
     692:	20 81       	ld	r18, Z
     694:	2f 5f       	subi	r18, 0xFF	; 255
     696:	20 83       	st	Z, r18
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     6a4:	a0 85       	ldd	r26, Z+8	; 0x08
     6a6:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6a8:	c2 81       	ldd	r28, Z+2	; 0x02
     6aa:	d3 81       	ldd	r29, Z+3	; 0x03
     6ac:	84 81       	ldd	r24, Z+4	; 0x04
     6ae:	95 81       	ldd	r25, Z+5	; 0x05
     6b0:	9d 83       	std	Y+5, r25	; 0x05
     6b2:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6b4:	c4 81       	ldd	r28, Z+4	; 0x04
     6b6:	d5 81       	ldd	r29, Z+5	; 0x05
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	9b 83       	std	Y+3, r25	; 0x03
     6be:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     6c0:	11 96       	adiw	r26, 0x01	; 1
     6c2:	8d 91       	ld	r24, X+
     6c4:	9c 91       	ld	r25, X
     6c6:	12 97       	sbiw	r26, 0x02	; 2
     6c8:	e8 17       	cp	r30, r24
     6ca:	f9 07       	cpc	r31, r25
     6cc:	31 f4       	brne	.+12     	; 0x6da <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     6ce:	84 81       	ldd	r24, Z+4	; 0x04
     6d0:	95 81       	ldd	r25, Z+5	; 0x05
     6d2:	12 96       	adiw	r26, 0x02	; 2
     6d4:	9c 93       	st	X, r25
     6d6:	8e 93       	st	-X, r24
     6d8:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     6da:	11 86       	std	Z+9, r1	; 0x09
     6dc:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     6de:	8c 91       	ld	r24, X
     6e0:	81 50       	subi	r24, 0x01	; 1
     6e2:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <watchdogTaak>:
void motorStop()
{
	PORTG &= ~(1 << R_PLUS);
	PORTL &= ~(1 << R_MIN);
	PORTC &= ~(1 << L_PLUS);
	PORTD &= ~(1 << L_MIN);
     6ea:	8f e9       	ldi	r24, 0x9F	; 159
     6ec:	9f e0       	ldi	r25, 0x0F	; 15
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <watchdogTaak+0x4>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <watchdogTaak+0xa>
     6f4:	00 00       	nop
     6f6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <watchdogSonar>
     6fa:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <watchdogSonar+0x1>
     6fe:	89 2b       	or	r24, r25
     700:	a1 f3       	breq	.-24     	; 0x6ea <watchdogTaak>
     702:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <watchdogServo>
     706:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <watchdogServo+0x1>
     70a:	89 2b       	or	r24, r25
     70c:	71 f3       	breq	.-36     	; 0x6ea <watchdogTaak>
     70e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <watchdogGyro>
     712:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <watchdogGyro+0x1>
     716:	89 2b       	or	r24, r25
     718:	41 f3       	breq	.-48     	; 0x6ea <watchdogTaak>
     71a:	a8 95       	wdr
     71c:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <watchdogSonar+0x1>
     720:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <watchdogSonar>
     724:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <watchdogServo+0x1>
     728:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <watchdogServo>
     72c:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <watchdogGyro+0x1>
     730:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <watchdogGyro>
     734:	da cf       	rjmp	.-76     	; 0x6ea <watchdogTaak>

00000736 <UART_Init>:
     736:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     73a:	87 e6       	ldi	r24, 0x67	; 103
     73c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     740:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     744:	86 e0       	ldi	r24, 0x06	; 6
     746:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     74a:	88 e1       	ldi	r24, 0x18	; 24
     74c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     750:	08 95       	ret

00000752 <UART_Transmit>:
     752:	e8 ec       	ldi	r30, 0xC8	; 200
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	90 81       	ld	r25, Z
     758:	95 ff       	sbrs	r25, 5
     75a:	fd cf       	rjmp	.-6      	; 0x756 <UART_Transmit+0x4>
     75c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     760:	08 95       	ret

00000762 <__vector_36>:
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	0f 90       	pop	r0
     76e:	0f be       	out	0x3f, r0	; 63
     770:	0f 90       	pop	r0
     772:	1f 90       	pop	r1
     774:	18 95       	reti

00000776 <UART_Transmit_String>:
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	ec 01       	movw	r28, r24
     77c:	88 81       	ld	r24, Y
     77e:	88 23       	and	r24, r24
     780:	29 f0       	breq	.+10     	; 0x78c <UART_Transmit_String+0x16>
     782:	21 96       	adiw	r28, 0x01	; 1
     784:	e6 df       	rcall	.-52     	; 0x752 <UART_Transmit>
     786:	89 91       	ld	r24, Y+
     788:	81 11       	cpse	r24, r1
     78a:	fc cf       	rjmp	.-8      	; 0x784 <UART_Transmit_String+0xe>
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <UART_Transmit_Integer>:
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	61 97       	sbiw	r28, 0x11	; 17
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	4a e0       	ldi	r20, 0x0A	; 10
     7ac:	be 01       	movw	r22, r28
     7ae:	6f 5f       	subi	r22, 0xFF	; 255
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	0e 94 aa 14 	call	0x2954	; 0x2954 <__itoa_ncheck>
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	dd df       	rcall	.-70     	; 0x776 <UART_Transmit_String>
     7bc:	61 96       	adiw	r28, 0x11	; 17
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <servoTaak>:
     7ce:	0a e8       	ldi	r16, 0x8A	; 138
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	c1 e0       	ldi	r28, 0x01	; 1
     7d4:	d0 e0       	ldi	r29, 0x00	; 0
     7d6:	e1 2c       	mov	r14, r1
     7d8:	f1 2c       	mov	r15, r1
     7da:	f0 92 59 04 	sts	0x0459, r15	; 0x800459 <hoek+0x1>
     7de:	e0 92 58 04 	sts	0x0458, r14	; 0x800458 <hoek>
     7e2:	c7 01       	movw	r24, r14
     7e4:	99 27       	eor	r25, r25
     7e6:	9c 01       	movw	r18, r24
     7e8:	22 0f       	add	r18, r18
     7ea:	33 1f       	adc	r19, r19
     7ec:	22 0f       	add	r18, r18
     7ee:	33 1f       	adc	r19, r19
     7f0:	22 0f       	add	r18, r18
     7f2:	33 1f       	adc	r19, r19
     7f4:	82 1b       	sub	r24, r18
     7f6:	93 0b       	sbc	r25, r19
     7f8:	95 5b       	subi	r25, 0xB5	; 181
     7fa:	f8 01       	movw	r30, r16
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	80 83       	st	Z, r24
     800:	ff ef       	ldi	r31, 0xFF	; 255
     802:	24 e3       	ldi	r18, 0x34	; 52
     804:	8c e0       	ldi	r24, 0x0C	; 12
     806:	f1 50       	subi	r31, 0x01	; 1
     808:	20 40       	sbci	r18, 0x00	; 0
     80a:	80 40       	sbci	r24, 0x00	; 0
     80c:	e1 f7       	brne	.-8      	; 0x806 <servoTaak+0x38>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <servoTaak+0x42>
     810:	00 00       	nop
     812:	87 e0       	ldi	r24, 0x07	; 7
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	af df       	rcall	.-162    	; 0x776 <UART_Transmit_String>
     818:	60 91 58 04 	lds	r22, 0x0458	; 0x800458 <hoek>
     81c:	70 91 59 04 	lds	r23, 0x0459	; 0x800459 <hoek+0x1>
     820:	07 2e       	mov	r0, r23
     822:	00 0c       	add	r0, r0
     824:	88 0b       	sbc	r24, r24
     826:	99 0b       	sbc	r25, r25
     828:	b4 df       	rcall	.-152    	; 0x792 <UART_Transmit_Integer>
     82a:	80 e1       	ldi	r24, 0x10	; 16
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	a3 df       	rcall	.-186    	; 0x776 <UART_Transmit_String>
     830:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <afstand>
     834:	70 91 64 04 	lds	r23, 0x0464	; 0x800464 <afstand+0x1>
     838:	07 2e       	mov	r0, r23
     83a:	00 0c       	add	r0, r0
     83c:	88 0b       	sbc	r24, r24
     83e:	99 0b       	sbc	r25, r25
     840:	a8 df       	rcall	.-176    	; 0x792 <UART_Transmit_Integer>
     842:	8b e1       	ldi	r24, 0x1B	; 27
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	97 df       	rcall	.-210    	; 0x776 <UART_Transmit_String>
     848:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <gyroX>
     84c:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <gyroX+0x1>
     850:	07 2e       	mov	r0, r23
     852:	00 0c       	add	r0, r0
     854:	88 0b       	sbc	r24, r24
     856:	99 0b       	sbc	r25, r25
     858:	9c df       	rcall	.-200    	; 0x792 <UART_Transmit_Integer>
     85a:	85 e2       	ldi	r24, 0x25	; 37
     85c:	92 e0       	ldi	r25, 0x02	; 2
     85e:	8b df       	rcall	.-234    	; 0x776 <UART_Transmit_String>
     860:	60 91 69 04 	lds	r22, 0x0469	; 0x800469 <gyroY>
     864:	70 91 6a 04 	lds	r23, 0x046A	; 0x80046a <gyroY+0x1>
     868:	07 2e       	mov	r0, r23
     86a:	00 0c       	add	r0, r0
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	90 df       	rcall	.-224    	; 0x792 <UART_Transmit_Integer>
     872:	8a e2       	ldi	r24, 0x2A	; 42
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	7f df       	rcall	.-258    	; 0x776 <UART_Transmit_String>
     878:	60 91 50 04 	lds	r22, 0x0450	; 0x800450 <gyroZ>
     87c:	70 91 51 04 	lds	r23, 0x0451	; 0x800451 <gyroZ+0x1>
     880:	07 2e       	mov	r0, r23
     882:	00 0c       	add	r0, r0
     884:	88 0b       	sbc	r24, r24
     886:	99 0b       	sbc	r25, r25
     888:	84 df       	rcall	.-248    	; 0x792 <UART_Transmit_Integer>
     88a:	8f e2       	ldi	r24, 0x2F	; 47
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	73 df       	rcall	.-282    	; 0x776 <UART_Transmit_String>
     890:	60 91 30 03 	lds	r22, 0x0330	; 0x800330 <accelX>
     894:	70 91 31 03 	lds	r23, 0x0331	; 0x800331 <accelX+0x1>
     898:	07 2e       	mov	r0, r23
     89a:	00 0c       	add	r0, r0
     89c:	88 0b       	sbc	r24, r24
     89e:	99 0b       	sbc	r25, r25
     8a0:	78 df       	rcall	.-272    	; 0x792 <UART_Transmit_Integer>
     8a2:	85 e2       	ldi	r24, 0x25	; 37
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	67 df       	rcall	.-306    	; 0x776 <UART_Transmit_String>
     8a8:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <accelY>
     8ac:	70 91 2d 03 	lds	r23, 0x032D	; 0x80032d <accelY+0x1>
     8b0:	07 2e       	mov	r0, r23
     8b2:	00 0c       	add	r0, r0
     8b4:	88 0b       	sbc	r24, r24
     8b6:	99 0b       	sbc	r25, r25
     8b8:	6c df       	rcall	.-296    	; 0x792 <UART_Transmit_Integer>
     8ba:	8a e2       	ldi	r24, 0x2A	; 42
     8bc:	92 e0       	ldi	r25, 0x02	; 2
     8be:	5b df       	rcall	.-330    	; 0x776 <UART_Transmit_String>
     8c0:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <accelZ>
     8c4:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <accelZ+0x1>
     8c8:	07 2e       	mov	r0, r23
     8ca:	00 0c       	add	r0, r0
     8cc:	88 0b       	sbc	r24, r24
     8ce:	99 0b       	sbc	r25, r25
     8d0:	60 df       	rcall	.-320    	; 0x792 <UART_Transmit_Integer>
     8d2:	d0 93 5f 04 	sts	0x045F, r29	; 0x80045f <watchdogServo+0x1>
     8d6:	c0 93 5e 04 	sts	0x045E, r28	; 0x80045e <watchdogServo>
     8da:	9b e1       	ldi	r25, 0x1B	; 27
     8dc:	e9 0e       	add	r14, r25
     8de:	f1 1c       	adc	r15, r1
     8e0:	e8 ed       	ldi	r30, 0xD8	; 216
     8e2:	ee 16       	cp	r14, r30
     8e4:	f1 04       	cpc	r15, r1
     8e6:	09 f0       	breq	.+2      	; 0x8ea <servoTaak+0x11c>
     8e8:	78 cf       	rjmp	.-272    	; 0x7da <servoTaak+0xc>
     8ea:	75 cf       	rjmp	.-278    	; 0x7d6 <servoTaak+0x8>

000008ec <INT1_init>:
     8ec:	e8 e6       	ldi	r30, 0x68	; 104
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	81 60       	ori	r24, 0x01	; 1
     8f4:	80 83       	st	Z, r24
     8f6:	eb e6       	ldi	r30, 0x6B	; 107
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	82 60       	ori	r24, 0x02	; 2
     8fe:	80 83       	st	Z, r24
     900:	08 95       	ret

00000902 <__vector_9>:
     902:	1f 92       	push	r1
     904:	0f 92       	push	r0
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	0f 92       	push	r0
     90a:	11 24       	eor	r1, r1
     90c:	0b b6       	in	r0, 0x3b	; 59
     90e:	0f 92       	push	r0
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
     928:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <running>
     92c:	88 23       	and	r24, r24
     92e:	d1 f1       	breq	.+116    	; 0x9a4 <__vector_9+0xa2>
     930:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <up>
     934:	81 11       	cpse	r24, r1
     936:	10 c0       	rjmp	.+32     	; 0x958 <__vector_9+0x56>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <up>
     93e:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <timerCounter>
     942:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <timerCounter+0x1>
     946:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <timerCounter+0x2>
     94a:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <timerCounter+0x3>
     94e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     952:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     956:	26 c0       	rjmp	.+76     	; 0x9a4 <__vector_9+0xa2>
     958:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <up>
     95c:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <timerCounter>
     960:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <timerCounter+0x1>
     964:	40 91 c2 02 	lds	r20, 0x02C2	; 0x8002c2 <timerCounter+0x2>
     968:	50 91 c3 02 	lds	r21, 0x02C3	; 0x8002c3 <timerCounter+0x3>
     96c:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     970:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     974:	af ef       	ldi	r26, 0xFF	; 255
     976:	bf ef       	ldi	r27, 0xFF	; 255
     978:	0e 94 6f 13 	call	0x26de	; 0x26de <__muluhisi3>
     97c:	6e 0f       	add	r22, r30
     97e:	7f 1f       	adc	r23, r31
     980:	81 1d       	adc	r24, r1
     982:	91 1d       	adc	r25, r1
     984:	24 e7       	ldi	r18, 0x74	; 116
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	0e 94 36 13 	call	0x266c	; 0x266c <__udivmodsi4>
     990:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <result>
     994:	30 93 bd 02 	sts	0x02BD, r19	; 0x8002bd <result+0x1>
     998:	40 93 be 02 	sts	0x02BE, r20	; 0x8002be <result+0x2>
     99c:	50 93 bf 02 	sts	0x02BF, r21	; 0x8002bf <result+0x3>
     9a0:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <running>
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0b be       	out	0x3b, r0	; 59
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti

000009ca <pulse>:
     9ca:	28 98       	cbi	0x05, 0	; 5
     9cc:	85 e0       	ldi	r24, 0x05	; 5
     9ce:	8a 95       	dec	r24
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <pulse+0x4>
     9d2:	00 00       	nop
     9d4:	28 9a       	sbi	0x05, 0	; 5
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <running>
     9dc:	85 e3       	ldi	r24, 0x35	; 53
     9de:	8a 95       	dec	r24
     9e0:	f1 f7       	brne	.-4      	; 0x9de <pulse+0x14>
     9e2:	00 00       	nop
     9e4:	28 98       	cbi	0x05, 0	; 5
     9e6:	08 95       	ret

000009e8 <sonarTaak>:
     9e8:	c1 e0       	ldi	r28, 0x01	; 1
     9ea:	d0 e0       	ldi	r29, 0x00	; 0
     9ec:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <running>
     9f0:	81 11       	cpse	r24, r1
     9f2:	16 c0       	rjmp	.+44     	; 0xa20 <sonarTaak+0x38>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	80 e7       	ldi	r24, 0x70	; 112
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	21 50       	subi	r18, 0x01	; 1
     9fc:	80 40       	sbci	r24, 0x00	; 0
     9fe:	90 40       	sbci	r25, 0x00	; 0
     a00:	e1 f7       	brne	.-8      	; 0x9fa <sonarTaak+0x12>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <sonarTaak+0x1c>
     a04:	00 00       	nop
     a06:	e1 df       	rcall	.-62     	; 0x9ca <pulse>
     a08:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <result>
     a0c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <result+0x1>
     a10:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <result+0x2>
     a14:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <result+0x3>
     a18:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <afstand+0x1>
     a1c:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <afstand>
     a20:	d0 93 35 03 	sts	0x0335, r29	; 0x800335 <watchdogSonar+0x1>
     a24:	c0 93 34 03 	sts	0x0334, r28	; 0x800334 <watchdogSonar>
     a28:	e1 cf       	rjmp	.-62     	; 0x9ec <sonarTaak+0x4>

00000a2a <timer3_init>:
     a2a:	e1 e9       	ldi	r30, 0x91	; 145
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	82 60       	ori	r24, 0x02	; 2
     a32:	80 83       	st	Z, r24
     a34:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a38:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a3c:	e1 e7       	ldi	r30, 0x71	; 113
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	81 60       	ori	r24, 0x01	; 1
     a44:	80 83       	st	Z, r24
     a46:	08 95       	ret

00000a48 <__vector_35>:
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	0b b6       	in	r0, 0x3b	; 59
     a54:	0f 92       	push	r0
     a56:	2f 93       	push	r18
     a58:	3f 93       	push	r19
     a5a:	4f 93       	push	r20
     a5c:	5f 93       	push	r21
     a5e:	6f 93       	push	r22
     a60:	7f 93       	push	r23
     a62:	8f 93       	push	r24
     a64:	9f 93       	push	r25
     a66:	af 93       	push	r26
     a68:	bf 93       	push	r27
     a6a:	ef 93       	push	r30
     a6c:	ff 93       	push	r31
     a6e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <up>
     a72:	88 23       	and	r24, r24
     a74:	e9 f1       	breq	.+122    	; 0xaf0 <__vector_35+0xa8>
     a76:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <timerCounter>
     a7a:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <timerCounter+0x1>
     a7e:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <timerCounter+0x2>
     a82:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <timerCounter+0x3>
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	a1 1d       	adc	r26, r1
     a8a:	b1 1d       	adc	r27, r1
     a8c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <timerCounter>
     a90:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <timerCounter+0x1>
     a94:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <timerCounter+0x2>
     a98:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <timerCounter+0x3>
     a9c:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <timerCounter>
     aa0:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <timerCounter+0x1>
     aa4:	40 91 c2 02 	lds	r20, 0x02C2	; 0x8002c2 <timerCounter+0x2>
     aa8:	50 91 c3 02 	lds	r21, 0x02C3	; 0x8002c3 <timerCounter+0x3>
     aac:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     ab0:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     ab4:	af ef       	ldi	r26, 0xFF	; 255
     ab6:	bf ef       	ldi	r27, 0xFF	; 255
     ab8:	0e 94 6f 13 	call	0x26de	; 0x26de <__muluhisi3>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	8e 0f       	add	r24, r30
     ac2:	9f 1f       	adc	r25, r31
     ac4:	a1 1d       	adc	r26, r1
     ac6:	b1 1d       	adc	r27, r1
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	94 4d       	sbci	r25, 0xD4	; 212
     acc:	a0 43       	sbci	r26, 0x30	; 48
     ace:	b1 05       	cpc	r27, r1
     ad0:	78 f0       	brcs	.+30     	; 0xaf0 <__vector_35+0xa8>
     ad2:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <up>
     ad6:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <running>
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	9f ef       	ldi	r25, 0xFF	; 255
     ade:	dc 01       	movw	r26, r24
     ae0:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <result>
     ae4:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <result+0x1>
     ae8:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <result+0x2>
     aec:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <result+0x3>
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	bf 91       	pop	r27
     af6:	af 91       	pop	r26
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	7f 91       	pop	r23
     afe:	6f 91       	pop	r22
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	0f 90       	pop	r0
     b0a:	0b be       	out	0x3b, r0	; 59
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <initServo>:
     b16:	26 9a       	sbi	0x04, 6	; 4
     b18:	82 e3       	ldi	r24, 0x32	; 50
     b1a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     b1e:	82 e1       	ldi	r24, 0x12	; 18
     b20:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     b24:	80 e2       	ldi	r24, 0x20	; 32
     b26:	9e e4       	ldi	r25, 0x4E	; 78
     b28:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     b2c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     b30:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     b34:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	9b e4       	ldi	r25, 0x4B	; 75
     b3c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     b40:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     b44:	ef e6       	ldi	r30, 0x6F	; 111
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	82 60       	ori	r24, 0x02	; 2
     b4c:	80 83       	st	Z, r24
     b4e:	08 95       	ret

00000b50 <init_master>:
     b50:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b54:	88 e4       	ldi	r24, 0x48	; 72
     b56:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b60:	08 95       	ret

00000b62 <ontvangen>:
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	ec eb       	ldi	r30, 0xBC	; 188
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	90 81       	ld	r25, Z
     b74:	90 62       	ori	r25, 0x20	; 32
     b76:	90 83       	st	Z, r25
     b78:	90 81       	ld	r25, Z
     b7a:	99 23       	and	r25, r25
     b7c:	ec f7       	brge	.-6      	; 0xb78 <ontvangen+0x16>
     b7e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b82:	88 0f       	add	r24, r24
     b84:	8f 5f       	subi	r24, 0xFF	; 255
     b86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b8a:	84 e8       	ldi	r24, 0x84	; 132
     b8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b90:	ec eb       	ldi	r30, 0xBC	; 188
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	88 23       	and	r24, r24
     b98:	ec f7       	brge	.-6      	; 0xb94 <ontvangen+0x32>
     b9a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ba2:	db 01       	movw	r26, r22
     ba4:	8c 93       	st	X, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	41 50       	subi	r20, 0x01	; 1
     bac:	51 09       	sbc	r21, r1
     bae:	ec eb       	ldi	r30, 0xBC	; 188
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	0f 2e       	mov	r0, r31
     bb4:	f4 ec       	ldi	r31, 0xC4	; 196
     bb6:	ff 2e       	mov	r15, r31
     bb8:	f0 2d       	mov	r31, r0
     bba:	0f 2e       	mov	r0, r31
     bbc:	f4 e8       	ldi	r31, 0x84	; 132
     bbe:	ef 2e       	mov	r14, r31
     bc0:	f0 2d       	mov	r31, r0
     bc2:	09 eb       	ldi	r16, 0xB9	; 185
     bc4:	10 e0       	ldi	r17, 0x00	; 0
     bc6:	cb eb       	ldi	r28, 0xBB	; 187
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
     bca:	29 2f       	mov	r18, r25
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	24 17       	cp	r18, r20
     bd0:	35 07       	cpc	r19, r21
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <ontvangen+0x76>
     bd4:	e0 82       	st	Z, r14
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <ontvangen+0x78>
     bd8:	f0 82       	st	Z, r15
     bda:	80 81       	ld	r24, Z
     bdc:	88 23       	and	r24, r24
     bde:	ec f7       	brge	.-6      	; 0xbda <ontvangen+0x78>
     be0:	d8 01       	movw	r26, r16
     be2:	8c 91       	ld	r24, X
     be4:	28 81       	ld	r18, Y
     be6:	db 01       	movw	r26, r22
     be8:	a9 0f       	add	r26, r25
     bea:	b1 1d       	adc	r27, r1
     bec:	2c 93       	st	X, r18
     bee:	9f 5f       	subi	r25, 0xFF	; 255
     bf0:	80 35       	cpi	r24, 0x50	; 80
     bf2:	59 f3       	breq	.-42     	; 0xbca <ontvangen+0x68>
     bf4:	84 e9       	ldi	r24, 0x94	; 148
     bf6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	08 95       	ret

00000c08 <verzenden>:
     c08:	ec eb       	ldi	r30, 0xBC	; 188
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	90 81       	ld	r25, Z
     c0e:	90 62       	ori	r25, 0x20	; 32
     c10:	90 83       	st	Z, r25
     c12:	90 81       	ld	r25, Z
     c14:	99 23       	and	r25, r25
     c16:	ec f7       	brge	.-6      	; 0xc12 <verzenden+0xa>
     c18:	88 0f       	add	r24, r24
     c1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c1e:	84 e8       	ldi	r24, 0x84	; 132
     c20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c24:	ec eb       	ldi	r30, 0xBC	; 188
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 23       	and	r24, r24
     c2c:	ec f7       	brge	.-6      	; 0xc28 <verzenden+0x20>
     c2e:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c32:	84 e8       	ldi	r24, 0x84	; 132
     c34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c38:	ec eb       	ldi	r30, 0xBC	; 188
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 23       	and	r24, r24
     c40:	ec f7       	brge	.-6      	; 0xc3c <verzenden+0x34>
     c42:	84 e9       	ldi	r24, 0x94	; 148
     c44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c48:	08 95       	ret

00000c4a <gyroTaak>:
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	1f 92       	push	r1
     c50:	1f 92       	push	r1
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	01 e0       	ldi	r16, 0x01	; 1
     c58:	10 e0       	ldi	r17, 0x00	; 0
     c5a:	6b e3       	ldi	r22, 0x3B	; 59
     c5c:	88 e6       	ldi	r24, 0x68	; 104
     c5e:	d4 df       	rcall	.-88     	; 0xc08 <verzenden>
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	be 01       	movw	r22, r28
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	88 e6       	ldi	r24, 0x68	; 104
     c6a:	7b df       	rcall	.-266    	; 0xb62 <ontvangen>
     c6c:	f9 80       	ldd	r15, Y+1	; 0x01
     c6e:	6c e3       	ldi	r22, 0x3C	; 60
     c70:	88 e6       	ldi	r24, 0x68	; 104
     c72:	ca df       	rcall	.-108    	; 0xc08 <verzenden>
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	be 01       	movw	r22, r28
     c78:	6f 5f       	subi	r22, 0xFF	; 255
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	88 e6       	ldi	r24, 0x68	; 104
     c7e:	71 df       	rcall	.-286    	; 0xb62 <ontvangen>
     c80:	6f 2d       	mov	r22, r15
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	76 2f       	mov	r23, r22
     c86:	66 27       	eor	r22, r22
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	68 2b       	or	r22, r24
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 45 12 	call	0x248a	; 0x248a <__floatunsisf>
     c94:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <_gyroScale>
     c98:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <_gyroScale+0x1>
     c9c:	40 91 6d 04 	lds	r20, 0x046D	; 0x80046d <_gyroScale+0x2>
     ca0:	50 91 6e 04 	lds	r21, 0x046E	; 0x80046e <_gyroScale+0x3>
     ca4:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__mulsf3>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	4a e8       	ldi	r20, 0x8A	; 138
     cae:	52 e4       	ldi	r21, 0x42	; 66
     cb0:	0e 94 af 11 	call	0x235e	; 0x235e <__subsf3>
     cb4:	0e 94 14 12 	call	0x2428	; 0x2428 <__fixsfsi>
     cb8:	70 93 37 03 	sts	0x0337, r23	; 0x800337 <gyroX+0x1>
     cbc:	60 93 36 03 	sts	0x0336, r22	; 0x800336 <gyroX>
     cc0:	6d e3       	ldi	r22, 0x3D	; 61
     cc2:	88 e6       	ldi	r24, 0x68	; 104
     cc4:	a1 df       	rcall	.-190    	; 0xc08 <verzenden>
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	be 01       	movw	r22, r28
     cca:	6f 5f       	subi	r22, 0xFF	; 255
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	88 e6       	ldi	r24, 0x68	; 104
     cd0:	48 df       	rcall	.-368    	; 0xb62 <ontvangen>
     cd2:	f9 80       	ldd	r15, Y+1	; 0x01
     cd4:	6e e3       	ldi	r22, 0x3E	; 62
     cd6:	88 e6       	ldi	r24, 0x68	; 104
     cd8:	97 df       	rcall	.-210    	; 0xc08 <verzenden>
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	be 01       	movw	r22, r28
     cde:	6f 5f       	subi	r22, 0xFF	; 255
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
     ce2:	88 e6       	ldi	r24, 0x68	; 104
     ce4:	3e df       	rcall	.-388    	; 0xb62 <ontvangen>
     ce6:	6f 2d       	mov	r22, r15
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	76 2f       	mov	r23, r22
     cec:	66 27       	eor	r22, r22
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	68 2b       	or	r22, r24
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 45 12 	call	0x248a	; 0x248a <__floatunsisf>
     cfa:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <_gyroScale>
     cfe:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <_gyroScale+0x1>
     d02:	40 91 6d 04 	lds	r20, 0x046D	; 0x80046d <_gyroScale+0x2>
     d06:	50 91 6e 04 	lds	r21, 0x046E	; 0x80046e <_gyroScale+0x3>
     d0a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__mulsf3>
     d0e:	0e 94 14 12 	call	0x2428	; 0x2428 <__fixsfsi>
     d12:	70 93 6a 04 	sts	0x046A, r23	; 0x80046a <gyroY+0x1>
     d16:	60 93 69 04 	sts	0x0469, r22	; 0x800469 <gyroY>
     d1a:	6f e3       	ldi	r22, 0x3F	; 63
     d1c:	88 e6       	ldi	r24, 0x68	; 104
     d1e:	74 df       	rcall	.-280    	; 0xc08 <verzenden>
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	be 01       	movw	r22, r28
     d24:	6f 5f       	subi	r22, 0xFF	; 255
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	88 e6       	ldi	r24, 0x68	; 104
     d2a:	1b df       	rcall	.-458    	; 0xb62 <ontvangen>
     d2c:	f9 80       	ldd	r15, Y+1	; 0x01
     d2e:	60 e4       	ldi	r22, 0x40	; 64
     d30:	88 e6       	ldi	r24, 0x68	; 104
     d32:	6a df       	rcall	.-300    	; 0xc08 <verzenden>
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	be 01       	movw	r22, r28
     d38:	6f 5f       	subi	r22, 0xFF	; 255
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	88 e6       	ldi	r24, 0x68	; 104
     d3e:	11 df       	rcall	.-478    	; 0xb62 <ontvangen>
     d40:	6f 2d       	mov	r22, r15
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	76 2f       	mov	r23, r22
     d46:	66 27       	eor	r22, r22
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	68 2b       	or	r22, r24
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 45 12 	call	0x248a	; 0x248a <__floatunsisf>
     d54:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <_gyroScale>
     d58:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <_gyroScale+0x1>
     d5c:	40 91 6d 04 	lds	r20, 0x046D	; 0x80046d <_gyroScale+0x2>
     d60:	50 91 6e 04 	lds	r21, 0x046E	; 0x80046e <_gyroScale+0x3>
     d64:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__mulsf3>
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e8       	ldi	r20, 0x80	; 128
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	0e 94 af 11 	call	0x235e	; 0x235e <__subsf3>
     d74:	0e 94 14 12 	call	0x2428	; 0x2428 <__fixsfsi>
     d78:	70 93 51 04 	sts	0x0451, r23	; 0x800451 <gyroZ+0x1>
     d7c:	60 93 50 04 	sts	0x0450, r22	; 0x800450 <gyroZ>
     d80:	63 e4       	ldi	r22, 0x43	; 67
     d82:	88 e6       	ldi	r24, 0x68	; 104
     d84:	41 df       	rcall	.-382    	; 0xc08 <verzenden>
     d86:	41 e0       	ldi	r20, 0x01	; 1
     d88:	be 01       	movw	r22, r28
     d8a:	6f 5f       	subi	r22, 0xFF	; 255
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	88 e6       	ldi	r24, 0x68	; 104
     d90:	e8 de       	rcall	.-560    	; 0xb62 <ontvangen>
     d92:	f9 80       	ldd	r15, Y+1	; 0x01
     d94:	64 e4       	ldi	r22, 0x44	; 68
     d96:	88 e6       	ldi	r24, 0x68	; 104
     d98:	37 df       	rcall	.-402    	; 0xc08 <verzenden>
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	be 01       	movw	r22, r28
     d9e:	6f 5f       	subi	r22, 0xFF	; 255
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	88 e6       	ldi	r24, 0x68	; 104
     da4:	de de       	rcall	.-580    	; 0xb62 <ontvangen>
     da6:	6f 2d       	mov	r22, r15
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	76 2f       	mov	r23, r22
     dac:	66 27       	eor	r22, r22
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	68 2b       	or	r22, r24
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 45 12 	call	0x248a	; 0x248a <__floatunsisf>
     dba:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <_accelScale>
     dbe:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <_accelScale+0x1>
     dc2:	40 91 67 04 	lds	r20, 0x0467	; 0x800467 <_accelScale+0x2>
     dc6:	50 91 68 04 	lds	r21, 0x0468	; 0x800468 <_accelScale+0x3>
     dca:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__mulsf3>
     dce:	0e 94 14 12 	call	0x2428	; 0x2428 <__fixsfsi>
     dd2:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <accelX+0x1>
     dd6:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <accelX>
     dda:	65 e4       	ldi	r22, 0x45	; 69
     ddc:	88 e6       	ldi	r24, 0x68	; 104
     dde:	14 df       	rcall	.-472    	; 0xc08 <verzenden>
     de0:	41 e0       	ldi	r20, 0x01	; 1
     de2:	be 01       	movw	r22, r28
     de4:	6f 5f       	subi	r22, 0xFF	; 255
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	88 e6       	ldi	r24, 0x68	; 104
     dea:	bb de       	rcall	.-650    	; 0xb62 <ontvangen>
     dec:	f9 80       	ldd	r15, Y+1	; 0x01
     dee:	66 e4       	ldi	r22, 0x46	; 70
     df0:	88 e6       	ldi	r24, 0x68	; 104
     df2:	0a df       	rcall	.-492    	; 0xc08 <verzenden>
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	be 01       	movw	r22, r28
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	88 e6       	ldi	r24, 0x68	; 104
     dfe:	b1 de       	rcall	.-670    	; 0xb62 <ontvangen>
     e00:	6f 2d       	mov	r22, r15
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	76 2f       	mov	r23, r22
     e06:	66 27       	eor	r22, r22
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	68 2b       	or	r22, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 45 12 	call	0x248a	; 0x248a <__floatunsisf>
     e14:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <_accelScale>
     e18:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <_accelScale+0x1>
     e1c:	40 91 67 04 	lds	r20, 0x0467	; 0x800467 <_accelScale+0x2>
     e20:	50 91 68 04 	lds	r21, 0x0468	; 0x800468 <_accelScale+0x3>
     e24:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__mulsf3>
     e28:	0e 94 14 12 	call	0x2428	; 0x2428 <__fixsfsi>
     e2c:	70 93 2d 03 	sts	0x032D, r23	; 0x80032d <accelY+0x1>
     e30:	60 93 2c 03 	sts	0x032C, r22	; 0x80032c <accelY>
     e34:	67 e4       	ldi	r22, 0x47	; 71
     e36:	88 e6       	ldi	r24, 0x68	; 104
     e38:	e7 de       	rcall	.-562    	; 0xc08 <verzenden>
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	be 01       	movw	r22, r28
     e3e:	6f 5f       	subi	r22, 0xFF	; 255
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	88 e6       	ldi	r24, 0x68	; 104
     e44:	8e de       	rcall	.-740    	; 0xb62 <ontvangen>
     e46:	f9 80       	ldd	r15, Y+1	; 0x01
     e48:	68 e4       	ldi	r22, 0x48	; 72
     e4a:	88 e6       	ldi	r24, 0x68	; 104
     e4c:	dd de       	rcall	.-582    	; 0xc08 <verzenden>
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	be 01       	movw	r22, r28
     e52:	6f 5f       	subi	r22, 0xFF	; 255
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	88 e6       	ldi	r24, 0x68	; 104
     e58:	84 de       	rcall	.-760    	; 0xb62 <ontvangen>
     e5a:	6f 2d       	mov	r22, r15
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	76 2f       	mov	r23, r22
     e60:	66 27       	eor	r22, r22
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	68 2b       	or	r22, r24
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 45 12 	call	0x248a	; 0x248a <__floatunsisf>
     e6e:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <_accelScale>
     e72:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <_accelScale+0x1>
     e76:	40 91 67 04 	lds	r20, 0x0467	; 0x800467 <_accelScale+0x2>
     e7a:	50 91 68 04 	lds	r21, 0x0468	; 0x800468 <_accelScale+0x3>
     e7e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__mulsf3>
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e8       	ldi	r19, 0x80	; 128
     e86:	4c e9       	ldi	r20, 0x9C	; 156
     e88:	53 e4       	ldi	r21, 0x43	; 67
     e8a:	0e 94 af 11 	call	0x235e	; 0x235e <__subsf3>
     e8e:	0e 94 14 12 	call	0x2428	; 0x2428 <__fixsfsi>
     e92:	70 93 62 04 	sts	0x0462, r23	; 0x800462 <accelZ+0x1>
     e96:	60 93 61 04 	sts	0x0461, r22	; 0x800461 <accelZ>
     e9a:	10 93 33 03 	sts	0x0333, r17	; 0x800333 <watchdogGyro+0x1>
     e9e:	00 93 32 03 	sts	0x0332, r16	; 0x800332 <watchdogGyro>
     ea2:	db ce       	rjmp	.-586    	; 0xc5a <gyroTaak+0x10>

00000ea4 <__vector_17>:
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	95 b1       	in	r25, 0x05	; 5
     eb4:	80 e4       	ldi	r24, 0x40	; 64
     eb6:	89 27       	eor	r24, r25
     eb8:	85 b9       	out	0x05, r24	; 5
     eba:	9f 91       	pop	r25
     ebc:	8f 91       	pop	r24
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <motorAchteruit>:
     ec8:	eb e0       	ldi	r30, 0x0B	; 11
     eca:	f1 e0       	ldi	r31, 0x01	; 1
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	80 83       	st	Z, r24
     ed2:	5f 9a       	sbi	0x0b, 7	; 11
     ed4:	08 95       	ret

00000ed6 <motorEnable>:
     ed6:	eb e0       	ldi	r30, 0x0B	; 11
     ed8:	f1 e0       	ldi	r31, 0x01	; 1
     eda:	80 81       	ld	r24, Z
     edc:	88 60       	ori	r24, 0x08	; 8
     ede:	80 83       	st	Z, r24
     ee0:	80 81       	ld	r24, Z
     ee2:	80 62       	ori	r24, 0x20	; 32
     ee4:	80 83       	st	Z, r24
     ee6:	08 95       	ret

00000ee8 <initMotor>:
     ee8:	39 9a       	sbi	0x07, 1	; 7
     eea:	57 9a       	sbi	0x0a, 7	; 10
     eec:	ea e0       	ldi	r30, 0x0A	; 10
     eee:	f1 e0       	ldi	r31, 0x01	; 1
     ef0:	80 81       	ld	r24, Z
     ef2:	88 6a       	ori	r24, 0xA8	; 168
     ef4:	80 83       	st	Z, r24
     ef6:	99 9a       	sbi	0x13, 1	; 19
     ef8:	8e ec       	ldi	r24, 0xCE	; 206
     efa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     efe:	82 e1       	ldi	r24, 0x12	; 18
     f00:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
     f04:	80 e2       	ldi	r24, 0x20	; 32
     f06:	9e e4       	ldi	r25, 0x4E	; 78
     f08:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     f0c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     f10:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
     f14:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     f18:	de cf       	rjmp	.-68     	; 0xed6 <motorEnable>
     f1a:	08 95       	ret

00000f1c <main>:
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	43 e0       	ldi	r20, 0x03	; 3
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	2a d3       	rcall	.+1620   	; 0x157e <xQueueGenericCreate>
     f2a:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <sem+0x1>
     f2e:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <sem>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	4c d3       	rcall	.+1688   	; 0x15d6 <xQueueGenericSend>
     f3e:	8a b1       	in	r24, 0x0a	; 10
     f40:	83 60       	ori	r24, 0x03	; 3
     f42:	8a b9       	out	0x0a, r24	; 10
     f44:	20 9a       	sbi	0x04, 0	; 4
     f46:	d0 df       	rcall	.-96     	; 0xee8 <initMotor>
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	8a e0       	ldi	r24, 0x0A	; 10
     f4e:	17 d3       	rcall	.+1582   	; 0x157e <xQueueGenericCreate>
     f50:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <motorCommand+0x1>
     f54:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <motorCommand>
     f58:	ee db       	rcall	.-2084   	; 0x736 <UART_Init>
     f5a:	c8 dc       	rcall	.-1648   	; 0x8ec <INT1_init>
     f5c:	66 dd       	rcall	.-1332   	; 0xa2a <timer3_init>
     f5e:	db dd       	rcall	.-1098   	; 0xb16 <initServo>
     f60:	78 94       	sei
     f62:	f6 dd       	rcall	.-1044   	; 0xb50 <init_master>
     f64:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <watchdogSonar+0x1>
     f68:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <watchdogSonar>
     f6c:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <watchdogServo+0x1>
     f70:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <watchdogServo>
     f74:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <watchdogTemp+0x1>
     f78:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <watchdogTemp>
     f7c:	98 e2       	ldi	r25, 0x28	; 40
     f7e:	88 e1       	ldi	r24, 0x18	; 24
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	a8 95       	wdr
     f86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     f90:	86 e1       	ldi	r24, 0x16	; 22
     f92:	9a ee       	ldi	r25, 0xEA	; 234
     f94:	ac e9       	ldi	r26, 0x9C	; 156
     f96:	bb e3       	ldi	r27, 0x3B	; 59
     f98:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <_accelScale>
     f9c:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <_accelScale+0x1>
     fa0:	a0 93 67 04 	sts	0x0467, r26	; 0x800467 <_accelScale+0x2>
     fa4:	b0 93 68 04 	sts	0x0468, r27	; 0x800468 <_accelScale+0x3>
     fa8:	83 ee       	ldi	r24, 0xE3	; 227
     faa:	90 ea       	ldi	r25, 0xA0	; 160
     fac:	ab e8       	ldi	r26, 0x8B	; 139
     fae:	ba e3       	ldi	r27, 0x3A	; 58
     fb0:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <_gyroScale>
     fb4:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <_gyroScale+0x1>
     fb8:	a0 93 6d 04 	sts	0x046D, r26	; 0x80046d <_gyroScale+0x2>
     fbc:	b0 93 6e 04 	sts	0x046E, r27	; 0x80046e <_gyroScale+0x3>
     fc0:	8a e3       	ldi	r24, 0x3A	; 58
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	d8 db       	rcall	.-2128   	; 0x776 <UART_Transmit_String>
     fc6:	e1 2c       	mov	r14, r1
     fc8:	f1 2c       	mov	r15, r1
     fca:	03 e0       	ldi	r16, 0x03	; 3
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	51 e0       	ldi	r21, 0x01	; 1
     fd4:	69 e4       	ldi	r22, 0x49	; 73
     fd6:	72 e0       	ldi	r23, 0x02	; 2
     fd8:	84 ef       	ldi	r24, 0xF4	; 244
     fda:	94 e0       	ldi	r25, 0x04	; 4
     fdc:	e7 d5       	rcall	.+3022   	; 0x1bac <xTaskCreate>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	51 e0       	ldi	r21, 0x01	; 1
     fe6:	66 e5       	ldi	r22, 0x56	; 86
     fe8:	72 e0       	ldi	r23, 0x02	; 2
     fea:	87 ee       	ldi	r24, 0xE7	; 231
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	de d5       	rcall	.+3004   	; 0x1bac <xTaskCreate>
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	51 e0       	ldi	r21, 0x01	; 1
     ff8:	62 e6       	ldi	r22, 0x62	; 98
     ffa:	72 e0       	ldi	r23, 0x02	; 2
     ffc:	85 e2       	ldi	r24, 0x25	; 37
     ffe:	96 e0       	ldi	r25, 0x06	; 6
    1000:	d5 d5       	rcall	.+2986   	; 0x1bac <xTaskCreate>
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	51 e0       	ldi	r21, 0x01	; 1
    100a:	63 e7       	ldi	r22, 0x73	; 115
    100c:	72 e0       	ldi	r23, 0x02	; 2
    100e:	89 e4       	ldi	r24, 0x49	; 73
    1010:	98 e0       	ldi	r25, 0x08	; 8
    1012:	cc d5       	rcall	.+2968   	; 0x1bac <xTaskCreate>
    1014:	04 e0       	ldi	r16, 0x04	; 4
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	51 e0       	ldi	r21, 0x01	; 1
    101e:	6b e8       	ldi	r22, 0x8B	; 139
    1020:	72 e0       	ldi	r23, 0x02	; 2
    1022:	85 e7       	ldi	r24, 0x75	; 117
    1024:	93 e0       	ldi	r25, 0x03	; 3
    1026:	c2 d5       	rcall	.+2948   	; 0x1bac <xTaskCreate>
    1028:	d5 d6       	rcall	.+3498   	; 0x1dd4 <vTaskStartScheduler>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	08 95       	ret

00001036 <setSpeed>:
}

void setSpeed(uint8_t speed)
{
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
	itoa(speed, send, 10);
    103e:	08 2f       	mov	r16, r24
    1040:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1042:	4a e0       	ldi	r20, 0x0A	; 10
    1044:	6c e3       	ldi	r22, 0x3C	; 60
    1046:	74 e0       	ldi	r23, 0x04	; 4
    1048:	c8 01       	movw	r24, r16
    104a:	0e 94 aa 14 	call	0x2954	; 0x2954 <__itoa_ncheck>
	UART_Transmit_String(send);
    104e:	8c e3       	ldi	r24, 0x3C	; 60
    1050:	94 e0       	ldi	r25, 0x04	; 4
    1052:	91 db       	rcall	.-2270   	; 0x776 <UART_Transmit_String>
	uint16_t newSpeed = 20000 - (20000 / 100 * speed);
    1054:	88 e3       	ldi	r24, 0x38	; 56
    1056:	80 9f       	mul	r24, r16
    1058:	e0 01       	movw	r28, r0
    105a:	81 9f       	mul	r24, r17
    105c:	d0 0d       	add	r29, r0
    105e:	d0 1b       	sub	r29, r16
    1060:	11 24       	eor	r1, r1
    1062:	c0 5e       	subi	r28, 0xE0	; 224
    1064:	d1 4b       	sbci	r29, 0xB1	; 177
    1066:	4a e0       	ldi	r20, 0x0A	; 10
    1068:	6c e3       	ldi	r22, 0x3C	; 60
    106a:	74 e0       	ldi	r23, 0x04	; 4
    106c:	ce 01       	movw	r24, r28
    106e:	0e 94 aa 14 	call	0x2954	; 0x2954 <__itoa_ncheck>
	itoa(newSpeed, send, 10);
	UART_Transmit_String(send);
    1072:	8c e3       	ldi	r24, 0x3C	; 60
    1074:	94 e0       	ldi	r25, 0x04	; 4
    1076:	7f db       	rcall	.-2306   	; 0x776 <UART_Transmit_String>
	OCR5A = newSpeed;
    1078:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    107c:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5C = newSpeed;
    1080:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    1084:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <motorTaak2>:

	vTaskStartScheduler();
}

void motorTaak2(){
	setSpeed(10);
    1092:	8a e0       	ldi	r24, 0x0A	; 10
    1094:	d0 df       	rcall	.-96     	; 0x1036 <setSpeed>
	while(1){
		//motorRechts();
		//motorVooruit();
		//vTaskDelay(100);
		//motorLinks();
		motorAchteruit();
    1096:	18 df       	rcall	.-464    	; 0xec8 <motorAchteruit>
    1098:	fe cf       	rjmp	.-4      	; 0x1096 <motorTaak2+0x4>

0000109a <pxPortInitialiseStack>:
    109a:	31 e1       	ldi	r19, 0x11	; 17

#if defined (portUSE_WDTO)
        wdt_disable();											// disable Watchdog Timer

#elif defined( portUSE_TIMER0 )
        portTIMSK &= ~( _BV(OCIE0B)|_BV(OCIE0A)|_BV(TOIE0) );	// disable all Timer0 interrupts
    109c:	fc 01       	movw	r30, r24
    109e:	30 83       	st	Z, r19
    10a0:	31 97       	sbiw	r30, 0x01	; 1
    10a2:	22 e2       	ldi	r18, 0x22	; 34
    10a4:	20 83       	st	Z, r18
    10a6:	31 97       	sbiw	r30, 0x01	; 1
    10a8:	a3 e3       	ldi	r26, 0x33	; 51
    10aa:	a0 83       	st	Z, r26
    10ac:	31 97       	sbiw	r30, 0x01	; 1
    10ae:	60 83       	st	Z, r22
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	70 83       	st	Z, r23
    10b4:	31 97       	sbiw	r30, 0x01	; 1
    10b6:	10 82       	st	Z, r1
    10b8:	31 97       	sbiw	r30, 0x01	; 1
    10ba:	10 82       	st	Z, r1
    10bc:	31 97       	sbiw	r30, 0x01	; 1
    10be:	60 e8       	ldi	r22, 0x80	; 128
    10c0:	60 83       	st	Z, r22
    10c2:	31 97       	sbiw	r30, 0x01	; 1
    10c4:	10 82       	st	Z, r1
    10c6:	31 97       	sbiw	r30, 0x01	; 1
    10c8:	10 82       	st	Z, r1
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	10 82       	st	Z, r1
    10ce:	31 97       	sbiw	r30, 0x01	; 1
    10d0:	62 e0       	ldi	r22, 0x02	; 2
    10d2:	60 83       	st	Z, r22
    10d4:	31 97       	sbiw	r30, 0x01	; 1
    10d6:	63 e0       	ldi	r22, 0x03	; 3
    10d8:	60 83       	st	Z, r22
    10da:	31 97       	sbiw	r30, 0x01	; 1
    10dc:	64 e0       	ldi	r22, 0x04	; 4
    10de:	60 83       	st	Z, r22
    10e0:	31 97       	sbiw	r30, 0x01	; 1
    10e2:	65 e0       	ldi	r22, 0x05	; 5
    10e4:	60 83       	st	Z, r22
    10e6:	31 97       	sbiw	r30, 0x01	; 1
    10e8:	66 e0       	ldi	r22, 0x06	; 6
    10ea:	60 83       	st	Z, r22
    10ec:	31 97       	sbiw	r30, 0x01	; 1
    10ee:	67 e0       	ldi	r22, 0x07	; 7
    10f0:	60 83       	st	Z, r22
    10f2:	31 97       	sbiw	r30, 0x01	; 1
    10f4:	68 e0       	ldi	r22, 0x08	; 8
    10f6:	60 83       	st	Z, r22
    10f8:	31 97       	sbiw	r30, 0x01	; 1
    10fa:	69 e0       	ldi	r22, 0x09	; 9
    10fc:	60 83       	st	Z, r22
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	60 e1       	ldi	r22, 0x10	; 16
    1102:	60 83       	st	Z, r22
    1104:	31 97       	sbiw	r30, 0x01	; 1
    1106:	30 83       	st	Z, r19
    1108:	31 97       	sbiw	r30, 0x01	; 1
    110a:	32 e1       	ldi	r19, 0x12	; 18
    110c:	30 83       	st	Z, r19
    110e:	31 97       	sbiw	r30, 0x01	; 1
    1110:	33 e1       	ldi	r19, 0x13	; 19
    1112:	30 83       	st	Z, r19
    1114:	31 97       	sbiw	r30, 0x01	; 1
    1116:	34 e1       	ldi	r19, 0x14	; 20
    1118:	30 83       	st	Z, r19
    111a:	31 97       	sbiw	r30, 0x01	; 1
    111c:	35 e1       	ldi	r19, 0x15	; 21
    111e:	30 83       	st	Z, r19
    1120:	31 97       	sbiw	r30, 0x01	; 1
    1122:	36 e1       	ldi	r19, 0x16	; 22
    1124:	30 83       	st	Z, r19
    1126:	31 97       	sbiw	r30, 0x01	; 1
    1128:	37 e1       	ldi	r19, 0x17	; 23
    112a:	30 83       	st	Z, r19
    112c:	31 97       	sbiw	r30, 0x01	; 1
    112e:	38 e1       	ldi	r19, 0x18	; 24
    1130:	30 83       	st	Z, r19
    1132:	31 97       	sbiw	r30, 0x01	; 1
    1134:	39 e1       	ldi	r19, 0x19	; 25
    1136:	30 83       	st	Z, r19
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	30 e2       	ldi	r19, 0x20	; 32
    113c:	30 83       	st	Z, r19
    113e:	31 97       	sbiw	r30, 0x01	; 1
    1140:	31 e2       	ldi	r19, 0x21	; 33
    1142:	30 83       	st	Z, r19
    1144:	31 97       	sbiw	r30, 0x01	; 1
    1146:	20 83       	st	Z, r18
    1148:	31 97       	sbiw	r30, 0x01	; 1
    114a:	23 e2       	ldi	r18, 0x23	; 35
    114c:	20 83       	st	Z, r18
    114e:	31 97       	sbiw	r30, 0x01	; 1
    1150:	40 83       	st	Z, r20
    1152:	31 97       	sbiw	r30, 0x01	; 1
    1154:	50 83       	st	Z, r21
    1156:	31 97       	sbiw	r30, 0x01	; 1
    1158:	26 e2       	ldi	r18, 0x26	; 38
    115a:	20 83       	st	Z, r18
    115c:	31 97       	sbiw	r30, 0x01	; 1
    115e:	27 e2       	ldi	r18, 0x27	; 39
    1160:	20 83       	st	Z, r18
    1162:	31 97       	sbiw	r30, 0x01	; 1
    1164:	28 e2       	ldi	r18, 0x28	; 40
    1166:	20 83       	st	Z, r18
    1168:	31 97       	sbiw	r30, 0x01	; 1
    116a:	29 e2       	ldi	r18, 0x29	; 41
    116c:	20 83       	st	Z, r18
    116e:	31 97       	sbiw	r30, 0x01	; 1
    1170:	20 e3       	ldi	r18, 0x30	; 48
    1172:	20 83       	st	Z, r18
    1174:	31 97       	sbiw	r30, 0x01	; 1
    1176:	21 e3       	ldi	r18, 0x31	; 49
    1178:	20 83       	st	Z, r18
    117a:	89 97       	sbiw	r24, 0x29	; 41
    117c:	08 95       	ret

0000117e <xPortStartScheduler>:
    117e:	88 ec       	ldi	r24, 0xC8	; 200
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <portTickRateHz+0x1>
    1186:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <portTickRateHz>
    118a:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <ticksRemainingInSec+0x1>
    118e:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <ticksRemainingInSec>
    1192:	8d e4       	ldi	r24, 0x4D	; 77
    1194:	87 bd       	out	0x27, r24	; 39
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	84 bd       	out	0x24, r24	; 36
    119a:	85 e0       	ldi	r24, 0x05	; 5
    119c:	85 bd       	out	0x25, r24	; 37
    119e:	ee e6       	ldi	r30, 0x6E	; 110
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	82 60       	ori	r24, 0x02	; 2
    11a6:	80 83       	st	Z, r24
    11a8:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
    11ac:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    11b0:	cd 91       	ld	r28, X+
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	dd 91       	ld	r29, X+
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	bf 91       	pop	r27
    11c2:	af 91       	pop	r26
    11c4:	9f 91       	pop	r25
    11c6:	8f 91       	pop	r24
    11c8:	7f 91       	pop	r23
    11ca:	6f 91       	pop	r22
    11cc:	5f 91       	pop	r21
    11ce:	4f 91       	pop	r20
    11d0:	3f 91       	pop	r19
    11d2:	2f 91       	pop	r18
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	df 90       	pop	r13
    11de:	cf 90       	pop	r12
    11e0:	bf 90       	pop	r11
    11e2:	af 90       	pop	r10
    11e4:	9f 90       	pop	r9
    11e6:	8f 90       	pop	r8
    11e8:	7f 90       	pop	r7
    11ea:	6f 90       	pop	r6
    11ec:	5f 90       	pop	r5
    11ee:	4f 90       	pop	r4
    11f0:	3f 90       	pop	r3
    11f2:	2f 90       	pop	r2
    11f4:	1f 90       	pop	r1
    11f6:	0f 90       	pop	r0
    11f8:	0c be       	out	0x3c, r0	; 60
    11fa:	0f 90       	pop	r0
    11fc:	0b be       	out	0x3b, r0	; 59
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	0f 90       	pop	r0
    1204:	08 95       	ret
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	08 95       	ret

0000120a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    120a:	0f 92       	push	r0
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	0f 92       	push	r0
    1212:	0b b6       	in	r0, 0x3b	; 59
    1214:	0f 92       	push	r0
    1216:	0c b6       	in	r0, 0x3c	; 60
    1218:	0f 92       	push	r0
    121a:	1f 92       	push	r1
    121c:	11 24       	eor	r1, r1
    121e:	2f 92       	push	r2
    1220:	3f 92       	push	r3
    1222:	4f 92       	push	r4
    1224:	5f 92       	push	r5
    1226:	6f 92       	push	r6
    1228:	7f 92       	push	r7
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	2f 93       	push	r18
    1240:	3f 93       	push	r19
    1242:	4f 93       	push	r20
    1244:	5f 93       	push	r21
    1246:	6f 93       	push	r22
    1248:	7f 93       	push	r23
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
    125a:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
    125e:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1262:	0d b6       	in	r0, 0x3d	; 61
    1264:	0d 92       	st	X+, r0
    1266:	0e b6       	in	r0, 0x3e	; 62
    1268:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    126a:	18 d7       	rcall	.+3632   	; 0x209c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    126c:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
    1270:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1274:	cd 91       	ld	r28, X+
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	dd 91       	ld	r29, X+
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	ff 91       	pop	r31
    127e:	ef 91       	pop	r30
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	cf 90       	pop	r12
    12a4:	bf 90       	pop	r11
    12a6:	af 90       	pop	r10
    12a8:	9f 90       	pop	r9
    12aa:	8f 90       	pop	r8
    12ac:	7f 90       	pop	r7
    12ae:	6f 90       	pop	r6
    12b0:	5f 90       	pop	r5
    12b2:	4f 90       	pop	r4
    12b4:	3f 90       	pop	r3
    12b6:	2f 90       	pop	r2
    12b8:	1f 90       	pop	r1
    12ba:	0f 90       	pop	r0
    12bc:	0c be       	out	0x3c, r0	; 60
    12be:	0f 90       	pop	r0
    12c0:	0b be       	out	0x3b, r0	; 59
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    12c8:	08 95       	ret

000012ca <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    12ca:	0f 92       	push	r0
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	0f 92       	push	r0
    12d2:	0b b6       	in	r0, 0x3b	; 59
    12d4:	0f 92       	push	r0
    12d6:	0c b6       	in	r0, 0x3c	; 60
    12d8:	0f 92       	push	r0
    12da:	1f 92       	push	r1
    12dc:	11 24       	eor	r1, r1
    12de:	2f 92       	push	r2
    12e0:	3f 92       	push	r3
    12e2:	4f 92       	push	r4
    12e4:	5f 92       	push	r5
    12e6:	6f 92       	push	r6
    12e8:	7f 92       	push	r7
    12ea:	8f 92       	push	r8
    12ec:	9f 92       	push	r9
    12ee:	af 92       	push	r10
    12f0:	bf 92       	push	r11
    12f2:	cf 92       	push	r12
    12f4:	df 92       	push	r13
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	2f 93       	push	r18
    1300:	3f 93       	push	r19
    1302:	4f 93       	push	r20
    1304:	5f 93       	push	r21
    1306:	6f 93       	push	r22
    1308:	7f 93       	push	r23
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	af 93       	push	r26
    1310:	bf 93       	push	r27
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	ef 93       	push	r30
    1318:	ff 93       	push	r31
    131a:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
    131e:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1322:	0d b6       	in	r0, 0x3d	; 61
    1324:	0d 92       	st	X+, r0
    1326:	0e b6       	in	r0, 0x3e	; 62
    1328:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    132a:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
    132c:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <ticksRemainingInSec>
    1330:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <ticksRemainingInSec+0x1>
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <ticksRemainingInSec+0x1>
    133a:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <ticksRemainingInSec>
    133e:	89 2b       	or	r24, r25
    1340:	51 f4       	brne	.+20     	; 0x1356 <vPortYieldFromTick+0x8c>
	{
		system_tick();
    1342:	0e 94 8e 01 	call	0x31c	; 0x31c <system_tick>
		ticksRemainingInSec = portTickRateHz;
    1346:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <portTickRateHz>
    134a:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <portTickRateHz+0x1>
    134e:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <ticksRemainingInSec+0x1>
    1352:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <ticksRemainingInSec>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
    1356:	6c d5       	rcall	.+2776   	; 0x1e30 <xTaskIncrementTick>
    1358:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    135a:	a0 d6       	rcall	.+3392   	; 0x209c <vTaskSwitchContext>
    135c:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
    1360:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1364:	cd 91       	ld	r28, X+
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	dd 91       	ld	r29, X+
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	ff 91       	pop	r31
    136e:	ef 91       	pop	r30
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	bf 91       	pop	r27
    1376:	af 91       	pop	r26
    1378:	9f 91       	pop	r25
    137a:	8f 91       	pop	r24
    137c:	7f 91       	pop	r23
    137e:	6f 91       	pop	r22
    1380:	5f 91       	pop	r21
    1382:	4f 91       	pop	r20
    1384:	3f 91       	pop	r19
    1386:	2f 91       	pop	r18
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	df 90       	pop	r13
    1392:	cf 90       	pop	r12
    1394:	bf 90       	pop	r11
    1396:	af 90       	pop	r10
    1398:	9f 90       	pop	r9
    139a:	8f 90       	pop	r8
    139c:	7f 90       	pop	r7
    139e:	6f 90       	pop	r6
    13a0:	5f 90       	pop	r5
    13a2:	4f 90       	pop	r4
    13a4:	3f 90       	pop	r3
    13a6:	2f 90       	pop	r2
    13a8:	1f 90       	pop	r1
    13aa:	0f 90       	pop	r0
    13ac:	0c be       	out	0x3c, r0	; 60
    13ae:	0f 90       	pop	r0
    13b0:	0b be       	out	0x3b, r0	; 59
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	08 95       	ret

000013ba <__vector_21>:

	__asm__ __volatile__ ( "ret" );
    13ba:	87 df       	rcall	.-242    	; 0x12ca <vPortYieldFromTick>
//	ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
		__asm__ __volatile__ ( "reti" );
    13bc:	18 95       	reti

000013be <prvCopyDataToQueue>:
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
	}
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	ec 01       	movw	r28, r24
    13c8:	04 2f       	mov	r16, r20
    13ca:	1a 8d       	ldd	r17, Y+26	; 0x1a
    13cc:	4c 8d       	ldd	r20, Y+28	; 0x1c
    13ce:	41 11       	cpse	r20, r1
    13d0:	0b c0       	rjmp	.+22     	; 0x13e8 <prvCopyDataToQueue+0x2a>
    13d2:	88 81       	ld	r24, Y
    13d4:	99 81       	ldd	r25, Y+1	; 0x01
    13d6:	89 2b       	or	r24, r25
    13d8:	09 f0       	breq	.+2      	; 0x13dc <prvCopyDataToQueue+0x1e>
    13da:	41 c0       	rjmp	.+130    	; 0x145e <prvCopyDataToQueue+0xa0>
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	7e d7       	rcall	.+3836   	; 0x22de <xTaskPriorityDisinherit>
    13e2:	1b 82       	std	Y+3, r1	; 0x03
    13e4:	1a 82       	std	Y+2, r1	; 0x02
    13e6:	42 c0       	rjmp	.+132    	; 0x146c <prvCopyDataToQueue+0xae>
    13e8:	01 11       	cpse	r16, r1
    13ea:	17 c0       	rjmp	.+46     	; 0x141a <prvCopyDataToQueue+0x5c>
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	0e 94 9a 14 	call	0x2934	; 0x2934 <memcpy>
    13f6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	82 0f       	add	r24, r18
    13fe:	91 1d       	adc	r25, r1
    1400:	9d 83       	std	Y+5, r25	; 0x05
    1402:	8c 83       	std	Y+4, r24	; 0x04
    1404:	2a 81       	ldd	r18, Y+2	; 0x02
    1406:	3b 81       	ldd	r19, Y+3	; 0x03
    1408:	82 17       	cp	r24, r18
    140a:	93 07       	cpc	r25, r19
    140c:	50 f1       	brcs	.+84     	; 0x1462 <prvCopyDataToQueue+0xa4>
    140e:	88 81       	ld	r24, Y
    1410:	99 81       	ldd	r25, Y+1	; 0x01
    1412:	9d 83       	std	Y+5, r25	; 0x05
    1414:	8c 83       	std	Y+4, r24	; 0x04
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	29 c0       	rjmp	.+82     	; 0x146c <prvCopyDataToQueue+0xae>
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	8e 81       	ldd	r24, Y+6	; 0x06
    141e:	9f 81       	ldd	r25, Y+7	; 0x07
    1420:	0e 94 9a 14 	call	0x2934	; 0x2934 <memcpy>
    1424:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	91 95       	neg	r25
    142a:	81 95       	neg	r24
    142c:	91 09       	sbc	r25, r1
    142e:	2e 81       	ldd	r18, Y+6	; 0x06
    1430:	3f 81       	ldd	r19, Y+7	; 0x07
    1432:	28 0f       	add	r18, r24
    1434:	39 1f       	adc	r19, r25
    1436:	3f 83       	std	Y+7, r19	; 0x07
    1438:	2e 83       	std	Y+6, r18	; 0x06
    143a:	48 81       	ld	r20, Y
    143c:	59 81       	ldd	r21, Y+1	; 0x01
    143e:	24 17       	cp	r18, r20
    1440:	35 07       	cpc	r19, r21
    1442:	30 f4       	brcc	.+12     	; 0x1450 <prvCopyDataToQueue+0x92>
    1444:	2a 81       	ldd	r18, Y+2	; 0x02
    1446:	3b 81       	ldd	r19, Y+3	; 0x03
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	9f 83       	std	Y+7, r25	; 0x07
    144e:	8e 83       	std	Y+6, r24	; 0x06
    1450:	02 30       	cpi	r16, 0x02	; 2
    1452:	49 f4       	brne	.+18     	; 0x1466 <prvCopyDataToQueue+0xa8>
    1454:	11 23       	and	r17, r17
    1456:	49 f0       	breq	.+18     	; 0x146a <prvCopyDataToQueue+0xac>
    1458:	11 50       	subi	r17, 0x01	; 1
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	07 c0       	rjmp	.+14     	; 0x146c <prvCopyDataToQueue+0xae>
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	05 c0       	rjmp	.+10     	; 0x146c <prvCopyDataToQueue+0xae>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	03 c0       	rjmp	.+6      	; 0x146c <prvCopyDataToQueue+0xae>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	01 c0       	rjmp	.+2      	; 0x146c <prvCopyDataToQueue+0xae>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	1f 5f       	subi	r17, 0xFF	; 255
    146e:	1a 8f       	std	Y+26, r17	; 0x1a
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	08 95       	ret

0000147a <prvUnlockQueue>:
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	8c 01       	movw	r16, r24
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	0f 92       	push	r0
    148c:	fc 01       	movw	r30, r24
    148e:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1490:	1c 16       	cp	r1, r28
    1492:	9c f4       	brge	.+38     	; 0x14ba <prvUnlockQueue+0x40>
    1494:	81 89       	ldd	r24, Z+17	; 0x11
    1496:	81 11       	cpse	r24, r1
    1498:	06 c0       	rjmp	.+12     	; 0x14a6 <prvUnlockQueue+0x2c>
    149a:	0f c0       	rjmp	.+30     	; 0x14ba <prvUnlockQueue+0x40>
    149c:	f8 01       	movw	r30, r16
    149e:	81 89       	ldd	r24, Z+17	; 0x11
    14a0:	81 11       	cpse	r24, r1
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <prvUnlockQueue+0x34>
    14a4:	0a c0       	rjmp	.+20     	; 0x14ba <prvUnlockQueue+0x40>
    14a6:	78 01       	movw	r14, r16
    14a8:	f1 e1       	ldi	r31, 0x11	; 17
    14aa:	ef 0e       	add	r14, r31
    14ac:	f1 1c       	adc	r15, r1
    14ae:	c7 01       	movw	r24, r14
    14b0:	87 d6       	rcall	.+3342   	; 0x21c0 <xTaskRemoveFromEventList>
    14b2:	81 11       	cpse	r24, r1
    14b4:	10 d7       	rcall	.+3616   	; 0x22d6 <vTaskMissedYield>
    14b6:	c1 50       	subi	r28, 0x01	; 1
    14b8:	89 f7       	brne	.-30     	; 0x149c <prvUnlockQueue+0x22>
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	f8 01       	movw	r30, r16
    14be:	86 8f       	std	Z+30, r24	; 0x1e
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	0f 92       	push	r0
    14ca:	c5 8d       	ldd	r28, Z+29	; 0x1d
    14cc:	1c 16       	cp	r1, r28
    14ce:	9c f4       	brge	.+38     	; 0x14f6 <prvUnlockQueue+0x7c>
    14d0:	80 85       	ldd	r24, Z+8	; 0x08
    14d2:	81 11       	cpse	r24, r1
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <prvUnlockQueue+0x68>
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <prvUnlockQueue+0x7c>
    14d8:	f8 01       	movw	r30, r16
    14da:	80 85       	ldd	r24, Z+8	; 0x08
    14dc:	81 11       	cpse	r24, r1
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <prvUnlockQueue+0x70>
    14e0:	0a c0       	rjmp	.+20     	; 0x14f6 <prvUnlockQueue+0x7c>
    14e2:	78 01       	movw	r14, r16
    14e4:	f8 e0       	ldi	r31, 0x08	; 8
    14e6:	ef 0e       	add	r14, r31
    14e8:	f1 1c       	adc	r15, r1
    14ea:	c7 01       	movw	r24, r14
    14ec:	69 d6       	rcall	.+3282   	; 0x21c0 <xTaskRemoveFromEventList>
    14ee:	81 11       	cpse	r24, r1
    14f0:	f2 d6       	rcall	.+3556   	; 0x22d6 <vTaskMissedYield>
    14f2:	c1 50       	subi	r28, 0x01	; 1
    14f4:	89 f7       	brne	.-30     	; 0x14d8 <prvUnlockQueue+0x5e>
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	f8 01       	movw	r30, r16
    14fa:	85 8f       	std	Z+29, r24	; 0x1d
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	ef 90       	pop	r14
    150a:	08 95       	ret

0000150c <xQueueGenericReset>:
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	ec 01       	movw	r28, r24
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	0f 92       	push	r0
    1518:	48 81       	ld	r20, Y
    151a:	59 81       	ldd	r21, Y+1	; 0x01
    151c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1522:	72 9f       	mul	r23, r18
    1524:	c0 01       	movw	r24, r0
    1526:	73 9f       	mul	r23, r19
    1528:	90 0d       	add	r25, r0
    152a:	11 24       	eor	r1, r1
    152c:	fa 01       	movw	r30, r20
    152e:	e8 0f       	add	r30, r24
    1530:	f9 1f       	adc	r31, r25
    1532:	fb 83       	std	Y+3, r31	; 0x03
    1534:	ea 83       	std	Y+2, r30	; 0x02
    1536:	1a 8e       	std	Y+26, r1	; 0x1a
    1538:	5d 83       	std	Y+5, r21	; 0x05
    153a:	4c 83       	std	Y+4, r20	; 0x04
    153c:	82 1b       	sub	r24, r18
    153e:	93 0b       	sbc	r25, r19
    1540:	84 0f       	add	r24, r20
    1542:	95 1f       	adc	r25, r21
    1544:	9f 83       	std	Y+7, r25	; 0x07
    1546:	8e 83       	std	Y+6, r24	; 0x06
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	8d 8f       	std	Y+29, r24	; 0x1d
    154c:	8e 8f       	std	Y+30, r24	; 0x1e
    154e:	61 11       	cpse	r22, r1
    1550:	0a c0       	rjmp	.+20     	; 0x1566 <xQueueGenericReset+0x5a>
    1552:	88 85       	ldd	r24, Y+8	; 0x08
    1554:	88 23       	and	r24, r24
    1556:	69 f0       	breq	.+26     	; 0x1572 <xQueueGenericReset+0x66>
    1558:	ce 01       	movw	r24, r28
    155a:	08 96       	adiw	r24, 0x08	; 8
    155c:	31 d6       	rcall	.+3170   	; 0x21c0 <xTaskRemoveFromEventList>
    155e:	88 23       	and	r24, r24
    1560:	41 f0       	breq	.+16     	; 0x1572 <xQueueGenericReset+0x66>
    1562:	53 de       	rcall	.-858    	; 0x120a <vPortYield>
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <xQueueGenericReset+0x66>
    1566:	ce 01       	movw	r24, r28
    1568:	08 96       	adiw	r24, 0x08	; 8
    156a:	35 d8       	rcall	.-3990   	; 0x5d6 <vListInitialise>
    156c:	ce 01       	movw	r24, r28
    156e:	41 96       	adiw	r24, 0x11	; 17
    1570:	32 d8       	rcall	.-3996   	; 0x5d6 <vListInitialise>
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <xQueueGenericCreate>:
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	08 2f       	mov	r16, r24
    1588:	16 2f       	mov	r17, r22
    158a:	66 23       	and	r22, r22
    158c:	b9 f0       	breq	.+46     	; 0x15bc <xQueueGenericCreate+0x3e>
    158e:	86 9f       	mul	r24, r22
    1590:	c0 01       	movw	r24, r0
    1592:	11 24       	eor	r1, r1
    1594:	4f 96       	adiw	r24, 0x1f	; 31
    1596:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    159a:	ec 01       	movw	r28, r24
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	39 f4       	brne	.+14     	; 0x15ae <xQueueGenericCreate+0x30>
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <xQueueGenericCreate+0x4c>
    15a2:	0b 8f       	std	Y+27, r16	; 0x1b
    15a4:	1c 8f       	std	Y+28, r17	; 0x1c
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	ce 01       	movw	r24, r28
    15aa:	b0 df       	rcall	.-160    	; 0x150c <xQueueGenericReset>
    15ac:	0e c0       	rjmp	.+28     	; 0x15ca <xQueueGenericCreate+0x4c>
    15ae:	4f 96       	adiw	r24, 0x1f	; 31
    15b0:	99 83       	std	Y+1, r25	; 0x01
    15b2:	88 83       	st	Y, r24
    15b4:	f6 cf       	rjmp	.-20     	; 0x15a2 <xQueueGenericCreate+0x24>
    15b6:	d9 83       	std	Y+1, r29	; 0x01
    15b8:	c8 83       	st	Y, r28
    15ba:	f3 cf       	rjmp	.-26     	; 0x15a2 <xQueueGenericCreate+0x24>
    15bc:	8f e1       	ldi	r24, 0x1F	; 31
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    15c4:	ec 01       	movw	r28, r24
    15c6:	89 2b       	or	r24, r25
    15c8:	b1 f7       	brne	.-20     	; 0x15b6 <xQueueGenericCreate+0x38>
    15ca:	ce 01       	movw	r24, r28
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	08 95       	ret

000015d6 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    15d6:	9f 92       	push	r9
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <xQueueGenericSend+0x18>
    15ee:	1f 92       	push	r1
    15f0:	1f 92       	push	r1
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8c 01       	movw	r16, r24
    15f8:	6b 01       	movw	r12, r22
    15fa:	5d 83       	std	Y+5, r21	; 0x05
    15fc:	4c 83       	std	Y+4, r20	; 0x04
    15fe:	a2 2e       	mov	r10, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1600:	b1 2c       	mov	r11, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1602:	99 24       	eor	r9, r9
    1604:	93 94       	inc	r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1606:	7c 01       	movw	r14, r24
    1608:	88 e0       	ldi	r24, 0x08	; 8
    160a:	e8 0e       	add	r14, r24
    160c:	f1 1c       	adc	r15, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1614:	f8 01       	movw	r30, r16
    1616:	92 8d       	ldd	r25, Z+26	; 0x1a
    1618:	83 8d       	ldd	r24, Z+27	; 0x1b
    161a:	98 17       	cp	r25, r24
    161c:	18 f0       	brcs	.+6      	; 0x1624 <xQueueGenericSend+0x4e>
    161e:	f2 e0       	ldi	r31, 0x02	; 2
    1620:	af 12       	cpse	r10, r31
    1622:	15 c0       	rjmp	.+42     	; 0x164e <xQueueGenericSend+0x78>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1624:	4a 2d       	mov	r20, r10
    1626:	b6 01       	movw	r22, r12
    1628:	c8 01       	movw	r24, r16
    162a:	c9 de       	rcall	.-622    	; 0x13be <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    162c:	f8 01       	movw	r30, r16
    162e:	91 89       	ldd	r25, Z+17	; 0x11
    1630:	99 23       	and	r25, r25
    1632:	39 f0       	breq	.+14     	; 0x1642 <xQueueGenericSend+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1634:	c8 01       	movw	r24, r16
    1636:	41 96       	adiw	r24, 0x11	; 17
    1638:	c3 d5       	rcall	.+2950   	; 0x21c0 <xTaskRemoveFromEventList>
    163a:	88 23       	and	r24, r24
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    163c:	21 f0       	breq	.+8      	; 0x1646 <xQueueGenericSend+0x70>
    163e:	e5 dd       	rcall	.-1078   	; 0x120a <vPortYield>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <xQueueGenericSend+0x70>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1642:	81 11       	cpse	r24, r1
    1644:	e2 dd       	rcall	.-1084   	; 0x120a <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	45 c0       	rjmp	.+138    	; 0x16d8 <xQueueGenericSend+0x102>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	9d 81       	ldd	r25, Y+5	; 0x05
    1652:	89 2b       	or	r24, r25
    1654:	21 f4       	brne	.+8      	; 0x165e <xQueueGenericSend+0x88>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1656:	0f 90       	pop	r0
    1658:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	3d c0       	rjmp	.+122    	; 0x16d8 <xQueueGenericSend+0x102>
				}
				else if( xEntryTimeSet == pdFALSE )
    165e:	b1 10       	cpse	r11, r1
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1660:	04 c0       	rjmp	.+8      	; 0x166a <xQueueGenericSend+0x94>
    1662:	ce 01       	movw	r24, r28
    1664:	01 96       	adiw	r24, 0x01	; 1
					xEntryTimeSet = pdTRUE;
    1666:	f4 d5       	rcall	.+3048   	; 0x2250 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1668:	b9 2c       	mov	r11, r9
    166a:	0f 90       	pop	r0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	da d3       	rcall	.+1972   	; 0x1e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	0f 92       	push	r0
    1676:	f8 01       	movw	r30, r16
    1678:	85 8d       	ldd	r24, Z+29	; 0x1d
    167a:	8f 3f       	cpi	r24, 0xFF	; 255
    167c:	09 f4       	brne	.+2      	; 0x1680 <xQueueGenericSend+0xaa>
    167e:	15 8e       	std	Z+29, r1	; 0x1d
    1680:	f8 01       	movw	r30, r16
    1682:	86 8d       	ldd	r24, Z+30	; 0x1e
    1684:	8f 3f       	cpi	r24, 0xFF	; 255
    1686:	09 f4       	brne	.+2      	; 0x168a <xQueueGenericSend+0xb4>
    1688:	16 8e       	std	Z+30, r1	; 0x1e
    168a:	0f 90       	pop	r0

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	be 01       	movw	r22, r28
    1690:	6c 5f       	subi	r22, 0xFC	; 252
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	ce 01       	movw	r24, r28
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	e6 d5       	rcall	.+3020   	; 0x2266 <xTaskCheckForTimeOut>
    169a:	81 11       	cpse	r24, r1
    169c:	19 c0       	rjmp	.+50     	; 0x16d0 <xQueueGenericSend+0xfa>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    16a4:	f8 01       	movw	r30, r16
    16a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    16a8:	83 8d       	ldd	r24, Z+27	; 0x1b
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    16aa:	0f 90       	pop	r0
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    16ac:	0f be       	out	0x3f, r0	; 63
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    16ae:	98 13       	cpse	r25, r24
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <xQueueGenericSend+0xf2>
    16b2:	6c 81       	ldd	r22, Y+4	; 0x04
    16b4:	7d 81       	ldd	r23, Y+5	; 0x05
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    16b6:	c7 01       	movw	r24, r14
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    16b8:	72 d5       	rcall	.+2788   	; 0x219e <vTaskPlaceOnEventList>
    16ba:	c8 01       	movw	r24, r16
				{
					portYIELD_WITHIN_API();
    16bc:	de de       	rcall	.-580    	; 0x147a <prvUnlockQueue>
    16be:	72 d4       	rcall	.+2276   	; 0x1fa4 <xTaskResumeAll>
    16c0:	81 11       	cpse	r24, r1
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    16c2:	a5 cf       	rjmp	.-182    	; 0x160e <xQueueGenericSend+0x38>
    16c4:	a2 dd       	rcall	.-1212   	; 0x120a <vPortYield>
    16c6:	a3 cf       	rjmp	.-186    	; 0x160e <xQueueGenericSend+0x38>
				( void ) xTaskResumeAll();
    16c8:	c8 01       	movw	r24, r16
    16ca:	d7 de       	rcall	.-594    	; 0x147a <prvUnlockQueue>
    16cc:	6b d4       	rcall	.+2262   	; 0x1fa4 <xTaskResumeAll>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    16ce:	9f cf       	rjmp	.-194    	; 0x160e <xQueueGenericSend+0x38>
    16d0:	c8 01       	movw	r24, r16
    16d2:	d3 de       	rcall	.-602    	; 0x147a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    16d4:	67 d4       	rcall	.+2254   	; 0x1fa4 <xTaskResumeAll>
    16d6:	80 e0       	ldi	r24, 0x00	; 0

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    16d8:	0f 90       	pop	r0
		}
	}
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	08 95       	ret

000016fa <__vector_26>:
    16fa:	1f 92       	push	r1
#elif defined(__AVR_ATmega324P__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
ISR( USART0_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART0_UDRE_vect )

#endif
{
    16fc:	0f 92       	push	r0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	0f 92       	push	r0
    1702:	11 24       	eor	r1, r1
    1704:	0b b6       	in	r0, 0x3b	; 59
    1706:	0f 92       	push	r0
    1708:	2f 93       	push	r18
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	af 93       	push	r26
    1710:	bf 93       	push	r27
    1712:	ef 93       	push	r30
    1714:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	0f 92       	push	r0
	{
	    count = buffer->count;
    171c:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <xSerialPort+0xd>
    1720:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <xSerialPort+0xe>
	}
	portEXIT_CRITICAL();
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerialPort.xCharsForTx) ) )
    1728:	89 2b       	or	r24, r25
    172a:	31 f4       	brne	.+12     	; 0x1738 <__vector_26+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt0_Off();
    172c:	e1 ec       	ldi	r30, 0xC1	; 193
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8f 7d       	andi	r24, 0xDF	; 223
    1734:	80 83       	st	Z, r24
    1736:	1c c0       	rjmp	.+56     	; 0x1770 <__vector_26+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1738:	e0 e8       	ldi	r30, 0x80	; 128
    173a:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    173c:	a4 81       	ldd	r26, Z+4	; 0x04
    173e:	b5 81       	ldd	r27, Z+5	; 0x05
    1740:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1742:	b5 83       	std	Z+5, r27	; 0x05
    1744:	a4 83       	std	Z+4, r26	; 0x04
    1746:	80 85       	ldd	r24, Z+8	; 0x08
    1748:	91 85       	ldd	r25, Z+9	; 0x09
    174a:	a8 17       	cp	r26, r24
    174c:	b9 07       	cpc	r27, r25
    174e:	21 f4       	brne	.+8      	; 0x1758 <__vector_26+0x5e>
	  buffer->out = buffer->start;
    1750:	86 81       	ldd	r24, Z+6	; 0x06
    1752:	97 81       	ldd	r25, Z+7	; 0x07
    1754:	95 83       	std	Z+5, r25	; 0x05
    1756:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	0f 92       	push	r0
	{
	    buffer->count--;
    175e:	80 81       	ld	r24, Z
    1760:	91 81       	ldd	r25, Z+1	; 0x01
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR0 = ringBuffer_Pop( (ringBuffer_t*) &(xSerialPort.xCharsForTx) );
    176c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	bf 91       	pop	r27
    1776:	af 91       	pop	r26
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	2f 91       	pop	r18
    177e:	0f 90       	pop	r0
    1780:	0b be       	out	0x3b, r0	; 59
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	0f 90       	pop	r0
    1788:	1f 90       	pop	r1
    178a:	18 95       	reti

0000178c <__vector_37>:
//}
/*-----------------------------------------------------------*/

ISR( USART1_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART1_UDRE_vect )
{
    178c:	1f 92       	push	r1
    178e:	0f 92       	push	r0
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	0f 92       	push	r0
    1794:	11 24       	eor	r1, r1
    1796:	0b b6       	in	r0, 0x3b	; 59
    1798:	0f 92       	push	r0
    179a:	2f 93       	push	r18
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	0f 92       	push	r0
	{
	    count = buffer->count;
    17ae:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <xSerial1Port+0xd>
    17b2:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <xSerial1Port+0xe>
	}
	portEXIT_CRITICAL();
    17b6:	0f 90       	pop	r0
    17b8:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) ) )
    17ba:	89 2b       	or	r24, r25
    17bc:	31 f4       	brne	.+12     	; 0x17ca <__vector_37+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt1_Off();
    17be:	e9 ec       	ldi	r30, 0xC9	; 201
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8f 7d       	andi	r24, 0xDF	; 223
    17c6:	80 83       	st	Z, r24
    17c8:	1c c0       	rjmp	.+56     	; 0x1802 <__vector_37+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    17ca:	e6 ee       	ldi	r30, 0xE6	; 230
    17cc:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    17ce:	a4 81       	ldd	r26, Z+4	; 0x04
    17d0:	b5 81       	ldd	r27, Z+5	; 0x05
    17d2:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    17d4:	b5 83       	std	Z+5, r27	; 0x05
    17d6:	a4 83       	std	Z+4, r26	; 0x04
    17d8:	80 85       	ldd	r24, Z+8	; 0x08
    17da:	91 85       	ldd	r25, Z+9	; 0x09
    17dc:	a8 17       	cp	r26, r24
    17de:	b9 07       	cpc	r27, r25
    17e0:	21 f4       	brne	.+8      	; 0x17ea <__vector_37+0x5e>
	  buffer->out = buffer->start;
    17e2:	86 81       	ldd	r24, Z+6	; 0x06
    17e4:	97 81       	ldd	r25, Z+7	; 0x07
    17e6:	95 83       	std	Z+5, r25	; 0x05
    17e8:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	0f 92       	push	r0
	{
	    buffer->count--;
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    17fa:	0f 90       	pop	r0
    17fc:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR1 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial1Port.xCharsForTx) );
    17fe:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
    1802:	ff 91       	pop	r31
    1804:	ef 91       	pop	r30
    1806:	bf 91       	pop	r27
    1808:	af 91       	pop	r26
    180a:	9f 91       	pop	r25
    180c:	8f 91       	pop	r24
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0b be       	out	0x3b, r0	; 59
    1814:	0f 90       	pop	r0
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	0f 90       	pop	r0
    181a:	1f 90       	pop	r1
    181c:	18 95       	reti

0000181e <__vector_51>:

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

ISR( USART2_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART2_RX_vect )
{
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	0b b6       	in	r0, 0x3b	; 59
    182a:	0f 92       	push	r0
    182c:	2f 93       	push	r18
    182e:	3f 93       	push	r19
    1830:	4f 93       	push	r20
    1832:	8f 93       	push	r24
    1834:	9f 93       	push	r25
    1836:	af 93       	push	r26
    1838:	bf 93       	push	r27
    183a:	ef 93       	push	r30
    183c:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR2A & (_BV(FE2)|_BV(DOR2)|_BV(UPE2)) ) )
    183e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1842:	8c 71       	andi	r24, 0x1C	; 28
    1844:	71 f0       	breq	.+28     	; 0x1862 <__vector_51+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR2A & (1<<RXC2) ) erroredByte = UDR2;
    1846:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    184a:	88 23       	and	r24, r24
    184c:	0c f0       	brlt	.+2      	; 0x1850 <__vector_51+0x32>
    184e:	36 c0       	rjmp	.+108    	; 0x18bc <__vector_51+0x9e>
    1850:	a6 ed       	ldi	r26, 0xD6	; 214
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e0 ed       	ldi	r30, 0xD0	; 208
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	8c 91       	ld	r24, X
    185a:	80 81       	ld	r24, Z
    185c:	88 23       	and	r24, r24
    185e:	e4 f3       	brlt	.-8      	; 0x1858 <__vector_51+0x3a>
    1860:	2d c0       	rjmp	.+90     	; 0x18bc <__vector_51+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR2;
    1862:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	0f 92       	push	r0
	{
	    count = buffer->count;
    186c:	e5 e9       	ldi	r30, 0x95	; 149
    186e:	f4 e0       	ldi	r31, 0x04	; 4
    1870:	21 81       	ldd	r18, Z+1	; 0x01
    1872:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    1874:	0f 90       	pop	r0
    1876:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial2Port.xRxedChars) ) )
    1878:	83 85       	ldd	r24, Z+11	; 0x0b
    187a:	94 85       	ldd	r25, Z+12	; 0x0c
    187c:	28 17       	cp	r18, r24
    187e:	39 07       	cpc	r19, r25
    1880:	e9 f0       	breq	.+58     	; 0x18bc <__vector_51+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1882:	e6 e9       	ldi	r30, 0x96	; 150
    1884:	f4 e0       	ldi	r31, 0x04	; 4

	*buffer->in = data;
    1886:	a2 81       	ldd	r26, Z+2	; 0x02
    1888:	b3 81       	ldd	r27, Z+3	; 0x03
    188a:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	93 83       	std	Z+3, r25	; 0x03
    1894:	82 83       	std	Z+2, r24	; 0x02
    1896:	20 85       	ldd	r18, Z+8	; 0x08
    1898:	31 85       	ldd	r19, Z+9	; 0x09
    189a:	82 17       	cp	r24, r18
    189c:	93 07       	cpc	r25, r19
    189e:	21 f4       	brne	.+8      	; 0x18a8 <__vector_51+0x8a>
	  buffer->in = buffer->start;
    18a0:	86 81       	ldd	r24, Z+6	; 0x06
    18a2:	97 81       	ldd	r25, Z+7	; 0x07
    18a4:	93 83       	std	Z+3, r25	; 0x03
    18a6:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	0f 92       	push	r0
	{
	    buffer->count++;
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial2Port.xRxedChars), cChar);
	}
}
    18bc:	ff 91       	pop	r31
    18be:	ef 91       	pop	r30
    18c0:	bf 91       	pop	r27
    18c2:	af 91       	pop	r26
    18c4:	9f 91       	pop	r25
    18c6:	8f 91       	pop	r24
    18c8:	4f 91       	pop	r20
    18ca:	3f 91       	pop	r19
    18cc:	2f 91       	pop	r18
    18ce:	0f 90       	pop	r0
    18d0:	0b be       	out	0x3b, r0	; 59
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	0f 90       	pop	r0
    18d8:	1f 90       	pop	r1
    18da:	18 95       	reti

000018dc <__vector_52>:
/*-----------------------------------------------------------*/

ISR( USART2_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART2_UDRE_vect )
{
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	0b b6       	in	r0, 0x3b	; 59
    18e8:	0f 92       	push	r0
    18ea:	2f 93       	push	r18
    18ec:	8f 93       	push	r24
    18ee:	9f 93       	push	r25
    18f0:	af 93       	push	r26
    18f2:	bf 93       	push	r27
    18f4:	ef 93       	push	r30
    18f6:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	0f 92       	push	r0
	{
	    count = buffer->count;
    18fe:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <xSerial2Port+0xd>
    1902:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <xSerial2Port+0xe>
	}
	portEXIT_CRITICAL();
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) ) )
    190a:	89 2b       	or	r24, r25
    190c:	31 f4       	brne	.+12     	; 0x191a <__vector_52+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt2_Off();
    190e:	e1 ed       	ldi	r30, 0xD1	; 209
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	8f 7d       	andi	r24, 0xDF	; 223
    1916:	80 83       	st	Z, r24
    1918:	1c c0       	rjmp	.+56     	; 0x1952 <__vector_52+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    191a:	e2 ea       	ldi	r30, 0xA2	; 162
    191c:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    191e:	a4 81       	ldd	r26, Z+4	; 0x04
    1920:	b5 81       	ldd	r27, Z+5	; 0x05
    1922:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1924:	b5 83       	std	Z+5, r27	; 0x05
    1926:	a4 83       	std	Z+4, r26	; 0x04
    1928:	80 85       	ldd	r24, Z+8	; 0x08
    192a:	91 85       	ldd	r25, Z+9	; 0x09
    192c:	a8 17       	cp	r26, r24
    192e:	b9 07       	cpc	r27, r25
    1930:	21 f4       	brne	.+8      	; 0x193a <__vector_52+0x5e>
	  buffer->out = buffer->start;
    1932:	86 81       	ldd	r24, Z+6	; 0x06
    1934:	97 81       	ldd	r25, Z+7	; 0x07
    1936:	95 83       	std	Z+5, r25	; 0x05
    1938:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	0f 92       	push	r0
	{
	    buffer->count--;
    1940:	80 81       	ld	r24, Z
    1942:	91 81       	ldd	r25, Z+1	; 0x01
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR2 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial2Port.xCharsForTx) );
    194e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	bf 91       	pop	r27
    1958:	af 91       	pop	r26
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	2f 91       	pop	r18
    1960:	0f 90       	pop	r0
    1962:	0b be       	out	0x3b, r0	; 59
    1964:	0f 90       	pop	r0
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	0f 90       	pop	r0
    196a:	1f 90       	pop	r1
    196c:	18 95       	reti

0000196e <__vector_54>:
/*-----------------------------------------------------------*/

ISR( USART3_RX_vect ) __attribute__ ((hot, flatten));
ISR( USART3_RX_vect )
{
    196e:	1f 92       	push	r1
    1970:	0f 92       	push	r0
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	0f 92       	push	r0
    1976:	11 24       	eor	r1, r1
    1978:	0b b6       	in	r0, 0x3b	; 59
    197a:	0f 92       	push	r0
    197c:	2f 93       	push	r18
    197e:	3f 93       	push	r19
    1980:	4f 93       	push	r20
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
    1986:	af 93       	push	r26
    1988:	bf 93       	push	r27
    198a:	ef 93       	push	r30
    198c:	ff 93       	push	r31
	/* Get status and data from buffer */

	/* If error bit set (Frame Error, Data Over Run, Parity), flush and return nothing */
	if ( (UCSR3A & (_BV(FE3)|_BV(DOR3)|_BV(UPE3)) ) )
    198e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1992:	8c 71       	andi	r24, 0x1C	; 28
    1994:	71 f0       	breq	.+28     	; 0x19b2 <__vector_54+0x44>
	{
		register uint8_t erroredByte __attribute__ ((unused));
		while ( UCSR3A & (1<<RXC3) ) erroredByte = UDR3;
    1996:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    199a:	88 23       	and	r24, r24
    199c:	0c f0       	brlt	.+2      	; 0x19a0 <__vector_54+0x32>
    199e:	36 c0       	rjmp	.+108    	; 0x1a0c <__vector_54+0x9e>
    19a0:	a6 e3       	ldi	r26, 0x36	; 54
    19a2:	b1 e0       	ldi	r27, 0x01	; 1
    19a4:	e0 e3       	ldi	r30, 0x30	; 48
    19a6:	f1 e0       	ldi	r31, 0x01	; 1
    19a8:	8c 91       	ld	r24, X
    19aa:	80 81       	ld	r24, Z
    19ac:	88 23       	and	r24, r24
    19ae:	e4 f3       	brlt	.-8      	; 0x19a8 <__vector_54+0x3a>
    19b0:	2d c0       	rjmp	.+90     	; 0x1a0c <__vector_54+0x9e>
	}
	else
	{
		/* If no error, get the character and post it on the buffer of Rxed characters.*/
		register uint8_t cChar = UDR3;
    19b2:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	0f 92       	push	r0
	{
	    count = buffer->count;
    19bc:	e7 eb       	ldi	r30, 0xB7	; 183
    19be:	f4 e0       	ldi	r31, 0x04	; 4
    19c0:	21 81       	ldd	r18, Z+1	; 0x01
    19c2:	32 81       	ldd	r19, Z+2	; 0x02
	}
	portEXIT_CRITICAL();
    19c4:	0f 90       	pop	r0
    19c6:	0f be       	out	0x3f, r0	; 63

		if( ! ringBuffer_IsFull( (ringBuffer_t*) &(xSerial3Port.xRxedChars) ) )
    19c8:	83 85       	ldd	r24, Z+11	; 0x0b
    19ca:	94 85       	ldd	r25, Z+12	; 0x0c
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	e9 f0       	breq	.+58     	; 0x1a0c <__vector_54+0x9e>
}

inline void
ringBuffer_Poke(ringBuffer_t* buffer, uint8_t const data)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    19d2:	e8 eb       	ldi	r30, 0xB8	; 184
    19d4:	f4 e0       	ldi	r31, 0x04	; 4

	*buffer->in = data;
    19d6:	a2 81       	ldd	r26, Z+2	; 0x02
    19d8:	b3 81       	ldd	r27, Z+3	; 0x03
    19da:	4c 93       	st	X, r20

	if (++buffer->in == buffer->end)
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	93 83       	std	Z+3, r25	; 0x03
    19e4:	82 83       	std	Z+2, r24	; 0x02
    19e6:	20 85       	ldd	r18, Z+8	; 0x08
    19e8:	31 85       	ldd	r19, Z+9	; 0x09
    19ea:	82 17       	cp	r24, r18
    19ec:	93 07       	cpc	r25, r19
    19ee:	21 f4       	brne	.+8      	; 0x19f8 <__vector_54+0x8a>
	  buffer->in = buffer->start;
    19f0:	86 81       	ldd	r24, Z+6	; 0x06
    19f2:	97 81       	ldd	r25, Z+7	; 0x07
    19f4:	93 83       	std	Z+3, r25	; 0x03
    19f6:	82 83       	std	Z+2, r24	; 0x02

	portENTER_CRITICAL();
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	0f 92       	push	r0
	{
	    buffer->count++;
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1a08:	0f 90       	pop	r0
    1a0a:	0f be       	out	0x3f, r0	; 63
			ringBuffer_Poke( (ringBuffer_t*) &(xSerial3Port.xRxedChars), cChar);
	}
}
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	bf 91       	pop	r27
    1a12:	af 91       	pop	r26
    1a14:	9f 91       	pop	r25
    1a16:	8f 91       	pop	r24
    1a18:	4f 91       	pop	r20
    1a1a:	3f 91       	pop	r19
    1a1c:	2f 91       	pop	r18
    1a1e:	0f 90       	pop	r0
    1a20:	0b be       	out	0x3b, r0	; 59
    1a22:	0f 90       	pop	r0
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	0f 90       	pop	r0
    1a28:	1f 90       	pop	r1
    1a2a:	18 95       	reti

00001a2c <__vector_55>:
/*-----------------------------------------------------------*/

ISR( USART3_UDRE_vect ) __attribute__ ((hot, flatten));
ISR( USART3_UDRE_vect )
{
    1a2c:	1f 92       	push	r1
    1a2e:	0f 92       	push	r0
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	0f 92       	push	r0
    1a34:	11 24       	eor	r1, r1
    1a36:	0b b6       	in	r0, 0x3b	; 59
    1a38:	0f 92       	push	r0
    1a3a:	2f 93       	push	r18
    1a3c:	8f 93       	push	r24
    1a3e:	9f 93       	push	r25
    1a40:	af 93       	push	r26
    1a42:	bf 93       	push	r27
    1a44:	ef 93       	push	r30
    1a46:	ff 93       	push	r31
inline uint16_t
ringBuffer_GetCount(ringBuffer_t* const buffer)
{
	uint16_t count;

	portENTER_CRITICAL();
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	0f 92       	push	r0
	{
	    count = buffer->count;
    1a4e:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <xSerial3Port+0xd>
    1a52:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <xSerial3Port+0xe>
	}
	portEXIT_CRITICAL();
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
	if( ringBuffer_IsEmpty( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) ) )
    1a5a:	89 2b       	or	r24, r25
    1a5c:	31 f4       	brne	.+12     	; 0x1a6a <__vector_55+0x3e>
	{
		// Queue empty, nothing to send.
		vInterrupt3_Off();
    1a5e:	e1 e3       	ldi	r30, 0x31	; 49
    1a60:	f1 e0       	ldi	r31, 0x01	; 1
    1a62:	80 81       	ld	r24, Z
    1a64:	8f 7d       	andi	r24, 0xDF	; 223
    1a66:	80 83       	st	Z, r24
    1a68:	1c c0       	rjmp	.+56     	; 0x1aa2 <__vector_55+0x76>
}

inline uint8_t
ringBuffer_Pop(ringBuffer_t* buffer)
{
	GCC_FORCE_POINTER_ACCESS(buffer);
    1a6a:	e4 ec       	ldi	r30, 0xC4	; 196
    1a6c:	f4 e0       	ldi	r31, 0x04	; 4

	uint8_t data = *buffer->out;
    1a6e:	a4 81       	ldd	r26, Z+4	; 0x04
    1a70:	b5 81       	ldd	r27, Z+5	; 0x05
    1a72:	2d 91       	ld	r18, X+

	if (++buffer->out == buffer->end)
    1a74:	b5 83       	std	Z+5, r27	; 0x05
    1a76:	a4 83       	std	Z+4, r26	; 0x04
    1a78:	80 85       	ldd	r24, Z+8	; 0x08
    1a7a:	91 85       	ldd	r25, Z+9	; 0x09
    1a7c:	a8 17       	cp	r26, r24
    1a7e:	b9 07       	cpc	r27, r25
    1a80:	21 f4       	brne	.+8      	; 0x1a8a <__vector_55+0x5e>
	  buffer->out = buffer->start;
    1a82:	86 81       	ldd	r24, Z+6	; 0x06
    1a84:	97 81       	ldd	r25, Z+7	; 0x07
    1a86:	95 83       	std	Z+5, r25	; 0x05
    1a88:	84 83       	std	Z+4, r24	; 0x04

	portENTER_CRITICAL();
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	0f 92       	push	r0
	{
	    buffer->count--;
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
    1a9a:	0f 90       	pop	r0
    1a9c:	0f be       	out	0x3f, r0	; 63
	}
	else
	{
		UDR3 = ringBuffer_Pop( (ringBuffer_t*) &(xSerial3Port.xCharsForTx) );
    1a9e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
    1aa2:	ff 91       	pop	r31
    1aa4:	ef 91       	pop	r30
    1aa6:	bf 91       	pop	r27
    1aa8:	af 91       	pop	r26
    1aaa:	9f 91       	pop	r25
    1aac:	8f 91       	pop	r24
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0b be       	out	0x3b, r0	; 59
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	0f 90       	pop	r0
    1aba:	1f 90       	pop	r1
    1abc:	18 95       	reti

00001abe <prvResetNextTaskUnblockTime>:
    1abe:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1ac2:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1ac6:	80 81       	ld	r24, Z
    1ac8:	81 11       	cpse	r24, r1
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <prvResetNextTaskUnblockTime+0x1c>
    1acc:	8f ef       	ldi	r24, 0xFF	; 255
    1ace:	9f ef       	ldi	r25, 0xFF	; 255
    1ad0:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1ad4:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xNextTaskUnblockTime>
    1ad8:	08 95       	ret
    1ada:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1ade:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1ae2:	05 80       	ldd	r0, Z+5	; 0x05
    1ae4:	f6 81       	ldd	r31, Z+6	; 0x06
    1ae6:	e0 2d       	mov	r30, r0
    1ae8:	06 80       	ldd	r0, Z+6	; 0x06
    1aea:	f7 81       	ldd	r31, Z+7	; 0x07
    1aec:	e0 2d       	mov	r30, r0
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1af6:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xNextTaskUnblockTime>
    1afa:	08 95       	ret

00001afc <prvAddCurrentTaskToDelayedList>:
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	ec 01       	movw	r28, r24
    1b08:	f6 2e       	mov	r15, r22
    1b0a:	00 91 d1 02 	lds	r16, 0x02D1	; 0x8002d1 <xTickCount>
    1b0e:	10 91 d2 02 	lds	r17, 0x02D2	; 0x8002d2 <xTickCount+0x1>
    1b12:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <pxCurrentTCB>
    1b16:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1b1a:	02 96       	adiw	r24, 0x02	; 2
    1b1c:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1b20:	cf 3f       	cpi	r28, 0xFF	; 255
    1b22:	8f ef       	ldi	r24, 0xFF	; 255
    1b24:	d8 07       	cpc	r29, r24
    1b26:	69 f4       	brne	.+26     	; 0x1b42 <prvAddCurrentTaskToDelayedList+0x46>
    1b28:	ff 20       	and	r15, r15
    1b2a:	59 f0       	breq	.+22     	; 0x1b42 <prvAddCurrentTaskToDelayedList+0x46>
    1b2c:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <pxCurrentTCB>
    1b30:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1b34:	6e 5f       	subi	r22, 0xFE	; 254
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	84 ed       	ldi	r24, 0xD4	; 212
    1b3a:	92 e0       	ldi	r25, 0x02	; 2
    1b3c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    1b40:	2f c0       	rjmp	.+94     	; 0x1ba0 <prvAddCurrentTaskToDelayedList+0xa4>
    1b42:	c0 0f       	add	r28, r16
    1b44:	d1 1f       	adc	r29, r17
    1b46:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    1b4a:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1b4e:	d3 83       	std	Z+3, r29	; 0x03
    1b50:	c2 83       	std	Z+2, r28	; 0x02
    1b52:	c0 17       	cp	r28, r16
    1b54:	d1 07       	cpc	r29, r17
    1b56:	68 f4       	brcc	.+26     	; 0x1b72 <prvAddCurrentTaskToDelayedList+0x76>
    1b58:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <pxCurrentTCB>
    1b5c:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1b60:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <pxOverflowDelayedTaskList>
    1b64:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <pxOverflowDelayedTaskList+0x1>
    1b68:	6e 5f       	subi	r22, 0xFE	; 254
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	0e 94 1e 03 	call	0x63c	; 0x63c <vListInsert>
    1b70:	17 c0       	rjmp	.+46     	; 0x1ba0 <prvAddCurrentTaskToDelayedList+0xa4>
    1b72:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <pxCurrentTCB>
    1b76:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1b7a:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1b7e:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1b82:	6e 5f       	subi	r22, 0xFE	; 254
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	0e 94 1e 03 	call	0x63c	; 0x63c <vListInsert>
    1b8a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <xNextTaskUnblockTime>
    1b8e:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1b92:	c8 17       	cp	r28, r24
    1b94:	d9 07       	cpc	r29, r25
    1b96:	20 f4       	brcc	.+8      	; 0x1ba0 <prvAddCurrentTaskToDelayedList+0xa4>
    1b98:	d0 93 ca 02 	sts	0x02CA, r29	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1b9c:	c0 93 c9 02 	sts	0x02C9, r28	; 0x8002c9 <xNextTaskUnblockTime>
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	08 95       	ret

00001bac <xTaskCreate>:
    1bac:	4f 92       	push	r4
    1bae:	5f 92       	push	r5
    1bb0:	6f 92       	push	r6
    1bb2:	7f 92       	push	r7
    1bb4:	8f 92       	push	r8
    1bb6:	9f 92       	push	r9
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	4c 01       	movw	r8, r24
    1bcc:	6b 01       	movw	r12, r22
    1bce:	5a 01       	movw	r10, r20
    1bd0:	29 01       	movw	r4, r18
    1bd2:	ca 01       	movw	r24, r20
    1bd4:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    1bd8:	3c 01       	movw	r6, r24
    1bda:	89 2b       	or	r24, r25
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <xTaskCreate+0x34>
    1bde:	e9 c0       	rjmp	.+466    	; 0x1db2 <xTaskCreate+0x206>
    1be0:	88 e2       	ldi	r24, 0x28	; 40
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 aa 01 	call	0x354	; 0x354 <pvPortMalloc>
    1be8:	ec 01       	movw	r28, r24
    1bea:	89 2b       	or	r24, r25
    1bec:	a9 f0       	breq	.+42     	; 0x1c18 <xTaskCreate+0x6c>
    1bee:	78 8e       	std	Y+24, r7	; 0x18
    1bf0:	6f 8a       	std	Y+23, r6	; 0x17
    1bf2:	a5 01       	movw	r20, r10
    1bf4:	65 ea       	ldi	r22, 0xA5	; 165
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	c3 01       	movw	r24, r6
    1bfa:	a5 d6       	rcall	.+3402   	; 0x2946 <memset>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	a8 1a       	sub	r10, r24
    1c00:	b1 08       	sbc	r11, r1
    1c02:	8f 89       	ldd	r24, Y+23	; 0x17
    1c04:	98 8d       	ldd	r25, Y+24	; 0x18
    1c06:	a8 0e       	add	r10, r24
    1c08:	b9 1e       	adc	r11, r25
    1c0a:	d6 01       	movw	r26, r12
    1c0c:	8c 91       	ld	r24, X
    1c0e:	89 8f       	std	Y+25, r24	; 0x19
    1c10:	8c 91       	ld	r24, X
    1c12:	81 11       	cpse	r24, r1
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <xTaskCreate+0x74>
    1c16:	18 c0       	rjmp	.+48     	; 0x1c48 <xTaskCreate+0x9c>
    1c18:	c3 01       	movw	r24, r6
    1c1a:	0e 94 bc 01 	call	0x378	; 0x378 <vPortFree>
    1c1e:	c9 c0       	rjmp	.+402    	; 0x1db2 <xTaskCreate+0x206>
    1c20:	ae 01       	movw	r20, r28
    1c22:	46 5e       	subi	r20, 0xE6	; 230
    1c24:	5f 4f       	sbci	r21, 0xFF	; 255
    1c26:	f6 01       	movw	r30, r12
    1c28:	31 96       	adiw	r30, 0x01	; 1
    1c2a:	b8 e0       	ldi	r27, 0x08	; 8
    1c2c:	cb 0e       	add	r12, r27
    1c2e:	d1 1c       	adc	r13, r1
    1c30:	cf 01       	movw	r24, r30
    1c32:	21 91       	ld	r18, Z+
    1c34:	da 01       	movw	r26, r20
    1c36:	2d 93       	st	X+, r18
    1c38:	ad 01       	movw	r20, r26
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	8c 91       	ld	r24, X
    1c3e:	88 23       	and	r24, r24
    1c40:	19 f0       	breq	.+6      	; 0x1c48 <xTaskCreate+0x9c>
    1c42:	ec 15       	cp	r30, r12
    1c44:	fd 05       	cpc	r31, r13
    1c46:	a1 f7       	brne	.-24     	; 0x1c30 <xTaskCreate+0x84>
    1c48:	18 a2       	std	Y+32, r1	; 0x20
    1c4a:	04 30       	cpi	r16, 0x04	; 4
    1c4c:	08 f0       	brcs	.+2      	; 0x1c50 <xTaskCreate+0xa4>
    1c4e:	03 e0       	ldi	r16, 0x03	; 3
    1c50:	0e 8b       	std	Y+22, r16	; 0x16
    1c52:	09 a3       	std	Y+33, r16	; 0x21
    1c54:	1a a2       	std	Y+34, r1	; 0x22
    1c56:	6e 01       	movw	r12, r28
    1c58:	b2 e0       	ldi	r27, 0x02	; 2
    1c5a:	cb 0e       	add	r12, r27
    1c5c:	d1 1c       	adc	r13, r1
    1c5e:	c6 01       	movw	r24, r12
    1c60:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialiseItem>
    1c64:	ce 01       	movw	r24, r28
    1c66:	0c 96       	adiw	r24, 0x0c	; 12
    1c68:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialiseItem>
    1c6c:	d9 87       	std	Y+9, r29	; 0x09
    1c6e:	c8 87       	std	Y+8, r28	; 0x08
    1c70:	84 e0       	ldi	r24, 0x04	; 4
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	80 1b       	sub	r24, r16
    1c76:	91 09       	sbc	r25, r1
    1c78:	9d 87       	std	Y+13, r25	; 0x0d
    1c7a:	8c 87       	std	Y+12, r24	; 0x0c
    1c7c:	db 8b       	std	Y+19, r29	; 0x13
    1c7e:	ca 8b       	std	Y+18, r28	; 0x12
    1c80:	1b a2       	std	Y+35, r1	; 0x23
    1c82:	1c a2       	std	Y+36, r1	; 0x24
    1c84:	1d a2       	std	Y+37, r1	; 0x25
    1c86:	1e a2       	std	Y+38, r1	; 0x26
    1c88:	1f a2       	std	Y+39, r1	; 0x27
    1c8a:	a2 01       	movw	r20, r4
    1c8c:	b4 01       	movw	r22, r8
    1c8e:	c5 01       	movw	r24, r10
    1c90:	04 da       	rcall	.-3064   	; 0x109a <pxPortInitialiseStack>
    1c92:	99 83       	std	Y+1, r25	; 0x01
    1c94:	88 83       	st	Y, r24
    1c96:	e1 14       	cp	r14, r1
    1c98:	f1 04       	cpc	r15, r1
    1c9a:	19 f0       	breq	.+6      	; 0x1ca2 <xTaskCreate+0xf6>
    1c9c:	f7 01       	movw	r30, r14
    1c9e:	d1 83       	std	Z+1, r29	; 0x01
    1ca0:	c0 83       	st	Z, r28
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	0f 92       	push	r0
    1ca8:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <uxCurrentNumberOfTasks>
    1cac:	8f 5f       	subi	r24, 0xFF	; 255
    1cae:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <uxCurrentNumberOfTasks>
    1cb2:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <pxCurrentTCB>
    1cb6:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1cba:	89 2b       	or	r24, r25
    1cbc:	d1 f5       	brne	.+116    	; 0x1d32 <xTaskCreate+0x186>
    1cbe:	d0 93 2b 03 	sts	0x032B, r29	; 0x80032b <pxCurrentTCB+0x1>
    1cc2:	c0 93 2a 03 	sts	0x032A, r28	; 0x80032a <pxCurrentTCB>
    1cc6:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <uxCurrentNumberOfTasks>
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <xTaskCreate+0x124>
    1cce:	41 c0       	rjmp	.+130    	; 0x1d52 <xTaskCreate+0x1a6>
    1cd0:	86 e0       	ldi	r24, 0x06	; 6
    1cd2:	93 e0       	ldi	r25, 0x03	; 3
    1cd4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1cd8:	8f e0       	ldi	r24, 0x0F	; 15
    1cda:	93 e0       	ldi	r25, 0x03	; 3
    1cdc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1ce0:	88 e1       	ldi	r24, 0x18	; 24
    1ce2:	93 e0       	ldi	r25, 0x03	; 3
    1ce4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1ce8:	81 e2       	ldi	r24, 0x21	; 33
    1cea:	93 e0       	ldi	r25, 0x03	; 3
    1cec:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1cf0:	8d ef       	ldi	r24, 0xFD	; 253
    1cf2:	92 e0       	ldi	r25, 0x02	; 2
    1cf4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1cf8:	84 ef       	ldi	r24, 0xF4	; 244
    1cfa:	92 e0       	ldi	r25, 0x02	; 2
    1cfc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1d00:	87 ee       	ldi	r24, 0xE7	; 231
    1d02:	92 e0       	ldi	r25, 0x02	; 2
    1d04:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1d08:	8e ed       	ldi	r24, 0xDE	; 222
    1d0a:	92 e0       	ldi	r25, 0x02	; 2
    1d0c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1d10:	84 ed       	ldi	r24, 0xD4	; 212
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vListInitialise>
    1d18:	8d ef       	ldi	r24, 0xFD	; 253
    1d1a:	92 e0       	ldi	r25, 0x02	; 2
    1d1c:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <pxDelayedTaskList+0x1>
    1d20:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <pxDelayedTaskList>
    1d24:	84 ef       	ldi	r24, 0xF4	; 244
    1d26:	92 e0       	ldi	r25, 0x02	; 2
    1d28:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <pxOverflowDelayedTaskList+0x1>
    1d2c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <pxOverflowDelayedTaskList>
    1d30:	10 c0       	rjmp	.+32     	; 0x1d52 <xTaskCreate+0x1a6>
    1d32:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <xSchedulerRunning>
    1d36:	81 11       	cpse	r24, r1
    1d38:	0c c0       	rjmp	.+24     	; 0x1d52 <xTaskCreate+0x1a6>
    1d3a:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    1d3e:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1d42:	96 89       	ldd	r25, Z+22	; 0x16
    1d44:	8e 89       	ldd	r24, Y+22	; 0x16
    1d46:	89 17       	cp	r24, r25
    1d48:	20 f0       	brcs	.+8      	; 0x1d52 <xTaskCreate+0x1a6>
    1d4a:	d0 93 2b 03 	sts	0x032B, r29	; 0x80032b <pxCurrentTCB+0x1>
    1d4e:	c0 93 2a 03 	sts	0x032A, r28	; 0x80032a <pxCurrentTCB>
    1d52:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <uxTaskNumber>
    1d56:	8f 5f       	subi	r24, 0xFF	; 255
    1d58:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <uxTaskNumber>
    1d5c:	8e 89       	ldd	r24, Y+22	; 0x16
    1d5e:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    1d62:	98 17       	cp	r25, r24
    1d64:	10 f4       	brcc	.+4      	; 0x1d6a <xTaskCreate+0x1be>
    1d66:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <uxTopReadyPriority>
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9c 01       	movw	r18, r24
    1d6e:	22 0f       	add	r18, r18
    1d70:	33 1f       	adc	r19, r19
    1d72:	22 0f       	add	r18, r18
    1d74:	33 1f       	adc	r19, r19
    1d76:	22 0f       	add	r18, r18
    1d78:	33 1f       	adc	r19, r19
    1d7a:	82 0f       	add	r24, r18
    1d7c:	93 1f       	adc	r25, r19
    1d7e:	b6 01       	movw	r22, r12
    1d80:	8a 5f       	subi	r24, 0xFA	; 250
    1d82:	9c 4f       	sbci	r25, 0xFC	; 252
    1d84:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    1d88:	0f 90       	pop	r0
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <xSchedulerRunning>
    1d90:	88 23       	and	r24, r24
    1d92:	59 f0       	breq	.+22     	; 0x1daa <xTaskCreate+0x1fe>
    1d94:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    1d98:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1d9c:	96 89       	ldd	r25, Z+22	; 0x16
    1d9e:	8e 89       	ldd	r24, Y+22	; 0x16
    1da0:	98 17       	cp	r25, r24
    1da2:	28 f4       	brcc	.+10     	; 0x1dae <xTaskCreate+0x202>
    1da4:	32 da       	rcall	.-2972   	; 0x120a <vPortYield>
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	05 c0       	rjmp	.+10     	; 0x1db4 <xTaskCreate+0x208>
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <xTaskCreate+0x208>
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <xTaskCreate+0x208>
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	df 90       	pop	r13
    1dc0:	cf 90       	pop	r12
    1dc2:	bf 90       	pop	r11
    1dc4:	af 90       	pop	r10
    1dc6:	9f 90       	pop	r9
    1dc8:	8f 90       	pop	r8
    1dca:	7f 90       	pop	r7
    1dcc:	6f 90       	pop	r6
    1dce:	5f 90       	pop	r5
    1dd0:	4f 90       	pop	r4
    1dd2:	08 95       	ret

00001dd4 <vTaskStartScheduler>:
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	0f 2e       	mov	r0, r31
    1ddc:	f7 ec       	ldi	r31, 0xC7	; 199
    1dde:	ef 2e       	mov	r14, r31
    1de0:	f2 e0       	ldi	r31, 0x02	; 2
    1de2:	ff 2e       	mov	r15, r31
    1de4:	f0 2d       	mov	r31, r0
    1de6:	00 e0       	ldi	r16, 0x00	; 0
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	45 e5       	ldi	r20, 0x55	; 85
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	6a e9       	ldi	r22, 0x9A	; 154
    1df2:	72 e0       	ldi	r23, 0x02	; 2
    1df4:	83 e3       	ldi	r24, 0x33	; 51
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	d9 de       	rcall	.-590    	; 0x1bac <xTaskCreate>
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	79 f4       	brne	.+30     	; 0x1e1c <vTaskStartScheduler+0x48>
    1dfe:	f8 94       	cli
    1e00:	8f ef       	ldi	r24, 0xFF	; 255
    1e02:	9f ef       	ldi	r25, 0xFF	; 255
    1e04:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1e08:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xNextTaskUnblockTime>
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <xSchedulerRunning>
    1e12:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <xTickCount+0x1>
    1e16:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <xTickCount>
    1e1a:	b1 d9       	rcall	.-3230   	; 0x117e <xPortStartScheduler>
    1e1c:	0f 91       	pop	r16
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	08 95       	ret

00001e24 <vTaskSuspendAll>:
    1e24:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    1e28:	8f 5f       	subi	r24, 0xFF	; 255
    1e2a:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <uxSchedulerSuspended>
    1e2e:	08 95       	ret

00001e30 <xTaskIncrementTick>:
    1e30:	cf 92       	push	r12
    1e32:	df 92       	push	r13
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    1e44:	81 11       	cpse	r24, r1
    1e46:	98 c0       	rjmp	.+304    	; 0x1f78 <xTaskIncrementTick+0x148>
    1e48:	e0 90 d1 02 	lds	r14, 0x02D1	; 0x8002d1 <xTickCount>
    1e4c:	f0 90 d2 02 	lds	r15, 0x02D2	; 0x8002d2 <xTickCount+0x1>
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	e8 1a       	sub	r14, r24
    1e54:	f8 0a       	sbc	r15, r24
    1e56:	f0 92 d2 02 	sts	0x02D2, r15	; 0x8002d2 <xTickCount+0x1>
    1e5a:	e0 92 d1 02 	sts	0x02D1, r14	; 0x8002d1 <xTickCount>
    1e5e:	e1 14       	cp	r14, r1
    1e60:	f1 04       	cpc	r15, r1
    1e62:	b1 f4       	brne	.+44     	; 0x1e90 <xTaskIncrementTick+0x60>
    1e64:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1e68:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1e6c:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <pxOverflowDelayedTaskList>
    1e70:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <pxOverflowDelayedTaskList+0x1>
    1e74:	30 93 f3 02 	sts	0x02F3, r19	; 0x8002f3 <pxDelayedTaskList+0x1>
    1e78:	20 93 f2 02 	sts	0x02F2, r18	; 0x8002f2 <pxDelayedTaskList>
    1e7c:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <pxOverflowDelayedTaskList+0x1>
    1e80:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <pxOverflowDelayedTaskList>
    1e84:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <xNumOfOverflows>
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <xNumOfOverflows>
    1e8e:	17 de       	rcall	.-978    	; 0x1abe <prvResetNextTaskUnblockTime>
    1e90:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <xNextTaskUnblockTime>
    1e94:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1e98:	e8 16       	cp	r14, r24
    1e9a:	f9 06       	cpc	r15, r25
    1e9c:	10 f4       	brcc	.+4      	; 0x1ea2 <xTaskIncrementTick+0x72>
    1e9e:	d1 2c       	mov	r13, r1
    1ea0:	53 c0       	rjmp	.+166    	; 0x1f48 <xTaskIncrementTick+0x118>
    1ea2:	d1 2c       	mov	r13, r1
    1ea4:	cc 24       	eor	r12, r12
    1ea6:	c3 94       	inc	r12
    1ea8:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1eac:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1eb0:	80 81       	ld	r24, Z
    1eb2:	81 11       	cpse	r24, r1
    1eb4:	07 c0       	rjmp	.+14     	; 0x1ec4 <xTaskIncrementTick+0x94>
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	9f ef       	ldi	r25, 0xFF	; 255
    1eba:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1ebe:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xNextTaskUnblockTime>
    1ec2:	42 c0       	rjmp	.+132    	; 0x1f48 <xTaskIncrementTick+0x118>
    1ec4:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <pxDelayedTaskList>
    1ec8:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <pxDelayedTaskList+0x1>
    1ecc:	05 80       	ldd	r0, Z+5	; 0x05
    1ece:	f6 81       	ldd	r31, Z+6	; 0x06
    1ed0:	e0 2d       	mov	r30, r0
    1ed2:	c6 81       	ldd	r28, Z+6	; 0x06
    1ed4:	d7 81       	ldd	r29, Z+7	; 0x07
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eda:	e8 16       	cp	r14, r24
    1edc:	f9 06       	cpc	r15, r25
    1ede:	28 f4       	brcc	.+10     	; 0x1eea <xTaskIncrementTick+0xba>
    1ee0:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <xNextTaskUnblockTime+0x1>
    1ee4:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <xNextTaskUnblockTime>
    1ee8:	2f c0       	rjmp	.+94     	; 0x1f48 <xTaskIncrementTick+0x118>
    1eea:	8e 01       	movw	r16, r28
    1eec:	0e 5f       	subi	r16, 0xFE	; 254
    1eee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1ef6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ef8:	9d 89       	ldd	r25, Y+21	; 0x15
    1efa:	89 2b       	or	r24, r25
    1efc:	21 f0       	breq	.+8      	; 0x1f06 <xTaskIncrementTick+0xd6>
    1efe:	ce 01       	movw	r24, r28
    1f00:	0c 96       	adiw	r24, 0x0c	; 12
    1f02:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1f06:	8e 89       	ldd	r24, Y+22	; 0x16
    1f08:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    1f0c:	98 17       	cp	r25, r24
    1f0e:	10 f4       	brcc	.+4      	; 0x1f14 <xTaskIncrementTick+0xe4>
    1f10:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <uxTopReadyPriority>
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9c 01       	movw	r18, r24
    1f18:	22 0f       	add	r18, r18
    1f1a:	33 1f       	adc	r19, r19
    1f1c:	22 0f       	add	r18, r18
    1f1e:	33 1f       	adc	r19, r19
    1f20:	22 0f       	add	r18, r18
    1f22:	33 1f       	adc	r19, r19
    1f24:	82 0f       	add	r24, r18
    1f26:	93 1f       	adc	r25, r19
    1f28:	b8 01       	movw	r22, r16
    1f2a:	8a 5f       	subi	r24, 0xFA	; 250
    1f2c:	9c 4f       	sbci	r25, 0xFC	; 252
    1f2e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    1f32:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    1f36:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1f3a:	9e 89       	ldd	r25, Y+22	; 0x16
    1f3c:	86 89       	ldd	r24, Z+22	; 0x16
    1f3e:	98 17       	cp	r25, r24
    1f40:	08 f4       	brcc	.+2      	; 0x1f44 <xTaskIncrementTick+0x114>
    1f42:	b2 cf       	rjmp	.-156    	; 0x1ea8 <xTaskIncrementTick+0x78>
    1f44:	dc 2c       	mov	r13, r12
    1f46:	b0 cf       	rjmp	.-160    	; 0x1ea8 <xTaskIncrementTick+0x78>
    1f48:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    1f4c:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    1f50:	86 89       	ldd	r24, Z+22	; 0x16
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	fc 01       	movw	r30, r24
    1f56:	ee 0f       	add	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	ee 0f       	add	r30, r30
    1f60:	ff 1f       	adc	r31, r31
    1f62:	8e 0f       	add	r24, r30
    1f64:	9f 1f       	adc	r25, r31
    1f66:	fc 01       	movw	r30, r24
    1f68:	ea 5f       	subi	r30, 0xFA	; 250
    1f6a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f6c:	80 81       	ld	r24, Z
    1f6e:	82 30       	cpi	r24, 0x02	; 2
    1f70:	48 f0       	brcs	.+18     	; 0x1f84 <xTaskIncrementTick+0x154>
    1f72:	dd 24       	eor	r13, r13
    1f74:	d3 94       	inc	r13
    1f76:	06 c0       	rjmp	.+12     	; 0x1f84 <xTaskIncrementTick+0x154>
    1f78:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <uxPendedTicks>
    1f7c:	8f 5f       	subi	r24, 0xFF	; 255
    1f7e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <uxPendedTicks>
    1f82:	d1 2c       	mov	r13, r1
    1f84:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <xYieldPending>
    1f88:	88 23       	and	r24, r24
    1f8a:	11 f0       	breq	.+4      	; 0x1f90 <xTaskIncrementTick+0x160>
    1f8c:	dd 24       	eor	r13, r13
    1f8e:	d3 94       	inc	r13
    1f90:	8d 2d       	mov	r24, r13
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	08 95       	ret

00001fa4 <xTaskResumeAll>:
    1fa4:	df 92       	push	r13
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	0f 92       	push	r0
    1fb8:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    1fbc:	81 50       	subi	r24, 0x01	; 1
    1fbe:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <uxSchedulerSuspended>
    1fc2:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    1fc6:	81 11       	cpse	r24, r1
    1fc8:	5c c0       	rjmp	.+184    	; 0x2082 <xTaskResumeAll+0xde>
    1fca:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <uxCurrentNumberOfTasks>
    1fce:	81 11       	cpse	r24, r1
    1fd0:	33 c0       	rjmp	.+102    	; 0x2038 <xTaskResumeAll+0x94>
    1fd2:	5a c0       	rjmp	.+180    	; 0x2088 <xTaskResumeAll+0xe4>
    1fd4:	d7 01       	movw	r26, r14
    1fd6:	15 96       	adiw	r26, 0x05	; 5
    1fd8:	ed 91       	ld	r30, X+
    1fda:	fc 91       	ld	r31, X
    1fdc:	16 97       	sbiw	r26, 0x06	; 6
    1fde:	c6 81       	ldd	r28, Z+6	; 0x06
    1fe0:	d7 81       	ldd	r29, Z+7	; 0x07
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	0c 96       	adiw	r24, 0x0c	; 12
    1fe6:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1fea:	8e 01       	movw	r16, r28
    1fec:	0e 5f       	subi	r16, 0xFE	; 254
    1fee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    1ff6:	8e 89       	ldd	r24, Y+22	; 0x16
    1ff8:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    1ffc:	98 17       	cp	r25, r24
    1ffe:	10 f4       	brcc	.+4      	; 0x2004 <xTaskResumeAll+0x60>
    2000:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <uxTopReadyPriority>
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9c 01       	movw	r18, r24
    2008:	22 0f       	add	r18, r18
    200a:	33 1f       	adc	r19, r19
    200c:	22 0f       	add	r18, r18
    200e:	33 1f       	adc	r19, r19
    2010:	22 0f       	add	r18, r18
    2012:	33 1f       	adc	r19, r19
    2014:	82 0f       	add	r24, r18
    2016:	93 1f       	adc	r25, r19
    2018:	b8 01       	movw	r22, r16
    201a:	8a 5f       	subi	r24, 0xFA	; 250
    201c:	9c 4f       	sbci	r25, 0xFC	; 252
    201e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    2022:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    2026:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    202a:	9e 89       	ldd	r25, Y+22	; 0x16
    202c:	86 89       	ldd	r24, Z+22	; 0x16
    202e:	98 17       	cp	r25, r24
    2030:	68 f0       	brcs	.+26     	; 0x204c <xTaskResumeAll+0xa8>
    2032:	d0 92 cd 02 	sts	0x02CD, r13	; 0x8002cd <xYieldPending>
    2036:	0a c0       	rjmp	.+20     	; 0x204c <xTaskResumeAll+0xa8>
    2038:	c0 e0       	ldi	r28, 0x00	; 0
    203a:	d0 e0       	ldi	r29, 0x00	; 0
    203c:	0f 2e       	mov	r0, r31
    203e:	f7 ee       	ldi	r31, 0xE7	; 231
    2040:	ef 2e       	mov	r14, r31
    2042:	f2 e0       	ldi	r31, 0x02	; 2
    2044:	ff 2e       	mov	r15, r31
    2046:	f0 2d       	mov	r31, r0
    2048:	dd 24       	eor	r13, r13
    204a:	d3 94       	inc	r13
    204c:	f7 01       	movw	r30, r14
    204e:	80 81       	ld	r24, Z
    2050:	81 11       	cpse	r24, r1
    2052:	c0 cf       	rjmp	.-128    	; 0x1fd4 <xTaskResumeAll+0x30>
    2054:	cd 2b       	or	r28, r29
    2056:	09 f0       	breq	.+2      	; 0x205a <xTaskResumeAll+0xb6>
    2058:	32 dd       	rcall	.-1436   	; 0x1abe <prvResetNextTaskUnblockTime>
    205a:	c0 91 ce 02 	lds	r28, 0x02CE	; 0x8002ce <uxPendedTicks>
    205e:	cc 23       	and	r28, r28
    2060:	49 f0       	breq	.+18     	; 0x2074 <xTaskResumeAll+0xd0>
    2062:	d1 e0       	ldi	r29, 0x01	; 1
    2064:	e5 de       	rcall	.-566    	; 0x1e30 <xTaskIncrementTick>
    2066:	81 11       	cpse	r24, r1
    2068:	d0 93 cd 02 	sts	0x02CD, r29	; 0x8002cd <xYieldPending>
    206c:	c1 50       	subi	r28, 0x01	; 1
    206e:	d1 f7       	brne	.-12     	; 0x2064 <xTaskResumeAll+0xc0>
    2070:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <uxPendedTicks>
    2074:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <xYieldPending>
    2078:	88 23       	and	r24, r24
    207a:	29 f0       	breq	.+10     	; 0x2086 <xTaskResumeAll+0xe2>
    207c:	c6 d8       	rcall	.-3700   	; 0x120a <vPortYield>
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	03 c0       	rjmp	.+6      	; 0x2088 <xTaskResumeAll+0xe4>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <xTaskResumeAll+0xe4>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	0f 90       	pop	r0
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	df 90       	pop	r13
    209a:	08 95       	ret

0000209c <vTaskSwitchContext>:
    209c:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    20a0:	88 23       	and	r24, r24
    20a2:	21 f0       	breq	.+8      	; 0x20ac <vTaskSwitchContext+0x10>
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <xYieldPending>
    20aa:	08 95       	ret
    20ac:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <xYieldPending>
    20b0:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <pxCurrentTCB>
    20b4:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    20b8:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    20bc:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    20c0:	2d 91       	ld	r18, X+
    20c2:	3c 91       	ld	r19, X
    20c4:	87 89       	ldd	r24, Z+23	; 0x17
    20c6:	90 8d       	ldd	r25, Z+24	; 0x18
    20c8:	82 17       	cp	r24, r18
    20ca:	93 07       	cpc	r25, r19
    20cc:	60 f0       	brcs	.+24     	; 0x20e6 <vTaskSwitchContext+0x4a>
    20ce:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <pxCurrentTCB>
    20d2:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    20d6:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <pxCurrentTCB>
    20da:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    20de:	67 5e       	subi	r22, 0xE7	; 231
    20e0:	7f 4f       	sbci	r23, 0xFF	; 255
    20e2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <vApplicationStackOverflowHook>
    20e6:	20 91 d0 02 	lds	r18, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    20ea:	82 2f       	mov	r24, r18
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	fc 01       	movw	r30, r24
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	e8 0f       	add	r30, r24
    20fe:	f9 1f       	adc	r31, r25
    2100:	ea 5f       	subi	r30, 0xFA	; 250
    2102:	fc 4f       	sbci	r31, 0xFC	; 252
    2104:	30 81       	ld	r19, Z
    2106:	31 11       	cpse	r19, r1
    2108:	11 c0       	rjmp	.+34     	; 0x212c <vTaskSwitchContext+0x90>
    210a:	21 50       	subi	r18, 0x01	; 1
    210c:	82 2f       	mov	r24, r18
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	fc 01       	movw	r30, r24
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	ee 0f       	add	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	ee 0f       	add	r30, r30
    211c:	ff 1f       	adc	r31, r31
    211e:	e8 0f       	add	r30, r24
    2120:	f9 1f       	adc	r31, r25
    2122:	ea 5f       	subi	r30, 0xFA	; 250
    2124:	fc 4f       	sbci	r31, 0xFC	; 252
    2126:	30 81       	ld	r19, Z
    2128:	33 23       	and	r19, r19
    212a:	79 f3       	breq	.-34     	; 0x210a <vTaskSwitchContext+0x6e>
    212c:	ac 01       	movw	r20, r24
    212e:	44 0f       	add	r20, r20
    2130:	55 1f       	adc	r21, r21
    2132:	44 0f       	add	r20, r20
    2134:	55 1f       	adc	r21, r21
    2136:	44 0f       	add	r20, r20
    2138:	55 1f       	adc	r21, r21
    213a:	48 0f       	add	r20, r24
    213c:	59 1f       	adc	r21, r25
    213e:	da 01       	movw	r26, r20
    2140:	aa 5f       	subi	r26, 0xFA	; 250
    2142:	bc 4f       	sbci	r27, 0xFC	; 252
    2144:	11 96       	adiw	r26, 0x01	; 1
    2146:	ed 91       	ld	r30, X+
    2148:	fc 91       	ld	r31, X
    214a:	12 97       	sbiw	r26, 0x02	; 2
    214c:	02 80       	ldd	r0, Z+2	; 0x02
    214e:	f3 81       	ldd	r31, Z+3	; 0x03
    2150:	e0 2d       	mov	r30, r0
    2152:	12 96       	adiw	r26, 0x02	; 2
    2154:	fc 93       	st	X, r31
    2156:	ee 93       	st	-X, r30
    2158:	11 97       	sbiw	r26, 0x01	; 1
    215a:	47 5f       	subi	r20, 0xF7	; 247
    215c:	5c 4f       	sbci	r21, 0xFC	; 252
    215e:	e4 17       	cp	r30, r20
    2160:	f5 07       	cpc	r31, r21
    2162:	29 f4       	brne	.+10     	; 0x216e <vTaskSwitchContext+0xd2>
    2164:	42 81       	ldd	r20, Z+2	; 0x02
    2166:	53 81       	ldd	r21, Z+3	; 0x03
    2168:	fd 01       	movw	r30, r26
    216a:	52 83       	std	Z+2, r21	; 0x02
    216c:	41 83       	std	Z+1, r20	; 0x01
    216e:	fc 01       	movw	r30, r24
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	ee 0f       	add	r30, r30
    2176:	ff 1f       	adc	r31, r31
    2178:	ee 0f       	add	r30, r30
    217a:	ff 1f       	adc	r31, r31
    217c:	8e 0f       	add	r24, r30
    217e:	9f 1f       	adc	r25, r31
    2180:	fc 01       	movw	r30, r24
    2182:	ea 5f       	subi	r30, 0xFA	; 250
    2184:	fc 4f       	sbci	r31, 0xFC	; 252
    2186:	01 80       	ldd	r0, Z+1	; 0x01
    2188:	f2 81       	ldd	r31, Z+2	; 0x02
    218a:	e0 2d       	mov	r30, r0
    218c:	86 81       	ldd	r24, Z+6	; 0x06
    218e:	97 81       	ldd	r25, Z+7	; 0x07
    2190:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <pxCurrentTCB+0x1>
    2194:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <pxCurrentTCB>
    2198:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <uxTopReadyPriority>
    219c:	08 95       	ret

0000219e <vTaskPlaceOnEventList>:
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	eb 01       	movw	r28, r22
    21a4:	60 91 2a 03 	lds	r22, 0x032A	; 0x80032a <pxCurrentTCB>
    21a8:	70 91 2b 03 	lds	r23, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    21ac:	64 5f       	subi	r22, 0xF4	; 244
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	0e 94 1e 03 	call	0x63c	; 0x63c <vListInsert>
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	ce 01       	movw	r24, r28
    21b8:	a1 dc       	rcall	.-1726   	; 0x1afc <prvAddCurrentTaskToDelayedList>
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	08 95       	ret

000021c0 <xTaskRemoveFromEventList>:
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	dc 01       	movw	r26, r24
    21ca:	15 96       	adiw	r26, 0x05	; 5
    21cc:	ed 91       	ld	r30, X+
    21ce:	fc 91       	ld	r31, X
    21d0:	16 97       	sbiw	r26, 0x06	; 6
    21d2:	c6 81       	ldd	r28, Z+6	; 0x06
    21d4:	d7 81       	ldd	r29, Z+7	; 0x07
    21d6:	8e 01       	movw	r16, r28
    21d8:	04 5f       	subi	r16, 0xF4	; 244
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
    21dc:	c8 01       	movw	r24, r16
    21de:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    21e2:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <uxSchedulerSuspended>
    21e6:	81 11       	cpse	r24, r1
    21e8:	1c c0       	rjmp	.+56     	; 0x2222 <__stack+0x23>
    21ea:	0a 50       	subi	r16, 0x0A	; 10
    21ec:	11 09       	sbc	r17, r1
    21ee:	c8 01       	movw	r24, r16
    21f0:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
    21f4:	8e 89       	ldd	r24, Y+22	; 0x16
    21f6:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    21fa:	98 17       	cp	r25, r24
    21fc:	10 f4       	brcc	.+4      	; 0x2202 <__stack+0x3>
    21fe:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <uxTopReadyPriority>
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 01       	movw	r18, r24
    2206:	22 0f       	add	r18, r18
    2208:	33 1f       	adc	r19, r19
    220a:	22 0f       	add	r18, r18
    220c:	33 1f       	adc	r19, r19
    220e:	22 0f       	add	r18, r18
    2210:	33 1f       	adc	r19, r19
    2212:	82 0f       	add	r24, r18
    2214:	93 1f       	adc	r25, r19
    2216:	b8 01       	movw	r22, r16
    2218:	8a 5f       	subi	r24, 0xFA	; 250
    221a:	9c 4f       	sbci	r25, 0xFC	; 252
    221c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    2220:	05 c0       	rjmp	.+10     	; 0x222c <__stack+0x2d>
    2222:	b8 01       	movw	r22, r16
    2224:	87 ee       	ldi	r24, 0xE7	; 231
    2226:	92 e0       	ldi	r25, 0x02	; 2
    2228:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
    222c:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <pxCurrentTCB>
    2230:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <pxCurrentTCB+0x1>
    2234:	9e 89       	ldd	r25, Y+22	; 0x16
    2236:	86 89       	ldd	r24, Z+22	; 0x16
    2238:	89 17       	cp	r24, r25
    223a:	20 f4       	brcc	.+8      	; 0x2244 <__stack+0x45>
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <xYieldPending>
    2242:	01 c0       	rjmp	.+2      	; 0x2246 <__stack+0x47>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	08 95       	ret

00002250 <vTaskSetTimeOutState>:
    2250:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <xNumOfOverflows>
    2254:	fc 01       	movw	r30, r24
    2256:	20 83       	st	Z, r18
    2258:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <xTickCount>
    225c:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <xTickCount+0x1>
    2260:	32 83       	std	Z+2, r19	; 0x02
    2262:	21 83       	std	Z+1, r18	; 0x01
    2264:	08 95       	ret

00002266 <xTaskCheckForTimeOut>:
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	0f 92       	push	r0
    226c:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <xTickCount>
    2270:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <xTickCount+0x1>
    2274:	db 01       	movw	r26, r22
    2276:	2d 91       	ld	r18, X+
    2278:	3c 91       	ld	r19, X
    227a:	2f 3f       	cpi	r18, 0xFF	; 255
    227c:	bf ef       	ldi	r27, 0xFF	; 255
    227e:	3b 07       	cpc	r19, r27
    2280:	11 f1       	breq	.+68     	; 0x22c6 <xTaskCheckForTimeOut+0x60>
    2282:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <xNumOfOverflows>
    2286:	dc 01       	movw	r26, r24
    2288:	fc 91       	ld	r31, X
    228a:	fe 17       	cp	r31, r30
    228c:	39 f0       	breq	.+14     	; 0x229c <xTaskCheckForTimeOut+0x36>
    228e:	11 96       	adiw	r26, 0x01	; 1
    2290:	ed 91       	ld	r30, X+
    2292:	fc 91       	ld	r31, X
    2294:	12 97       	sbiw	r26, 0x02	; 2
    2296:	4e 17       	cp	r20, r30
    2298:	5f 07       	cpc	r21, r31
    229a:	b8 f4       	brcc	.+46     	; 0x22ca <xTaskCheckForTimeOut+0x64>
    229c:	dc 01       	movw	r26, r24
    229e:	11 96       	adiw	r26, 0x01	; 1
    22a0:	ed 91       	ld	r30, X+
    22a2:	fc 91       	ld	r31, X
    22a4:	12 97       	sbiw	r26, 0x02	; 2
    22a6:	da 01       	movw	r26, r20
    22a8:	ae 1b       	sub	r26, r30
    22aa:	bf 0b       	sbc	r27, r31
    22ac:	a2 17       	cp	r26, r18
    22ae:	b3 07       	cpc	r27, r19
    22b0:	70 f4       	brcc	.+28     	; 0x22ce <xTaskCheckForTimeOut+0x68>
    22b2:	db 01       	movw	r26, r22
    22b4:	e4 1b       	sub	r30, r20
    22b6:	f5 0b       	sbc	r31, r21
    22b8:	2e 0f       	add	r18, r30
    22ba:	3f 1f       	adc	r19, r31
    22bc:	2d 93       	st	X+, r18
    22be:	3c 93       	st	X, r19
    22c0:	c7 df       	rcall	.-114    	; 0x2250 <vTaskSetTimeOutState>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	05 c0       	rjmp	.+10     	; 0x22d0 <xTaskCheckForTimeOut+0x6a>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <xTaskCheckForTimeOut+0x6a>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <xTaskCheckForTimeOut+0x6a>
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	0f 90       	pop	r0
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	08 95       	ret

000022d6 <vTaskMissedYield>:
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <xYieldPending>
    22dc:	08 95       	ret

000022de <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	fc 01       	movw	r30, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    22e8:	89 2b       	or	r24, r25
    22ea:	79 f1       	breq	.+94     	; 0x234a <xTaskPriorityDisinherit+0x6c>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    22ec:	82 a1       	ldd	r24, Z+34	; 0x22
    22ee:	81 50       	subi	r24, 0x01	; 1
    22f0:	82 a3       	std	Z+34, r24	; 0x22

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    22f2:	26 89       	ldd	r18, Z+22	; 0x16
    22f4:	91 a1       	ldd	r25, Z+33	; 0x21
    22f6:	29 17       	cp	r18, r25
    22f8:	51 f1       	breq	.+84     	; 0x234e <xTaskPriorityDisinherit+0x70>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    22fa:	81 11       	cpse	r24, r1
    22fc:	2a c0       	rjmp	.+84     	; 0x2352 <xTaskPriorityDisinherit+0x74>
    22fe:	ef 01       	movw	r28, r30
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2300:	8f 01       	movw	r16, r30
    2302:	0e 5f       	subi	r16, 0xFE	; 254
    2304:	1f 4f       	sbci	r17, 0xFF	; 255
    2306:	c8 01       	movw	r24, r16
    2308:	0e 94 4f 03 	call	0x69e	; 0x69e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    230c:	89 a1       	ldd	r24, Y+33	; 0x21
    230e:	8e 8b       	std	Y+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2310:	24 e0       	ldi	r18, 0x04	; 4
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	28 1b       	sub	r18, r24
    2316:	31 09       	sbc	r19, r1
    2318:	3d 87       	std	Y+13, r19	; 0x0d
    231a:	2c 87       	std	Y+12, r18	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    231c:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <uxTopReadyPriority>
    2320:	98 17       	cp	r25, r24
    2322:	10 f4       	brcc	.+4      	; 0x2328 <xTaskPriorityDisinherit+0x4a>
    2324:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <uxTopReadyPriority>
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9c 01       	movw	r18, r24
    232c:	22 0f       	add	r18, r18
    232e:	33 1f       	adc	r19, r19
    2330:	22 0f       	add	r18, r18
    2332:	33 1f       	adc	r19, r19
    2334:	22 0f       	add	r18, r18
    2336:	33 1f       	adc	r19, r19
    2338:	82 0f       	add	r24, r18
    233a:	93 1f       	adc	r25, r19
    233c:	b8 01       	movw	r22, r16
    233e:	8a 5f       	subi	r24, 0xFA	; 250
    2340:	9c 4f       	sbci	r25, 0xFC	; 252
    2342:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	05 c0       	rjmp	.+10     	; 0x2354 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	03 c0       	rjmp	.+6      	; 0x2354 <xTaskPriorityDisinherit+0x76>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <xTaskPriorityDisinherit+0x76>
    2352:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	08 95       	ret

0000235e <__subsf3>:
    235e:	50 58       	subi	r21, 0x80	; 128

00002360 <__addsf3>:
    2360:	bb 27       	eor	r27, r27
    2362:	aa 27       	eor	r26, r26
    2364:	0e d0       	rcall	.+28     	; 0x2382 <__addsf3x>
    2366:	e5 c0       	rjmp	.+458    	; 0x2532 <__fp_round>
    2368:	d6 d0       	rcall	.+428    	; 0x2516 <__fp_pscA>
    236a:	30 f0       	brcs	.+12     	; 0x2378 <__addsf3+0x18>
    236c:	db d0       	rcall	.+438    	; 0x2524 <__fp_pscB>
    236e:	20 f0       	brcs	.+8      	; 0x2378 <__addsf3+0x18>
    2370:	31 f4       	brne	.+12     	; 0x237e <__addsf3+0x1e>
    2372:	9f 3f       	cpi	r25, 0xFF	; 255
    2374:	11 f4       	brne	.+4      	; 0x237a <__addsf3+0x1a>
    2376:	1e f4       	brtc	.+6      	; 0x237e <__addsf3+0x1e>
    2378:	cb c0       	rjmp	.+406    	; 0x2510 <__fp_nan>
    237a:	0e f4       	brtc	.+2      	; 0x237e <__addsf3+0x1e>
    237c:	e0 95       	com	r30
    237e:	e7 fb       	bst	r30, 7
    2380:	c1 c0       	rjmp	.+386    	; 0x2504 <__fp_inf>

00002382 <__addsf3x>:
    2382:	e9 2f       	mov	r30, r25
    2384:	e7 d0       	rcall	.+462    	; 0x2554 <__fp_split3>
    2386:	80 f3       	brcs	.-32     	; 0x2368 <__addsf3+0x8>
    2388:	ba 17       	cp	r27, r26
    238a:	62 07       	cpc	r22, r18
    238c:	73 07       	cpc	r23, r19
    238e:	84 07       	cpc	r24, r20
    2390:	95 07       	cpc	r25, r21
    2392:	18 f0       	brcs	.+6      	; 0x239a <__addsf3x+0x18>
    2394:	71 f4       	brne	.+28     	; 0x23b2 <__addsf3x+0x30>
    2396:	9e f5       	brtc	.+102    	; 0x23fe <__addsf3x+0x7c>
    2398:	ff c0       	rjmp	.+510    	; 0x2598 <__fp_zero>
    239a:	0e f4       	brtc	.+2      	; 0x239e <__addsf3x+0x1c>
    239c:	e0 95       	com	r30
    239e:	0b 2e       	mov	r0, r27
    23a0:	ba 2f       	mov	r27, r26
    23a2:	a0 2d       	mov	r26, r0
    23a4:	0b 01       	movw	r0, r22
    23a6:	b9 01       	movw	r22, r18
    23a8:	90 01       	movw	r18, r0
    23aa:	0c 01       	movw	r0, r24
    23ac:	ca 01       	movw	r24, r20
    23ae:	a0 01       	movw	r20, r0
    23b0:	11 24       	eor	r1, r1
    23b2:	ff 27       	eor	r31, r31
    23b4:	59 1b       	sub	r21, r25
    23b6:	99 f0       	breq	.+38     	; 0x23de <__addsf3x+0x5c>
    23b8:	59 3f       	cpi	r21, 0xF9	; 249
    23ba:	50 f4       	brcc	.+20     	; 0x23d0 <__addsf3x+0x4e>
    23bc:	50 3e       	cpi	r21, 0xE0	; 224
    23be:	68 f1       	brcs	.+90     	; 0x241a <__addsf3x+0x98>
    23c0:	1a 16       	cp	r1, r26
    23c2:	f0 40       	sbci	r31, 0x00	; 0
    23c4:	a2 2f       	mov	r26, r18
    23c6:	23 2f       	mov	r18, r19
    23c8:	34 2f       	mov	r19, r20
    23ca:	44 27       	eor	r20, r20
    23cc:	58 5f       	subi	r21, 0xF8	; 248
    23ce:	f3 cf       	rjmp	.-26     	; 0x23b6 <__addsf3x+0x34>
    23d0:	46 95       	lsr	r20
    23d2:	37 95       	ror	r19
    23d4:	27 95       	ror	r18
    23d6:	a7 95       	ror	r26
    23d8:	f0 40       	sbci	r31, 0x00	; 0
    23da:	53 95       	inc	r21
    23dc:	c9 f7       	brne	.-14     	; 0x23d0 <__addsf3x+0x4e>
    23de:	7e f4       	brtc	.+30     	; 0x23fe <__addsf3x+0x7c>
    23e0:	1f 16       	cp	r1, r31
    23e2:	ba 0b       	sbc	r27, r26
    23e4:	62 0b       	sbc	r22, r18
    23e6:	73 0b       	sbc	r23, r19
    23e8:	84 0b       	sbc	r24, r20
    23ea:	ba f0       	brmi	.+46     	; 0x241a <__addsf3x+0x98>
    23ec:	91 50       	subi	r25, 0x01	; 1
    23ee:	a1 f0       	breq	.+40     	; 0x2418 <__addsf3x+0x96>
    23f0:	ff 0f       	add	r31, r31
    23f2:	bb 1f       	adc	r27, r27
    23f4:	66 1f       	adc	r22, r22
    23f6:	77 1f       	adc	r23, r23
    23f8:	88 1f       	adc	r24, r24
    23fa:	c2 f7       	brpl	.-16     	; 0x23ec <__addsf3x+0x6a>
    23fc:	0e c0       	rjmp	.+28     	; 0x241a <__addsf3x+0x98>
    23fe:	ba 0f       	add	r27, r26
    2400:	62 1f       	adc	r22, r18
    2402:	73 1f       	adc	r23, r19
    2404:	84 1f       	adc	r24, r20
    2406:	48 f4       	brcc	.+18     	; 0x241a <__addsf3x+0x98>
    2408:	87 95       	ror	r24
    240a:	77 95       	ror	r23
    240c:	67 95       	ror	r22
    240e:	b7 95       	ror	r27
    2410:	f7 95       	ror	r31
    2412:	9e 3f       	cpi	r25, 0xFE	; 254
    2414:	08 f0       	brcs	.+2      	; 0x2418 <__addsf3x+0x96>
    2416:	b3 cf       	rjmp	.-154    	; 0x237e <__addsf3+0x1e>
    2418:	93 95       	inc	r25
    241a:	88 0f       	add	r24, r24
    241c:	08 f0       	brcs	.+2      	; 0x2420 <__addsf3x+0x9e>
    241e:	99 27       	eor	r25, r25
    2420:	ee 0f       	add	r30, r30
    2422:	97 95       	ror	r25
    2424:	87 95       	ror	r24
    2426:	08 95       	ret

00002428 <__fixsfsi>:
    2428:	04 d0       	rcall	.+8      	; 0x2432 <__fixunssfsi>
    242a:	68 94       	set
    242c:	b1 11       	cpse	r27, r1
    242e:	b5 c0       	rjmp	.+362    	; 0x259a <__fp_szero>
    2430:	08 95       	ret

00002432 <__fixunssfsi>:
    2432:	98 d0       	rcall	.+304    	; 0x2564 <__fp_splitA>
    2434:	88 f0       	brcs	.+34     	; 0x2458 <__fixunssfsi+0x26>
    2436:	9f 57       	subi	r25, 0x7F	; 127
    2438:	90 f0       	brcs	.+36     	; 0x245e <__fixunssfsi+0x2c>
    243a:	b9 2f       	mov	r27, r25
    243c:	99 27       	eor	r25, r25
    243e:	b7 51       	subi	r27, 0x17	; 23
    2440:	a0 f0       	brcs	.+40     	; 0x246a <__fixunssfsi+0x38>
    2442:	d1 f0       	breq	.+52     	; 0x2478 <__fixunssfsi+0x46>
    2444:	66 0f       	add	r22, r22
    2446:	77 1f       	adc	r23, r23
    2448:	88 1f       	adc	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	1a f0       	brmi	.+6      	; 0x2454 <__fixunssfsi+0x22>
    244e:	ba 95       	dec	r27
    2450:	c9 f7       	brne	.-14     	; 0x2444 <__fixunssfsi+0x12>
    2452:	12 c0       	rjmp	.+36     	; 0x2478 <__fixunssfsi+0x46>
    2454:	b1 30       	cpi	r27, 0x01	; 1
    2456:	81 f0       	breq	.+32     	; 0x2478 <__fixunssfsi+0x46>
    2458:	9f d0       	rcall	.+318    	; 0x2598 <__fp_zero>
    245a:	b1 e0       	ldi	r27, 0x01	; 1
    245c:	08 95       	ret
    245e:	9c c0       	rjmp	.+312    	; 0x2598 <__fp_zero>
    2460:	67 2f       	mov	r22, r23
    2462:	78 2f       	mov	r23, r24
    2464:	88 27       	eor	r24, r24
    2466:	b8 5f       	subi	r27, 0xF8	; 248
    2468:	39 f0       	breq	.+14     	; 0x2478 <__fixunssfsi+0x46>
    246a:	b9 3f       	cpi	r27, 0xF9	; 249
    246c:	cc f3       	brlt	.-14     	; 0x2460 <__fixunssfsi+0x2e>
    246e:	86 95       	lsr	r24
    2470:	77 95       	ror	r23
    2472:	67 95       	ror	r22
    2474:	b3 95       	inc	r27
    2476:	d9 f7       	brne	.-10     	; 0x246e <__fixunssfsi+0x3c>
    2478:	3e f4       	brtc	.+14     	; 0x2488 <__fixunssfsi+0x56>
    247a:	90 95       	com	r25
    247c:	80 95       	com	r24
    247e:	70 95       	com	r23
    2480:	61 95       	neg	r22
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	8f 4f       	sbci	r24, 0xFF	; 255
    2486:	9f 4f       	sbci	r25, 0xFF	; 255
    2488:	08 95       	ret

0000248a <__floatunsisf>:
    248a:	e8 94       	clt
    248c:	09 c0       	rjmp	.+18     	; 0x24a0 <__floatsisf+0x12>

0000248e <__floatsisf>:
    248e:	97 fb       	bst	r25, 7
    2490:	3e f4       	brtc	.+14     	; 0x24a0 <__floatsisf+0x12>
    2492:	90 95       	com	r25
    2494:	80 95       	com	r24
    2496:	70 95       	com	r23
    2498:	61 95       	neg	r22
    249a:	7f 4f       	sbci	r23, 0xFF	; 255
    249c:	8f 4f       	sbci	r24, 0xFF	; 255
    249e:	9f 4f       	sbci	r25, 0xFF	; 255
    24a0:	99 23       	and	r25, r25
    24a2:	a9 f0       	breq	.+42     	; 0x24ce <__floatsisf+0x40>
    24a4:	f9 2f       	mov	r31, r25
    24a6:	96 e9       	ldi	r25, 0x96	; 150
    24a8:	bb 27       	eor	r27, r27
    24aa:	93 95       	inc	r25
    24ac:	f6 95       	lsr	r31
    24ae:	87 95       	ror	r24
    24b0:	77 95       	ror	r23
    24b2:	67 95       	ror	r22
    24b4:	b7 95       	ror	r27
    24b6:	f1 11       	cpse	r31, r1
    24b8:	f8 cf       	rjmp	.-16     	; 0x24aa <__floatsisf+0x1c>
    24ba:	fa f4       	brpl	.+62     	; 0x24fa <__floatsisf+0x6c>
    24bc:	bb 0f       	add	r27, r27
    24be:	11 f4       	brne	.+4      	; 0x24c4 <__floatsisf+0x36>
    24c0:	60 ff       	sbrs	r22, 0
    24c2:	1b c0       	rjmp	.+54     	; 0x24fa <__floatsisf+0x6c>
    24c4:	6f 5f       	subi	r22, 0xFF	; 255
    24c6:	7f 4f       	sbci	r23, 0xFF	; 255
    24c8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	16 c0       	rjmp	.+44     	; 0x24fa <__floatsisf+0x6c>
    24ce:	88 23       	and	r24, r24
    24d0:	11 f0       	breq	.+4      	; 0x24d6 <__floatsisf+0x48>
    24d2:	96 e9       	ldi	r25, 0x96	; 150
    24d4:	11 c0       	rjmp	.+34     	; 0x24f8 <__floatsisf+0x6a>
    24d6:	77 23       	and	r23, r23
    24d8:	21 f0       	breq	.+8      	; 0x24e2 <__floatsisf+0x54>
    24da:	9e e8       	ldi	r25, 0x8E	; 142
    24dc:	87 2f       	mov	r24, r23
    24de:	76 2f       	mov	r23, r22
    24e0:	05 c0       	rjmp	.+10     	; 0x24ec <__floatsisf+0x5e>
    24e2:	66 23       	and	r22, r22
    24e4:	71 f0       	breq	.+28     	; 0x2502 <__floatsisf+0x74>
    24e6:	96 e8       	ldi	r25, 0x86	; 134
    24e8:	86 2f       	mov	r24, r22
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	2a f0       	brmi	.+10     	; 0x24fa <__floatsisf+0x6c>
    24f0:	9a 95       	dec	r25
    24f2:	66 0f       	add	r22, r22
    24f4:	77 1f       	adc	r23, r23
    24f6:	88 1f       	adc	r24, r24
    24f8:	da f7       	brpl	.-10     	; 0x24f0 <__floatsisf+0x62>
    24fa:	88 0f       	add	r24, r24
    24fc:	96 95       	lsr	r25
    24fe:	87 95       	ror	r24
    2500:	97 f9       	bld	r25, 7
    2502:	08 95       	ret

00002504 <__fp_inf>:
    2504:	97 f9       	bld	r25, 7
    2506:	9f 67       	ori	r25, 0x7F	; 127
    2508:	80 e8       	ldi	r24, 0x80	; 128
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	08 95       	ret

00002510 <__fp_nan>:
    2510:	9f ef       	ldi	r25, 0xFF	; 255
    2512:	80 ec       	ldi	r24, 0xC0	; 192
    2514:	08 95       	ret

00002516 <__fp_pscA>:
    2516:	00 24       	eor	r0, r0
    2518:	0a 94       	dec	r0
    251a:	16 16       	cp	r1, r22
    251c:	17 06       	cpc	r1, r23
    251e:	18 06       	cpc	r1, r24
    2520:	09 06       	cpc	r0, r25
    2522:	08 95       	ret

00002524 <__fp_pscB>:
    2524:	00 24       	eor	r0, r0
    2526:	0a 94       	dec	r0
    2528:	12 16       	cp	r1, r18
    252a:	13 06       	cpc	r1, r19
    252c:	14 06       	cpc	r1, r20
    252e:	05 06       	cpc	r0, r21
    2530:	08 95       	ret

00002532 <__fp_round>:
    2532:	09 2e       	mov	r0, r25
    2534:	03 94       	inc	r0
    2536:	00 0c       	add	r0, r0
    2538:	11 f4       	brne	.+4      	; 0x253e <__fp_round+0xc>
    253a:	88 23       	and	r24, r24
    253c:	52 f0       	brmi	.+20     	; 0x2552 <__fp_round+0x20>
    253e:	bb 0f       	add	r27, r27
    2540:	40 f4       	brcc	.+16     	; 0x2552 <__fp_round+0x20>
    2542:	bf 2b       	or	r27, r31
    2544:	11 f4       	brne	.+4      	; 0x254a <__fp_round+0x18>
    2546:	60 ff       	sbrs	r22, 0
    2548:	04 c0       	rjmp	.+8      	; 0x2552 <__fp_round+0x20>
    254a:	6f 5f       	subi	r22, 0xFF	; 255
    254c:	7f 4f       	sbci	r23, 0xFF	; 255
    254e:	8f 4f       	sbci	r24, 0xFF	; 255
    2550:	9f 4f       	sbci	r25, 0xFF	; 255
    2552:	08 95       	ret

00002554 <__fp_split3>:
    2554:	57 fd       	sbrc	r21, 7
    2556:	90 58       	subi	r25, 0x80	; 128
    2558:	44 0f       	add	r20, r20
    255a:	55 1f       	adc	r21, r21
    255c:	59 f0       	breq	.+22     	; 0x2574 <__fp_splitA+0x10>
    255e:	5f 3f       	cpi	r21, 0xFF	; 255
    2560:	71 f0       	breq	.+28     	; 0x257e <__fp_splitA+0x1a>
    2562:	47 95       	ror	r20

00002564 <__fp_splitA>:
    2564:	88 0f       	add	r24, r24
    2566:	97 fb       	bst	r25, 7
    2568:	99 1f       	adc	r25, r25
    256a:	61 f0       	breq	.+24     	; 0x2584 <__fp_splitA+0x20>
    256c:	9f 3f       	cpi	r25, 0xFF	; 255
    256e:	79 f0       	breq	.+30     	; 0x258e <__fp_splitA+0x2a>
    2570:	87 95       	ror	r24
    2572:	08 95       	ret
    2574:	12 16       	cp	r1, r18
    2576:	13 06       	cpc	r1, r19
    2578:	14 06       	cpc	r1, r20
    257a:	55 1f       	adc	r21, r21
    257c:	f2 cf       	rjmp	.-28     	; 0x2562 <__fp_split3+0xe>
    257e:	46 95       	lsr	r20
    2580:	f1 df       	rcall	.-30     	; 0x2564 <__fp_splitA>
    2582:	08 c0       	rjmp	.+16     	; 0x2594 <__fp_splitA+0x30>
    2584:	16 16       	cp	r1, r22
    2586:	17 06       	cpc	r1, r23
    2588:	18 06       	cpc	r1, r24
    258a:	99 1f       	adc	r25, r25
    258c:	f1 cf       	rjmp	.-30     	; 0x2570 <__fp_splitA+0xc>
    258e:	86 95       	lsr	r24
    2590:	71 05       	cpc	r23, r1
    2592:	61 05       	cpc	r22, r1
    2594:	08 94       	sec
    2596:	08 95       	ret

00002598 <__fp_zero>:
    2598:	e8 94       	clt

0000259a <__fp_szero>:
    259a:	bb 27       	eor	r27, r27
    259c:	66 27       	eor	r22, r22
    259e:	77 27       	eor	r23, r23
    25a0:	cb 01       	movw	r24, r22
    25a2:	97 f9       	bld	r25, 7
    25a4:	08 95       	ret

000025a6 <__mulsf3>:
    25a6:	0b d0       	rcall	.+22     	; 0x25be <__mulsf3x>
    25a8:	c4 cf       	rjmp	.-120    	; 0x2532 <__fp_round>
    25aa:	b5 df       	rcall	.-150    	; 0x2516 <__fp_pscA>
    25ac:	28 f0       	brcs	.+10     	; 0x25b8 <__mulsf3+0x12>
    25ae:	ba df       	rcall	.-140    	; 0x2524 <__fp_pscB>
    25b0:	18 f0       	brcs	.+6      	; 0x25b8 <__mulsf3+0x12>
    25b2:	95 23       	and	r25, r21
    25b4:	09 f0       	breq	.+2      	; 0x25b8 <__mulsf3+0x12>
    25b6:	a6 cf       	rjmp	.-180    	; 0x2504 <__fp_inf>
    25b8:	ab cf       	rjmp	.-170    	; 0x2510 <__fp_nan>
    25ba:	11 24       	eor	r1, r1
    25bc:	ee cf       	rjmp	.-36     	; 0x259a <__fp_szero>

000025be <__mulsf3x>:
    25be:	ca df       	rcall	.-108    	; 0x2554 <__fp_split3>
    25c0:	a0 f3       	brcs	.-24     	; 0x25aa <__mulsf3+0x4>

000025c2 <__mulsf3_pse>:
    25c2:	95 9f       	mul	r25, r21
    25c4:	d1 f3       	breq	.-12     	; 0x25ba <__mulsf3+0x14>
    25c6:	95 0f       	add	r25, r21
    25c8:	50 e0       	ldi	r21, 0x00	; 0
    25ca:	55 1f       	adc	r21, r21
    25cc:	62 9f       	mul	r22, r18
    25ce:	f0 01       	movw	r30, r0
    25d0:	72 9f       	mul	r23, r18
    25d2:	bb 27       	eor	r27, r27
    25d4:	f0 0d       	add	r31, r0
    25d6:	b1 1d       	adc	r27, r1
    25d8:	63 9f       	mul	r22, r19
    25da:	aa 27       	eor	r26, r26
    25dc:	f0 0d       	add	r31, r0
    25de:	b1 1d       	adc	r27, r1
    25e0:	aa 1f       	adc	r26, r26
    25e2:	64 9f       	mul	r22, r20
    25e4:	66 27       	eor	r22, r22
    25e6:	b0 0d       	add	r27, r0
    25e8:	a1 1d       	adc	r26, r1
    25ea:	66 1f       	adc	r22, r22
    25ec:	82 9f       	mul	r24, r18
    25ee:	22 27       	eor	r18, r18
    25f0:	b0 0d       	add	r27, r0
    25f2:	a1 1d       	adc	r26, r1
    25f4:	62 1f       	adc	r22, r18
    25f6:	73 9f       	mul	r23, r19
    25f8:	b0 0d       	add	r27, r0
    25fa:	a1 1d       	adc	r26, r1
    25fc:	62 1f       	adc	r22, r18
    25fe:	83 9f       	mul	r24, r19
    2600:	a0 0d       	add	r26, r0
    2602:	61 1d       	adc	r22, r1
    2604:	22 1f       	adc	r18, r18
    2606:	74 9f       	mul	r23, r20
    2608:	33 27       	eor	r19, r19
    260a:	a0 0d       	add	r26, r0
    260c:	61 1d       	adc	r22, r1
    260e:	23 1f       	adc	r18, r19
    2610:	84 9f       	mul	r24, r20
    2612:	60 0d       	add	r22, r0
    2614:	21 1d       	adc	r18, r1
    2616:	82 2f       	mov	r24, r18
    2618:	76 2f       	mov	r23, r22
    261a:	6a 2f       	mov	r22, r26
    261c:	11 24       	eor	r1, r1
    261e:	9f 57       	subi	r25, 0x7F	; 127
    2620:	50 40       	sbci	r21, 0x00	; 0
    2622:	8a f0       	brmi	.+34     	; 0x2646 <__mulsf3_pse+0x84>
    2624:	e1 f0       	breq	.+56     	; 0x265e <__mulsf3_pse+0x9c>
    2626:	88 23       	and	r24, r24
    2628:	4a f0       	brmi	.+18     	; 0x263c <__mulsf3_pse+0x7a>
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	bb 1f       	adc	r27, r27
    2630:	66 1f       	adc	r22, r22
    2632:	77 1f       	adc	r23, r23
    2634:	88 1f       	adc	r24, r24
    2636:	91 50       	subi	r25, 0x01	; 1
    2638:	50 40       	sbci	r21, 0x00	; 0
    263a:	a9 f7       	brne	.-22     	; 0x2626 <__mulsf3_pse+0x64>
    263c:	9e 3f       	cpi	r25, 0xFE	; 254
    263e:	51 05       	cpc	r21, r1
    2640:	70 f0       	brcs	.+28     	; 0x265e <__mulsf3_pse+0x9c>
    2642:	60 cf       	rjmp	.-320    	; 0x2504 <__fp_inf>
    2644:	aa cf       	rjmp	.-172    	; 0x259a <__fp_szero>
    2646:	5f 3f       	cpi	r21, 0xFF	; 255
    2648:	ec f3       	brlt	.-6      	; 0x2644 <__mulsf3_pse+0x82>
    264a:	98 3e       	cpi	r25, 0xE8	; 232
    264c:	dc f3       	brlt	.-10     	; 0x2644 <__mulsf3_pse+0x82>
    264e:	86 95       	lsr	r24
    2650:	77 95       	ror	r23
    2652:	67 95       	ror	r22
    2654:	b7 95       	ror	r27
    2656:	f7 95       	ror	r31
    2658:	e7 95       	ror	r30
    265a:	9f 5f       	subi	r25, 0xFF	; 255
    265c:	c1 f7       	brne	.-16     	; 0x264e <__mulsf3_pse+0x8c>
    265e:	fe 2b       	or	r31, r30
    2660:	88 0f       	add	r24, r24
    2662:	91 1d       	adc	r25, r1
    2664:	96 95       	lsr	r25
    2666:	87 95       	ror	r24
    2668:	97 f9       	bld	r25, 7
    266a:	08 95       	ret

0000266c <__udivmodsi4>:
    266c:	a1 e2       	ldi	r26, 0x21	; 33
    266e:	1a 2e       	mov	r1, r26
    2670:	aa 1b       	sub	r26, r26
    2672:	bb 1b       	sub	r27, r27
    2674:	fd 01       	movw	r30, r26
    2676:	0d c0       	rjmp	.+26     	; 0x2692 <__udivmodsi4_ep>

00002678 <__udivmodsi4_loop>:
    2678:	aa 1f       	adc	r26, r26
    267a:	bb 1f       	adc	r27, r27
    267c:	ee 1f       	adc	r30, r30
    267e:	ff 1f       	adc	r31, r31
    2680:	a2 17       	cp	r26, r18
    2682:	b3 07       	cpc	r27, r19
    2684:	e4 07       	cpc	r30, r20
    2686:	f5 07       	cpc	r31, r21
    2688:	20 f0       	brcs	.+8      	; 0x2692 <__udivmodsi4_ep>
    268a:	a2 1b       	sub	r26, r18
    268c:	b3 0b       	sbc	r27, r19
    268e:	e4 0b       	sbc	r30, r20
    2690:	f5 0b       	sbc	r31, r21

00002692 <__udivmodsi4_ep>:
    2692:	66 1f       	adc	r22, r22
    2694:	77 1f       	adc	r23, r23
    2696:	88 1f       	adc	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	1a 94       	dec	r1
    269c:	69 f7       	brne	.-38     	; 0x2678 <__udivmodsi4_loop>
    269e:	60 95       	com	r22
    26a0:	70 95       	com	r23
    26a2:	80 95       	com	r24
    26a4:	90 95       	com	r25
    26a6:	9b 01       	movw	r18, r22
    26a8:	ac 01       	movw	r20, r24
    26aa:	bd 01       	movw	r22, r26
    26ac:	cf 01       	movw	r24, r30
    26ae:	08 95       	ret

000026b0 <__tablejump2__>:
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	88 1f       	adc	r24, r24
    26b6:	8b bf       	out	0x3b, r24	; 59
    26b8:	07 90       	elpm	r0, Z+
    26ba:	f6 91       	elpm	r31, Z
    26bc:	e0 2d       	mov	r30, r0
    26be:	19 94       	eijmp

000026c0 <__umulhisi3>:
    26c0:	a2 9f       	mul	r26, r18
    26c2:	b0 01       	movw	r22, r0
    26c4:	b3 9f       	mul	r27, r19
    26c6:	c0 01       	movw	r24, r0
    26c8:	a3 9f       	mul	r26, r19
    26ca:	70 0d       	add	r23, r0
    26cc:	81 1d       	adc	r24, r1
    26ce:	11 24       	eor	r1, r1
    26d0:	91 1d       	adc	r25, r1
    26d2:	b2 9f       	mul	r27, r18
    26d4:	70 0d       	add	r23, r0
    26d6:	81 1d       	adc	r24, r1
    26d8:	11 24       	eor	r1, r1
    26da:	91 1d       	adc	r25, r1
    26dc:	08 95       	ret

000026de <__muluhisi3>:
    26de:	f0 df       	rcall	.-32     	; 0x26c0 <__umulhisi3>
    26e0:	a5 9f       	mul	r26, r21
    26e2:	90 0d       	add	r25, r0
    26e4:	b4 9f       	mul	r27, r20
    26e6:	90 0d       	add	r25, r0
    26e8:	a4 9f       	mul	r26, r20
    26ea:	80 0d       	add	r24, r0
    26ec:	91 1d       	adc	r25, r1
    26ee:	11 24       	eor	r1, r1
    26f0:	08 95       	ret

000026f2 <malloc>:
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	82 30       	cpi	r24, 0x02	; 2
    26fc:	91 05       	cpc	r25, r1
    26fe:	10 f4       	brcc	.+4      	; 0x2704 <malloc+0x12>
    2700:	82 e0       	ldi	r24, 0x02	; 2
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	e0 91 fd 04 	lds	r30, 0x04FD	; 0x8004fd <__flp>
    2708:	f0 91 fe 04 	lds	r31, 0x04FE	; 0x8004fe <__flp+0x1>
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	a0 e0       	ldi	r26, 0x00	; 0
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	30 97       	sbiw	r30, 0x00	; 0
    2716:	19 f1       	breq	.+70     	; 0x275e <malloc+0x6c>
    2718:	40 81       	ld	r20, Z
    271a:	51 81       	ldd	r21, Z+1	; 0x01
    271c:	02 81       	ldd	r16, Z+2	; 0x02
    271e:	13 81       	ldd	r17, Z+3	; 0x03
    2720:	48 17       	cp	r20, r24
    2722:	59 07       	cpc	r21, r25
    2724:	c8 f0       	brcs	.+50     	; 0x2758 <malloc+0x66>
    2726:	84 17       	cp	r24, r20
    2728:	95 07       	cpc	r25, r21
    272a:	69 f4       	brne	.+26     	; 0x2746 <malloc+0x54>
    272c:	10 97       	sbiw	r26, 0x00	; 0
    272e:	31 f0       	breq	.+12     	; 0x273c <malloc+0x4a>
    2730:	12 96       	adiw	r26, 0x02	; 2
    2732:	0c 93       	st	X, r16
    2734:	12 97       	sbiw	r26, 0x02	; 2
    2736:	13 96       	adiw	r26, 0x03	; 3
    2738:	1c 93       	st	X, r17
    273a:	27 c0       	rjmp	.+78     	; 0x278a <malloc+0x98>
    273c:	00 93 fd 04 	sts	0x04FD, r16	; 0x8004fd <__flp>
    2740:	10 93 fe 04 	sts	0x04FE, r17	; 0x8004fe <__flp+0x1>
    2744:	22 c0       	rjmp	.+68     	; 0x278a <malloc+0x98>
    2746:	21 15       	cp	r18, r1
    2748:	31 05       	cpc	r19, r1
    274a:	19 f0       	breq	.+6      	; 0x2752 <malloc+0x60>
    274c:	42 17       	cp	r20, r18
    274e:	53 07       	cpc	r21, r19
    2750:	18 f4       	brcc	.+6      	; 0x2758 <malloc+0x66>
    2752:	9a 01       	movw	r18, r20
    2754:	bd 01       	movw	r22, r26
    2756:	ef 01       	movw	r28, r30
    2758:	df 01       	movw	r26, r30
    275a:	f8 01       	movw	r30, r16
    275c:	db cf       	rjmp	.-74     	; 0x2714 <malloc+0x22>
    275e:	21 15       	cp	r18, r1
    2760:	31 05       	cpc	r19, r1
    2762:	f9 f0       	breq	.+62     	; 0x27a2 <malloc+0xb0>
    2764:	28 1b       	sub	r18, r24
    2766:	39 0b       	sbc	r19, r25
    2768:	24 30       	cpi	r18, 0x04	; 4
    276a:	31 05       	cpc	r19, r1
    276c:	80 f4       	brcc	.+32     	; 0x278e <malloc+0x9c>
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	9b 81       	ldd	r25, Y+3	; 0x03
    2772:	61 15       	cp	r22, r1
    2774:	71 05       	cpc	r23, r1
    2776:	21 f0       	breq	.+8      	; 0x2780 <malloc+0x8e>
    2778:	fb 01       	movw	r30, r22
    277a:	93 83       	std	Z+3, r25	; 0x03
    277c:	82 83       	std	Z+2, r24	; 0x02
    277e:	04 c0       	rjmp	.+8      	; 0x2788 <malloc+0x96>
    2780:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <__flp+0x1>
    2784:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <__flp>
    2788:	fe 01       	movw	r30, r28
    278a:	32 96       	adiw	r30, 0x02	; 2
    278c:	44 c0       	rjmp	.+136    	; 0x2816 <malloc+0x124>
    278e:	fe 01       	movw	r30, r28
    2790:	e2 0f       	add	r30, r18
    2792:	f3 1f       	adc	r31, r19
    2794:	81 93       	st	Z+, r24
    2796:	91 93       	st	Z+, r25
    2798:	22 50       	subi	r18, 0x02	; 2
    279a:	31 09       	sbc	r19, r1
    279c:	39 83       	std	Y+1, r19	; 0x01
    279e:	28 83       	st	Y, r18
    27a0:	3a c0       	rjmp	.+116    	; 0x2816 <malloc+0x124>
    27a2:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <__brkval>
    27a6:	30 91 fc 04 	lds	r19, 0x04FC	; 0x8004fc <__brkval+0x1>
    27aa:	23 2b       	or	r18, r19
    27ac:	41 f4       	brne	.+16     	; 0x27be <malloc+0xcc>
    27ae:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    27b2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    27b6:	30 93 fc 04 	sts	0x04FC, r19	; 0x8004fc <__brkval+0x1>
    27ba:	20 93 fb 04 	sts	0x04FB, r18	; 0x8004fb <__brkval>
    27be:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    27c2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    27c6:	21 15       	cp	r18, r1
    27c8:	31 05       	cpc	r19, r1
    27ca:	41 f4       	brne	.+16     	; 0x27dc <malloc+0xea>
    27cc:	2d b7       	in	r18, 0x3d	; 61
    27ce:	3e b7       	in	r19, 0x3e	; 62
    27d0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    27d4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    27d8:	24 1b       	sub	r18, r20
    27da:	35 0b       	sbc	r19, r21
    27dc:	e0 91 fb 04 	lds	r30, 0x04FB	; 0x8004fb <__brkval>
    27e0:	f0 91 fc 04 	lds	r31, 0x04FC	; 0x8004fc <__brkval+0x1>
    27e4:	e2 17       	cp	r30, r18
    27e6:	f3 07       	cpc	r31, r19
    27e8:	a0 f4       	brcc	.+40     	; 0x2812 <malloc+0x120>
    27ea:	2e 1b       	sub	r18, r30
    27ec:	3f 0b       	sbc	r19, r31
    27ee:	28 17       	cp	r18, r24
    27f0:	39 07       	cpc	r19, r25
    27f2:	78 f0       	brcs	.+30     	; 0x2812 <malloc+0x120>
    27f4:	ac 01       	movw	r20, r24
    27f6:	4e 5f       	subi	r20, 0xFE	; 254
    27f8:	5f 4f       	sbci	r21, 0xFF	; 255
    27fa:	24 17       	cp	r18, r20
    27fc:	35 07       	cpc	r19, r21
    27fe:	48 f0       	brcs	.+18     	; 0x2812 <malloc+0x120>
    2800:	4e 0f       	add	r20, r30
    2802:	5f 1f       	adc	r21, r31
    2804:	50 93 fc 04 	sts	0x04FC, r21	; 0x8004fc <__brkval+0x1>
    2808:	40 93 fb 04 	sts	0x04FB, r20	; 0x8004fb <__brkval>
    280c:	81 93       	st	Z+, r24
    280e:	91 93       	st	Z+, r25
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <malloc+0x124>
    2812:	e0 e0       	ldi	r30, 0x00	; 0
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	cf 01       	movw	r24, r30
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	08 95       	ret

00002822 <free>:
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	09 f4       	brne	.+2      	; 0x282c <free+0xa>
    282a:	81 c0       	rjmp	.+258    	; 0x292e <free+0x10c>
    282c:	fc 01       	movw	r30, r24
    282e:	32 97       	sbiw	r30, 0x02	; 2
    2830:	13 82       	std	Z+3, r1	; 0x03
    2832:	12 82       	std	Z+2, r1	; 0x02
    2834:	a0 91 fd 04 	lds	r26, 0x04FD	; 0x8004fd <__flp>
    2838:	b0 91 fe 04 	lds	r27, 0x04FE	; 0x8004fe <__flp+0x1>
    283c:	10 97       	sbiw	r26, 0x00	; 0
    283e:	81 f4       	brne	.+32     	; 0x2860 <free+0x3e>
    2840:	20 81       	ld	r18, Z
    2842:	31 81       	ldd	r19, Z+1	; 0x01
    2844:	82 0f       	add	r24, r18
    2846:	93 1f       	adc	r25, r19
    2848:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <__brkval>
    284c:	30 91 fc 04 	lds	r19, 0x04FC	; 0x8004fc <__brkval+0x1>
    2850:	28 17       	cp	r18, r24
    2852:	39 07       	cpc	r19, r25
    2854:	51 f5       	brne	.+84     	; 0x28aa <free+0x88>
    2856:	f0 93 fc 04 	sts	0x04FC, r31	; 0x8004fc <__brkval+0x1>
    285a:	e0 93 fb 04 	sts	0x04FB, r30	; 0x8004fb <__brkval>
    285e:	67 c0       	rjmp	.+206    	; 0x292e <free+0x10c>
    2860:	ed 01       	movw	r28, r26
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	ce 17       	cp	r28, r30
    2868:	df 07       	cpc	r29, r31
    286a:	40 f4       	brcc	.+16     	; 0x287c <free+0x5a>
    286c:	4a 81       	ldd	r20, Y+2	; 0x02
    286e:	5b 81       	ldd	r21, Y+3	; 0x03
    2870:	9e 01       	movw	r18, r28
    2872:	41 15       	cp	r20, r1
    2874:	51 05       	cpc	r21, r1
    2876:	f1 f0       	breq	.+60     	; 0x28b4 <free+0x92>
    2878:	ea 01       	movw	r28, r20
    287a:	f5 cf       	rjmp	.-22     	; 0x2866 <free+0x44>
    287c:	d3 83       	std	Z+3, r29	; 0x03
    287e:	c2 83       	std	Z+2, r28	; 0x02
    2880:	40 81       	ld	r20, Z
    2882:	51 81       	ldd	r21, Z+1	; 0x01
    2884:	84 0f       	add	r24, r20
    2886:	95 1f       	adc	r25, r21
    2888:	c8 17       	cp	r28, r24
    288a:	d9 07       	cpc	r29, r25
    288c:	59 f4       	brne	.+22     	; 0x28a4 <free+0x82>
    288e:	88 81       	ld	r24, Y
    2890:	99 81       	ldd	r25, Y+1	; 0x01
    2892:	84 0f       	add	r24, r20
    2894:	95 1f       	adc	r25, r21
    2896:	02 96       	adiw	r24, 0x02	; 2
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	80 83       	st	Z, r24
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	9b 81       	ldd	r25, Y+3	; 0x03
    28a0:	93 83       	std	Z+3, r25	; 0x03
    28a2:	82 83       	std	Z+2, r24	; 0x02
    28a4:	21 15       	cp	r18, r1
    28a6:	31 05       	cpc	r19, r1
    28a8:	29 f4       	brne	.+10     	; 0x28b4 <free+0x92>
    28aa:	f0 93 fe 04 	sts	0x04FE, r31	; 0x8004fe <__flp+0x1>
    28ae:	e0 93 fd 04 	sts	0x04FD, r30	; 0x8004fd <__flp>
    28b2:	3d c0       	rjmp	.+122    	; 0x292e <free+0x10c>
    28b4:	e9 01       	movw	r28, r18
    28b6:	fb 83       	std	Y+3, r31	; 0x03
    28b8:	ea 83       	std	Y+2, r30	; 0x02
    28ba:	49 91       	ld	r20, Y+
    28bc:	59 91       	ld	r21, Y+
    28be:	c4 0f       	add	r28, r20
    28c0:	d5 1f       	adc	r29, r21
    28c2:	ec 17       	cp	r30, r28
    28c4:	fd 07       	cpc	r31, r29
    28c6:	61 f4       	brne	.+24     	; 0x28e0 <free+0xbe>
    28c8:	80 81       	ld	r24, Z
    28ca:	91 81       	ldd	r25, Z+1	; 0x01
    28cc:	84 0f       	add	r24, r20
    28ce:	95 1f       	adc	r25, r21
    28d0:	02 96       	adiw	r24, 0x02	; 2
    28d2:	e9 01       	movw	r28, r18
    28d4:	99 83       	std	Y+1, r25	; 0x01
    28d6:	88 83       	st	Y, r24
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	9b 83       	std	Y+3, r25	; 0x03
    28de:	8a 83       	std	Y+2, r24	; 0x02
    28e0:	e0 e0       	ldi	r30, 0x00	; 0
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	12 96       	adiw	r26, 0x02	; 2
    28e6:	8d 91       	ld	r24, X+
    28e8:	9c 91       	ld	r25, X
    28ea:	13 97       	sbiw	r26, 0x03	; 3
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	19 f0       	breq	.+6      	; 0x28f6 <free+0xd4>
    28f0:	fd 01       	movw	r30, r26
    28f2:	dc 01       	movw	r26, r24
    28f4:	f7 cf       	rjmp	.-18     	; 0x28e4 <free+0xc2>
    28f6:	8d 91       	ld	r24, X+
    28f8:	9c 91       	ld	r25, X
    28fa:	11 97       	sbiw	r26, 0x01	; 1
    28fc:	9d 01       	movw	r18, r26
    28fe:	2e 5f       	subi	r18, 0xFE	; 254
    2900:	3f 4f       	sbci	r19, 0xFF	; 255
    2902:	82 0f       	add	r24, r18
    2904:	93 1f       	adc	r25, r19
    2906:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <__brkval>
    290a:	30 91 fc 04 	lds	r19, 0x04FC	; 0x8004fc <__brkval+0x1>
    290e:	28 17       	cp	r18, r24
    2910:	39 07       	cpc	r19, r25
    2912:	69 f4       	brne	.+26     	; 0x292e <free+0x10c>
    2914:	30 97       	sbiw	r30, 0x00	; 0
    2916:	29 f4       	brne	.+10     	; 0x2922 <free+0x100>
    2918:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <__flp+0x1>
    291c:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <__flp>
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <free+0x104>
    2922:	13 82       	std	Z+3, r1	; 0x03
    2924:	12 82       	std	Z+2, r1	; 0x02
    2926:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <__brkval+0x1>
    292a:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <__brkval>
    292e:	df 91       	pop	r29
    2930:	cf 91       	pop	r28
    2932:	08 95       	ret

00002934 <memcpy>:
    2934:	fb 01       	movw	r30, r22
    2936:	dc 01       	movw	r26, r24
    2938:	02 c0       	rjmp	.+4      	; 0x293e <memcpy+0xa>
    293a:	01 90       	ld	r0, Z+
    293c:	0d 92       	st	X+, r0
    293e:	41 50       	subi	r20, 0x01	; 1
    2940:	50 40       	sbci	r21, 0x00	; 0
    2942:	d8 f7       	brcc	.-10     	; 0x293a <memcpy+0x6>
    2944:	08 95       	ret

00002946 <memset>:
    2946:	dc 01       	movw	r26, r24
    2948:	01 c0       	rjmp	.+2      	; 0x294c <memset+0x6>
    294a:	6d 93       	st	X+, r22
    294c:	41 50       	subi	r20, 0x01	; 1
    294e:	50 40       	sbci	r21, 0x00	; 0
    2950:	e0 f7       	brcc	.-8      	; 0x294a <memset+0x4>
    2952:	08 95       	ret

00002954 <__itoa_ncheck>:
    2954:	bb 27       	eor	r27, r27
    2956:	4a 30       	cpi	r20, 0x0A	; 10
    2958:	31 f4       	brne	.+12     	; 0x2966 <__itoa_ncheck+0x12>
    295a:	99 23       	and	r25, r25
    295c:	22 f4       	brpl	.+8      	; 0x2966 <__itoa_ncheck+0x12>
    295e:	bd e2       	ldi	r27, 0x2D	; 45
    2960:	90 95       	com	r25
    2962:	81 95       	neg	r24
    2964:	9f 4f       	sbci	r25, 0xFF	; 255
    2966:	01 c0       	rjmp	.+2      	; 0x296a <__utoa_common>

00002968 <__utoa_ncheck>:
    2968:	bb 27       	eor	r27, r27

0000296a <__utoa_common>:
    296a:	fb 01       	movw	r30, r22
    296c:	55 27       	eor	r21, r21
    296e:	aa 27       	eor	r26, r26
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	aa 1f       	adc	r26, r26
    2976:	a4 17       	cp	r26, r20
    2978:	10 f0       	brcs	.+4      	; 0x297e <__utoa_common+0x14>
    297a:	a4 1b       	sub	r26, r20
    297c:	83 95       	inc	r24
    297e:	50 51       	subi	r21, 0x10	; 16
    2980:	b9 f7       	brne	.-18     	; 0x2970 <__utoa_common+0x6>
    2982:	a0 5d       	subi	r26, 0xD0	; 208
    2984:	aa 33       	cpi	r26, 0x3A	; 58
    2986:	08 f0       	brcs	.+2      	; 0x298a <__utoa_common+0x20>
    2988:	a9 5d       	subi	r26, 0xD9	; 217
    298a:	a1 93       	st	Z+, r26
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	79 f7       	brne	.-34     	; 0x296e <__utoa_common+0x4>
    2990:	b1 11       	cpse	r27, r1
    2992:	b1 93       	st	Z+, r27
    2994:	11 92       	st	Z+, r1
    2996:	cb 01       	movw	r24, r22
    2998:	00 c0       	rjmp	.+0      	; 0x299a <strrev>

0000299a <strrev>:
    299a:	dc 01       	movw	r26, r24
    299c:	fc 01       	movw	r30, r24
    299e:	67 2f       	mov	r22, r23
    29a0:	71 91       	ld	r23, Z+
    29a2:	77 23       	and	r23, r23
    29a4:	e1 f7       	brne	.-8      	; 0x299e <strrev+0x4>
    29a6:	32 97       	sbiw	r30, 0x02	; 2
    29a8:	04 c0       	rjmp	.+8      	; 0x29b2 <strrev+0x18>
    29aa:	7c 91       	ld	r23, X
    29ac:	6d 93       	st	X+, r22
    29ae:	70 83       	st	Z, r23
    29b0:	62 91       	ld	r22, -Z
    29b2:	ae 17       	cp	r26, r30
    29b4:	bf 07       	cpc	r27, r31
    29b6:	c8 f3       	brcs	.-14     	; 0x29aa <strrev+0x10>
    29b8:	08 95       	ret

000029ba <_exit>:
    29ba:	f8 94       	cli

000029bc <__stop_program>:
    29bc:	ff cf       	rjmp	.-2      	; 0x29bc <__stop_program>
