
Temperatuur_luchtvochtigheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fe0  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cfb  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000477  00000000  00000000  00002137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000025b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b2  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000032c  00000000  00000000  00002d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000306e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	c8 d0       	rcall	.+400    	; 0x286 <main>
  f6:	22 c1       	rjmp	.+580    	; 0x33c <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z11init_masterv>:
		UART_Transmit_Integer(data[0],10);
    }
}

void init_master() {
	TWSR = 0;
  fa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
	// Set bit rate
	TWBR = ( ( F_CPU / 100000 ) - 16) / 2;
  fe:	88 e4       	ldi	r24, 0x48	; 72
 100:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
	TWCR = (1<<TWEN);
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 10a:	08 95       	ret

0000010c <_Z9verzendenhh>:
}

void verzenden(uint8_t ad,uint8_t b) {
	//  uint8_t op[5];

	TWCR |= (1<<TWSTA);
 10c:	ec eb       	ldi	r30, 0xBC	; 188
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	90 62       	ori	r25, 0x20	; 32
 114:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT)));
 116:	90 81       	ld	r25, Z
 118:	99 23       	and	r25, r25
 11a:	ec f7       	brge	.-6      	; 0x116 <_Z9verzendenhh+0xa>
	//   op[0] = TWSR;
	TWDR=(ad<<1);
 11c:	88 0f       	add	r24, r24
 11e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
 122:	84 e8       	ldi	r24, 0x84	; 132
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
 128:	ec eb       	ldi	r30, 0xBC	; 188
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	ec f7       	brge	.-6      	; 0x12c <_Z9verzendenhh+0x20>
	//    op[1] = TWSR;

	TWDR=b;
 132:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
 136:	84 e8       	ldi	r24, 0x84	; 132
 138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
 13c:	ec eb       	ldi	r30, 0xBC	; 188
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	88 23       	and	r24, r24
 144:	ec f7       	brge	.-6      	; 0x140 <_Z9verzendenhh+0x34>
	//  op[2] = TWSR;

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 146:	84 e9       	ldi	r24, 0x94	; 148
 148:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 14c:	08 95       	ret

0000014e <_Z9UART_Initj>:
}


void UART_Init( unsigned int ubrr)
{
	UBRR0H = (ubrr>>8);												// Set baud rate
 14e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = ubrr;
 152:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);					// Enable receiver and transmitter and enable RX interrupt
 156:	88 e9       	ldi	r24, 0x98	; 152
 158:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);											// Set frame format: 8data, 1 stop bit
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 162:	08 95       	ret

00000164 <_Z13UART_Transmith>:
}

void UART_Transmit( unsigned char data )
{
	while ( !( UCSR0A & (1<<UDRE0)) ) {};							// Wait for empty transmit buffer
 164:	e0 ec       	ldi	r30, 0xC0	; 192
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	90 81       	ld	r25, Z
 16a:	95 ff       	sbrs	r25, 5
 16c:	fd cf       	rjmp	.-6      	; 0x168 <_Z13UART_Transmith+0x4>
	UDR0 = data;													// Put data into buffer, sends the data
 16e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 172:	08 95       	ret

00000174 <_Z9ontvangenhPhh>:
	// Set bit rate
	TWBR = ( ( F_CPU / 100000 ) - 16) / 2;
	TWCR = (1<<TWEN);
}

void ontvangen(uint8_t ad,uint8_t b[],uint8_t max) {
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	18 2f       	mov	r17, r24
 182:	eb 01       	movw	r28, r22
 184:	04 2f       	mov	r16, r20
	uint8_t op[15];
	
	UART_Transmit('a');
 186:	81 e6       	ldi	r24, 0x61	; 97
 188:	ed df       	rcall	.-38     	; 0x164 <_Z13UART_Transmith>

	TWCR |= (1<<TWSTA);
 18a:	ec eb       	ldi	r30, 0xBC	; 188
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 62       	ori	r24, 0x20	; 32
 192:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 194:	80 81       	ld	r24, Z
 196:	88 23       	and	r24, r24
 198:	ec f7       	brge	.-6      	; 0x194 <_Z9ontvangenhPhh+0x20>
	op[0] = TWSR;
 19a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	
	UART_Transmit('b');
 19e:	82 e6       	ldi	r24, 0x62	; 98
 1a0:	e1 df       	rcall	.-62     	; 0x164 <_Z13UART_Transmith>

	TWDR=(ad<<1)+1;
 1a2:	11 0f       	add	r17, r17
 1a4:	1f 5f       	subi	r17, 0xFF	; 255
 1a6:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
 1aa:	84 e8       	ldi	r24, 0x84	; 132
 1ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
 1b0:	ec eb       	ldi	r30, 0xBC	; 188
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	88 23       	and	r24, r24
 1b8:	ec f7       	brge	.-6      	; 0x1b4 <_Z9ontvangenhPhh+0x40>

	op[1] = TWSR;
 1ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
	b[0]=TWDR;
 1be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 1c2:	88 83       	st	Y, r24
	
	uint8_t tel=0;
 1c4:	90 e0       	ldi	r25, 0x00	; 0
	do{
		
		//UART_Transmit('c');
		if(tel == max-1){
 1c6:	40 2f       	mov	r20, r16
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	41 50       	subi	r20, 0x01	; 1
 1cc:	51 09       	sbc	r21, r1
			TWCR=(1<<TWINT)|(1<<TWEN);
			//UART_Transmit('c1');
		}else{
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 1ce:	ec eb       	ldi	r30, 0xBC	; 188
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	0f 2e       	mov	r0, r31
 1d4:	f4 ec       	ldi	r31, 0xC4	; 196
 1d6:	ff 2e       	mov	r15, r31
 1d8:	f0 2d       	mov	r31, r0
	uint8_t tel=0;
	do{
		
		//UART_Transmit('c');
		if(tel == max-1){
			TWCR=(1<<TWINT)|(1<<TWEN);
 1da:	0f 2e       	mov	r0, r31
 1dc:	f4 e8       	ldi	r31, 0x84	; 132
 1de:	ef 2e       	mov	r14, r31
 1e0:	f0 2d       	mov	r31, r0
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
			//UART_Transmit('c2');
		}
		while(!(TWCR & (1<<TWINT))); //blijft hier vastzitten
		//UART_Transmit('c3');
		op[tel] = TWSR;
 1e2:	09 eb       	ldi	r16, 0xB9	; 185
 1e4:	10 e0       	ldi	r17, 0x00	; 0
		b[tel]=TWDR;
 1e6:	6b eb       	ldi	r22, 0xBB	; 187
 1e8:	70 e0       	ldi	r23, 0x00	; 0
	
	uint8_t tel=0;
	do{
		
		//UART_Transmit('c');
		if(tel == max-1){
 1ea:	29 2f       	mov	r18, r25
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	24 17       	cp	r18, r20
 1f0:	35 07       	cpc	r19, r21
 1f2:	11 f4       	brne	.+4      	; 0x1f8 <_Z9ontvangenhPhh+0x84>
			TWCR=(1<<TWINT)|(1<<TWEN);
 1f4:	e0 82       	st	Z, r14
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <_Z9ontvangenhPhh+0x86>
			//UART_Transmit('c1');
		}else{
			TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 1f8:	f0 82       	st	Z, r15
			//UART_Transmit('c2');
		}
		while(!(TWCR & (1<<TWINT))); //blijft hier vastzitten
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	ec f7       	brge	.-6      	; 0x1fa <_Z9ontvangenhPhh+0x86>
		//UART_Transmit('c3');
		op[tel] = TWSR;
 200:	d8 01       	movw	r26, r16
 202:	8c 91       	ld	r24, X
		b[tel]=TWDR;
 204:	db 01       	movw	r26, r22
 206:	2c 91       	ld	r18, X
 208:	de 01       	movw	r26, r28
 20a:	a9 0f       	add	r26, r25
 20c:	b1 1d       	adc	r27, r1
 20e:	2c 93       	st	X, r18
	}while(op[tel++] == 0x50);
 210:	9f 5f       	subi	r25, 0xFF	; 255

	op[1] = TWSR;
	b[0]=TWDR;
	
	uint8_t tel=0;
	do{
 212:	80 35       	cpi	r24, 0x50	; 80
 214:	51 f3       	breq	.-44     	; 0x1ea <_Z9ontvangenhPhh+0x76>
	}while(op[tel++] == 0x50);

	
	//UART_Transmit('d');

	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 216:	84 e9       	ldi	r24, 0x94	; 148
 218:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	//   for(uint8_t i=0;i<tel;++i) {
	//	 writeString("\n\r");writeInteger(op[i],16);
	//	 writeString(" data ");writeInteger(b[i],10);
	//   }
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	08 95       	ret

0000022a <_Z20UART_Transmit_StringPKc>:
	while ( !( UCSR0A & (1<<UDRE0)) ) {};							// Wait for empty transmit buffer
	UDR0 = data;													// Put data into buffer, sends the data
}

void UART_Transmit_String(const char *stringPtr)
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	ec 01       	movw	r28, r24
	while(*stringPtr != 0x00)
 230:	88 81       	ld	r24, Y
 232:	88 23       	and	r24, r24
 234:	29 f0       	breq	.+10     	; 0x240 <_Z20UART_Transmit_StringPKc+0x16>
 236:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_Transmit(*stringPtr);
 238:	95 df       	rcall	.-214    	; 0x164 <_Z13UART_Transmith>
	UDR0 = data;													// Put data into buffer, sends the data
}

void UART_Transmit_String(const char *stringPtr)
{
	while(*stringPtr != 0x00)
 23a:	89 91       	ld	r24, Y+
 23c:	81 11       	cpse	r24, r1
 23e:	fc cf       	rjmp	.-8      	; 0x238 <_Z20UART_Transmit_StringPKc+0xe>
	{
		UART_Transmit(*stringPtr);
		stringPtr++;
	}
	
	UART_Transmit('\n');
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	90 df       	rcall	.-224    	; 0x164 <_Z13UART_Transmith>
	UART_Transmit('\r');
 244:	8d e0       	ldi	r24, 0x0D	; 13
 246:	8e df       	rcall	.-228    	; 0x164 <_Z13UART_Transmith>
 248:	df 91       	pop	r29
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <_Z21UART_Transmit_Integerih>:
 24e:	cf 93       	push	r28


void UART_Transmit_Integer(int16_t number, uint8_t base)
{
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	61 97       	sbiw	r28, 0x11	; 17
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 262:	46 2f       	mov	r20, r22
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	be 01       	movw	r22, r28
 268:	6f 5f       	subi	r22, 0xFF	; 255
 26a:	7f 4f       	sbci	r23, 0xFF	; 255
 26c:	2a d0       	rcall	.+84     	; 0x2c2 <itoa>
	char buffer[17];
	itoa(number, &buffer[0], base);
	UART_Transmit_String(&buffer[0]);
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	db df       	rcall	.-74     	; 0x22a <_Z20UART_Transmit_StringPKc>
}
 274:	61 96       	adiw	r28, 0x11	; 17
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <main>:
void verzenden(uint8_t ad,uint8_t b);
void ontvangen(uint8_t ad,uint8_t b[],uint8_t max);
void init_master();

int main(void)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	60 97       	sbiw	r28, 0x10	; 16
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
	PORTD = 0x03;
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	8b b9       	out	0x0b, r24	; 11
	UART_Init(MYUBRR);
 29e:	87 e6       	ldi	r24, 0x67	; 103
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	55 df       	rcall	.-342    	; 0x14e <_Z9UART_Initj>
	init_master();
 2a4:	2a df       	rcall	.-428    	; 0xfa <_Z11init_masterv>
 2a6:	65 ee       	ldi	r22, 0xE5	; 229
    /* Replace with your application code */
	uint8_t data[16];
    while (1) 
    {
		verzenden(0x40, 0xE5);
 2a8:	80 e4       	ldi	r24, 0x40	; 64
 2aa:	30 df       	rcall	.-416    	; 0x10c <_Z9verzendenhh>
 2ac:	42 e0       	ldi	r20, 0x02	; 2
		ontvangen(0x40, data, 2);
 2ae:	be 01       	movw	r22, r28
 2b0:	6f 5f       	subi	r22, 0xFF	; 255
 2b2:	7f 4f       	sbci	r23, 0xFF	; 255
 2b4:	80 e4       	ldi	r24, 0x40	; 64
 2b6:	5e df       	rcall	.-324    	; 0x174 <_Z9ontvangenhPhh>
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
		UART_Transmit_Integer(data[0],10);
 2ba:	6a e0       	ldi	r22, 0x0A	; 10
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	c7 df       	rcall	.-114    	; 0x24e <_Z21UART_Transmit_Integerih>
 2c0:	f2 cf       	rjmp	.-28     	; 0x2a6 <main+0x20>

000002c2 <itoa>:
 2c2:	45 32       	cpi	r20, 0x25	; 37
 2c4:	51 05       	cpc	r21, r1
 2c6:	18 f4       	brcc	.+6      	; 0x2ce <itoa+0xc>
 2c8:	42 30       	cpi	r20, 0x02	; 2
 2ca:	08 f0       	brcs	.+2      	; 0x2ce <itoa+0xc>
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <__itoa_ncheck>
 2ce:	fb 01       	movw	r30, r22
 2d0:	10 82       	st	Z, r1
 2d2:	cb 01       	movw	r24, r22
 2d4:	08 95       	ret

000002d6 <__itoa_ncheck>:
 2d6:	bb 27       	eor	r27, r27
 2d8:	4a 30       	cpi	r20, 0x0A	; 10
 2da:	31 f4       	brne	.+12     	; 0x2e8 <__itoa_ncheck+0x12>
 2dc:	99 23       	and	r25, r25
 2de:	22 f4       	brpl	.+8      	; 0x2e8 <__itoa_ncheck+0x12>
 2e0:	bd e2       	ldi	r27, 0x2D	; 45
 2e2:	90 95       	com	r25
 2e4:	81 95       	neg	r24
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <__utoa_common>

000002ea <__utoa_ncheck>:
 2ea:	bb 27       	eor	r27, r27

000002ec <__utoa_common>:
 2ec:	fb 01       	movw	r30, r22
 2ee:	55 27       	eor	r21, r21
 2f0:	aa 27       	eor	r26, r26
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	aa 1f       	adc	r26, r26
 2f8:	a4 17       	cp	r26, r20
 2fa:	10 f0       	brcs	.+4      	; 0x300 <__utoa_common+0x14>
 2fc:	a4 1b       	sub	r26, r20
 2fe:	83 95       	inc	r24
 300:	50 51       	subi	r21, 0x10	; 16
 302:	b9 f7       	brne	.-18     	; 0x2f2 <__utoa_common+0x6>
 304:	a0 5d       	subi	r26, 0xD0	; 208
 306:	aa 33       	cpi	r26, 0x3A	; 58
 308:	08 f0       	brcs	.+2      	; 0x30c <__utoa_common+0x20>
 30a:	a9 5d       	subi	r26, 0xD9	; 217
 30c:	a1 93       	st	Z+, r26
 30e:	00 97       	sbiw	r24, 0x00	; 0
 310:	79 f7       	brne	.-34     	; 0x2f0 <__utoa_common+0x4>
 312:	b1 11       	cpse	r27, r1
 314:	b1 93       	st	Z+, r27
 316:	11 92       	st	Z+, r1
 318:	cb 01       	movw	r24, r22
 31a:	00 c0       	rjmp	.+0      	; 0x31c <strrev>

0000031c <strrev>:
 31c:	dc 01       	movw	r26, r24
 31e:	fc 01       	movw	r30, r24
 320:	67 2f       	mov	r22, r23
 322:	71 91       	ld	r23, Z+
 324:	77 23       	and	r23, r23
 326:	e1 f7       	brne	.-8      	; 0x320 <strrev+0x4>
 328:	32 97       	sbiw	r30, 0x02	; 2
 32a:	04 c0       	rjmp	.+8      	; 0x334 <strrev+0x18>
 32c:	7c 91       	ld	r23, X
 32e:	6d 93       	st	X+, r22
 330:	70 83       	st	Z, r23
 332:	62 91       	ld	r22, -Z
 334:	ae 17       	cp	r26, r30
 336:	bf 07       	cpc	r27, r31
 338:	c8 f3       	brcs	.-14     	; 0x32c <strrev+0x10>
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
